/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _zepto = __webpack_require__(1);
	
	var _zepto2 = _interopRequireDefault(_zepto);
	
	var _prism = __webpack_require__(2);
	
	var _prism2 = _interopRequireDefault(_prism);
	
	var _app = __webpack_require__(3);
	
	var _app2 = _interopRequireDefault(_app);
	
	var _app3 = __webpack_require__(4);
	
	var _app4 = _interopRequireDefault(_app3);
	
	__webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* 2. variables globals
	========================================================================== */
	
	// import $            from "jquery";
	var $gd_header = $('#header'),
	    $gd_menu = $('#menu-mobile'),
	    $gd_cover = $('#cover'),
	    $gd_search = $('#header-search'),
	    $sidebar_hidden = $('.sidebar .fixed'),
	    $gd_search_input = $('.search-field'),
	    $gd_share_count = $('.share-count'); /*
	                                         @package godofredoninja
	                                         
	                                         	========================================================================
	                                         		Mapache Javascript Functions
	                                         	========================================================================
	                                         */
	
	/**
	 * Table of Contents:
	 *
	 *		1. Imports libraris and modules
	 *      2. variables Globals
	 *      3. Functions
	 *      4. Search header
	 *      5. Opena and close menu mobile
	 *      6. Video Responsive youtube and vimeo
	 *      7. header transparent
	 */
	
	/* 1. Imports and libraris and modules
	========================================================================== */
	
	
	var overlay = {
	    opacity: 1,
	    visibility: 'visible'
	};
	
	/* 3. Functions
	========================================================================== */
	$('#menu-open').on('click', menuOpen);
	$('#menu-close').on('click', menuClose);
	$('.share').bind('click', Share);
	$(document).on('mouseup', mouseUp);
	
	/* 4. Search open and close
	========================================================================== */
	$('#search-open').on('click', function (e) {
	    e.preventDefault();
	    $gd_header.addClass('search-open-form');
	});
	
	$('#search-close').on('click', function (e) {
	    e.preventDefault();
	    $gd_header.removeClass('search-open-form');
	});
	
	$gd_search_input.focus(function () {
	    $gd_search.addClass('has-focus');
	    $('.header-navigation').css({ display: 'none' });
	}).blur(function () {
	    $gd_search.removeClass('has-focus');
	    $('.header-navigation').removeAttr('style');
	});
	
	/* 5. Menu Mobile open and close
	========================================================================== */
	function menuOpen(e) {
	    e.preventDefault();
	    $('html').attr('godo-state', 'no-scroll');
	    $('.overlay').css(overlay);
	    $gd_menu.addClass('open');
	}
	
	function menuClose(e) {
	    e.preventDefault();
	    $('html').removeAttr('godo-state');
	    $('.overlay').removeAttr('style');
	    $gd_menu.removeClass('open');
	}
	
	/* 6. Video Responsive youtube and vimeo
	========================================================================== */
	$('.post-content').each(function () {
	    var selectors = ['iframe[src*="player.vimeo.com"]', 'iframe[src*="youtube.com"]', 'iframe[src*="youtube-nocookie.com"]', 'iframe[src*="kickstarter.com"][src*="video.html"]'];
	
	    var $allVideos = $(this).find(selectors.join(','));
	
	    $allVideos.each(function () {
	        $(this).wrap('<aside class="video-responsive"></aside>');
	    });
	});
	
	/* 7. Header box shadow and transparent
	========================================================================== */
	if ($gd_cover.length > 0) {
	    $gd_header.css({ 'background': 'transparent' });
	
	    $(window).scroll(function () {
	        var scrollTop = $(window).scrollTop();
	        var gd_cover_height = $gd_cover.height() - $gd_header.height();
	        var gd_cover_wrap = (gd_cover_height - scrollTop) / gd_cover_height;
	        console.log(gd_cover_wrap);
	
	        if (scrollTop >= gd_cover_height) {
	            $gd_header.addClass('toolbar-shadow').removeAttr('style');
	        } else {
	            $gd_header.removeClass('toolbar-shadow').css({ 'background': 'transparent' });
	        }
	
	        if (gd_cover_wrap >= 0) {
	            $('.cover-wrap').css('opacity', gd_cover_wrap);
	        }
	    });
	} else {
	    $gd_header.addClass('toolbar-shadow');
	}
	
	/* 8. Share social
	========================================================================== */
	function Share(e) {
	    e.preventDefault();
	    var share = new _app2.default($(this));
	    share.godoShare();
	}
	
	/* 9. Share social count
	======================================================================== */
	if ($gd_share_count.length > 0) {
	    var share_count = new _app4.default($gd_share_count);
	    share_count.godoCount();
	}
	
	/* Mouse up
	========================================================================== */
	function mouseUp(e) {
	    if ($gd_menu.hasClass('open') && $gd_menu.has(e.target).length === 0) {
	        menuClose(e);
	    };
	}
	
	// sidebar hidden aside
	// if ($sidebar_hidden.length > 0) {
	//     var mela  = $sidebar_hidden.offset().top;
	//     $(window).scroll(function(){
	//         var scrollTop           = $(window).scrollTop();
	//
	//         if (scrollTop >= mela - 80) {
	//             $sidebar_hidden.css({'position':'fixed','top': '80px', 'width':'300px'});
	//         }else {
	//             $sidebar_hidden.removeAttr('style');
	//         }
	//     });
	// }

	// Plugins

	//  Search results ghostHunter
	// $gd_search_input.ghostHunter({
	//   results: '#search-result',
	//   zeroResultsInfo   : false,
	//   displaySearchInfo : false,
	//   result_template   : '<a href={{link}}">{{title}}</a>',
	//   onKeyUp           : true,
	//   rss               : "/rss"
	// });

	// lazy load img
	// var myLazyLoad = new LazyLoad();

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/* Zepto v1.1.6 - zepto event ajax form ie - zeptojs.com/license */
	
	var Zepto = function () {
	  var undefined,
	      key,
	      $,
	      classList,
	      emptyArray = [],
	      _slice = emptyArray.slice,
	      _filter = emptyArray.filter,
	      document = window.document,
	      elementDisplay = {},
	      classCache = {},
	      cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1, 'opacity': 1, 'z-index': 1, 'zoom': 1 },
	      fragmentRE = /^\s*<(\w+|!)[^>]*>/,
	      singleTagRE = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
	      tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	      rootNodeRE = /^(?:body|html)$/i,
	      capitalRE = /([A-Z])/g,
	
	
	  // special attributes that should be get/set via method calls
	  methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],
	      adjacencyOperators = ['after', 'prepend', 'before', 'append'],
	      table = document.createElement('table'),
	      tableRow = document.createElement('tr'),
	      containers = {
	    'tr': document.createElement('tbody'),
	    'tbody': table, 'thead': table, 'tfoot': table,
	    'td': tableRow, 'th': tableRow,
	    '*': document.createElement('div')
	  },
	      readyRE = /complete|loaded|interactive/,
	      simpleSelectorRE = /^[\w-]*$/,
	      class2type = {},
	      toString = class2type.toString,
	      zepto = {},
	      camelize,
	      uniq,
	      tempParent = document.createElement('div'),
	      propMap = {
	    'tabindex': 'tabIndex',
	    'readonly': 'readOnly',
	    'for': 'htmlFor',
	    'class': 'className',
	    'maxlength': 'maxLength',
	    'cellspacing': 'cellSpacing',
	    'cellpadding': 'cellPadding',
	    'rowspan': 'rowSpan',
	    'colspan': 'colSpan',
	    'usemap': 'useMap',
	    'frameborder': 'frameBorder',
	    'contenteditable': 'contentEditable'
	  },
	      isArray = Array.isArray || function (object) {
	    return object instanceof Array;
	  };
	
	  zepto.matches = function (element, selector) {
	    if (!selector || !element || element.nodeType !== 1) return false;
	    var matchesSelector = element.webkitMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector || element.matchesSelector;
	    if (matchesSelector) return matchesSelector.call(element, selector);
	    // fall back to performing a selector:
	    var match,
	        parent = element.parentNode,
	        temp = !parent;
	    if (temp) (parent = tempParent).appendChild(element);
	    match = ~zepto.qsa(parent, selector).indexOf(element);
	    temp && tempParent.removeChild(element);
	    return match;
	  };
	
	  function type(obj) {
	    return obj == null ? String(obj) : class2type[toString.call(obj)] || "object";
	  }
	
	  function isFunction(value) {
	    return type(value) == "function";
	  }
	  function isWindow(obj) {
	    return obj != null && obj == obj.window;
	  }
	  function isDocument(obj) {
	    return obj != null && obj.nodeType == obj.DOCUMENT_NODE;
	  }
	  function isObject(obj) {
	    return type(obj) == "object";
	  }
	  function isPlainObject(obj) {
	    return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;
	  }
	  function likeArray(obj) {
	    return typeof obj.length == 'number';
	  }
	
	  function compact(array) {
	    return _filter.call(array, function (item) {
	      return item != null;
	    });
	  }
	  function flatten(array) {
	    return array.length > 0 ? $.fn.concat.apply([], array) : array;
	  }
	  camelize = function camelize(str) {
	    return str.replace(/-+(.)?/g, function (match, chr) {
	      return chr ? chr.toUpperCase() : '';
	    });
	  };
	  function dasherize(str) {
	    return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();
	  }
	  uniq = function uniq(array) {
	    return _filter.call(array, function (item, idx) {
	      return array.indexOf(item) == idx;
	    });
	  };
	
	  function classRE(name) {
	    return name in classCache ? classCache[name] : classCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)');
	  }
	
	  function maybeAddPx(name, value) {
	    return typeof value == "number" && !cssNumber[dasherize(name)] ? value + "px" : value;
	  }
	
	  function defaultDisplay(nodeName) {
	    var element, display;
	    if (!elementDisplay[nodeName]) {
	      element = document.createElement(nodeName);
	      document.body.appendChild(element);
	      display = getComputedStyle(element, '').getPropertyValue("display");
	      element.parentNode.removeChild(element);
	      display == "none" && (display = "block");
	      elementDisplay[nodeName] = display;
	    }
	    return elementDisplay[nodeName];
	  }
	
	  function _children(element) {
	    return 'children' in element ? _slice.call(element.children) : $.map(element.childNodes, function (node) {
	      if (node.nodeType == 1) return node;
	    });
	  }
	
	  // `$.zepto.fragment` takes a html string and an optional tag name
	  // to generate DOM nodes nodes from the given html string.
	  // The generated DOM nodes are returned as an array.
	  // This function can be overriden in plugins for example to make
	  // it compatible with browsers that don't support the DOM fully.
	  zepto.fragment = function (html, name, properties) {
	    var dom, nodes, container;
	
	    // A special case optimization for a single tag
	    if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1));
	
	    if (!dom) {
	      if (html.replace) html = html.replace(tagExpanderRE, "<$1></$2>");
	      if (name === undefined) name = fragmentRE.test(html) && RegExp.$1;
	      if (!(name in containers)) name = '*';
	
	      container = containers[name];
	      container.innerHTML = '' + html;
	      dom = $.each(_slice.call(container.childNodes), function () {
	        container.removeChild(this);
	      });
	    }
	
	    if (isPlainObject(properties)) {
	      nodes = $(dom);
	      $.each(properties, function (key, value) {
	        if (methodAttributes.indexOf(key) > -1) nodes[key](value);else nodes.attr(key, value);
	      });
	    }
	
	    return dom;
	  };
	
	  // `$.zepto.Z` swaps out the prototype of the given `dom` array
	  // of nodes with `$.fn` and thus supplying all the Zepto functions
	  // to the array. Note that `__proto__` is not supported on Internet
	  // Explorer. This method can be overriden in plugins.
	  zepto.Z = function (dom, selector) {
	    dom = dom || [];
	    dom.__proto__ = $.fn;
	    dom.selector = selector || '';
	    return dom;
	  };
	
	  // `$.zepto.isZ` should return `true` if the given object is a Zepto
	  // collection. This method can be overriden in plugins.
	  zepto.isZ = function (object) {
	    return object instanceof zepto.Z;
	  };
	
	  // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and
	  // takes a CSS selector and an optional context (and handles various
	  // special cases).
	  // This method can be overriden in plugins.
	  zepto.init = function (selector, context) {
	    var dom;
	    // If nothing given, return an empty Zepto collection
	    if (!selector) return zepto.Z();
	    // Optimize for string selectors
	    else if (typeof selector == 'string') {
	        selector = selector.trim();
	        // If it's a html fragment, create nodes from it
	        // Note: In both Chrome 21 and Firefox 15, DOM error 12
	        // is thrown if the fragment doesn't begin with <
	        if (selector[0] == '<' && fragmentRE.test(selector)) dom = zepto.fragment(selector, RegExp.$1, context), selector = null;
	        // If there's a context, create a collection on that context first, and select
	        // nodes from there
	        else if (context !== undefined) return $(context).find(selector);
	          // If it's a CSS selector, use it to select nodes.
	          else dom = zepto.qsa(document, selector);
	      }
	      // If a function is given, call it when the DOM is ready
	      else if (isFunction(selector)) return $(document).ready(selector);
	        // If a Zepto collection is given, just return it
	        else if (zepto.isZ(selector)) return selector;else {
	            // normalize array if an array of nodes is given
	            if (isArray(selector)) dom = compact(selector);
	            // Wrap DOM nodes.
	            else if (isObject(selector)) dom = [selector], selector = null;
	              // If it's a html fragment, create nodes from it
	              else if (fragmentRE.test(selector)) dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null;
	                // If there's a context, create a collection on that context first, and select
	                // nodes from there
	                else if (context !== undefined) return $(context).find(selector);
	                  // And last but no least, if it's a CSS selector, use it to select nodes.
	                  else dom = zepto.qsa(document, selector);
	          }
	    // create a new Zepto collection from the nodes found
	    return zepto.Z(dom, selector);
	  };
	
	  // `$` will be the base `Zepto` object. When calling this
	  // function just call `$.zepto.init, which makes the implementation
	  // details of selecting nodes and creating Zepto collections
	  // patchable in plugins.
	  $ = function $(selector, context) {
	    return zepto.init(selector, context);
	  };
	
	  function extend(target, source, deep) {
	    for (key in source) {
	      if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
	        if (isPlainObject(source[key]) && !isPlainObject(target[key])) target[key] = {};
	        if (isArray(source[key]) && !isArray(target[key])) target[key] = [];
	        extend(target[key], source[key], deep);
	      } else if (source[key] !== undefined) target[key] = source[key];
	    }
	  }
	
	  // Copy all but undefined properties from one or more
	  // objects to the `target` object.
	  $.extend = function (target) {
	    var deep,
	        args = _slice.call(arguments, 1);
	    if (typeof target == 'boolean') {
	      deep = target;
	      target = args.shift();
	    }
	    args.forEach(function (arg) {
	      extend(target, arg, deep);
	    });
	    return target;
	  };
	
	  // `$.zepto.qsa` is Zepto's CSS selector implementation which
	  // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.
	  // This method can be overriden in plugins.
	  zepto.qsa = function (element, selector) {
	    var found,
	        maybeID = selector[0] == '#',
	        maybeClass = !maybeID && selector[0] == '.',
	        nameOnly = maybeID || maybeClass ? selector.slice(1) : selector,
	        // Ensure that a 1 char tag name still gets checked
	    isSimple = simpleSelectorRE.test(nameOnly);
	    return isDocument(element) && isSimple && maybeID ? (found = element.getElementById(nameOnly)) ? [found] : [] : element.nodeType !== 1 && element.nodeType !== 9 ? [] : _slice.call(isSimple && !maybeID ? maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class
	    element.getElementsByTagName(selector) : // Or a tag
	    element.querySelectorAll(selector) // Or it's not simple, and we need to query all
	    );
	  };
	
	  function filtered(nodes, selector) {
	    return selector == null ? $(nodes) : $(nodes).filter(selector);
	  }
	
	  $.contains = document.documentElement.contains ? function (parent, node) {
	    return parent !== node && parent.contains(node);
	  } : function (parent, node) {
	    while (node && (node = node.parentNode)) {
	      if (node === parent) return true;
	    }return false;
	  };
	
	  function funcArg(context, arg, idx, payload) {
	    return isFunction(arg) ? arg.call(context, idx, payload) : arg;
	  }
	
	  function setAttribute(node, name, value) {
	    value == null ? node.removeAttribute(name) : node.setAttribute(name, value);
	  }
	
	  // access className property while respecting SVGAnimatedString
	  function className(node, value) {
	    var klass = node.className || '',
	        svg = klass && klass.baseVal !== undefined;
	
	    if (value === undefined) return svg ? klass.baseVal : klass;
	    svg ? klass.baseVal = value : node.className = value;
	  }
	
	  // "true"  => true
	  // "false" => false
	  // "null"  => null
	  // "42"    => 42
	  // "42.5"  => 42.5
	  // "08"    => "08"
	  // JSON    => parse if valid
	  // String  => self
	  function deserializeValue(value) {
	    try {
	      return value ? value == "true" || (value == "false" ? false : value == "null" ? null : +value + "" == value ? +value : /^[\[\{]/.test(value) ? $.parseJSON(value) : value) : value;
	    } catch (e) {
	      return value;
	    }
	  }
	
	  $.type = type;
	  $.isFunction = isFunction;
	  $.isWindow = isWindow;
	  $.isArray = isArray;
	  $.isPlainObject = isPlainObject;
	
	  $.isEmptyObject = function (obj) {
	    var name;
	    for (name in obj) {
	      return false;
	    }return true;
	  };
	
	  $.inArray = function (elem, array, i) {
	    return emptyArray.indexOf.call(array, elem, i);
	  };
	
	  $.camelCase = camelize;
	  $.trim = function (str) {
	    return str == null ? "" : String.prototype.trim.call(str);
	  };
	
	  // plugin compatibility
	  $.uuid = 0;
	  $.support = {};
	  $.expr = {};
	
	  $.map = function (elements, callback) {
	    var value,
	        values = [],
	        i,
	        key;
	    if (likeArray(elements)) for (i = 0; i < elements.length; i++) {
	      value = callback(elements[i], i);
	      if (value != null) values.push(value);
	    } else for (key in elements) {
	      value = callback(elements[key], key);
	      if (value != null) values.push(value);
	    }
	    return flatten(values);
	  };
	
	  $.each = function (elements, callback) {
	    var i, key;
	    if (likeArray(elements)) {
	      for (i = 0; i < elements.length; i++) {
	        if (callback.call(elements[i], i, elements[i]) === false) return elements;
	      }
	    } else {
	      for (key in elements) {
	        if (callback.call(elements[key], key, elements[key]) === false) return elements;
	      }
	    }
	
	    return elements;
	  };
	
	  $.grep = function (elements, callback) {
	    return _filter.call(elements, callback);
	  };
	
	  if (window.JSON) $.parseJSON = JSON.parse;
	
	  // Populate the class2type map
	  $.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
	    class2type["[object " + name + "]"] = name.toLowerCase();
	  });
	
	  // Define methods that will be available on all
	  // Zepto collections
	  $.fn = {
	    // Because a collection acts like an array
	    // copy over these useful array functions.
	    forEach: emptyArray.forEach,
	    reduce: emptyArray.reduce,
	    push: emptyArray.push,
	    sort: emptyArray.sort,
	    indexOf: emptyArray.indexOf,
	    concat: emptyArray.concat,
	
	    // `map` and `slice` in the jQuery API work differently
	    // from their array counterparts
	    map: function map(fn) {
	      return $($.map(this, function (el, i) {
	        return fn.call(el, i, el);
	      }));
	    },
	    slice: function slice() {
	      return $(_slice.apply(this, arguments));
	    },
	
	    ready: function ready(callback) {
	      // need to check if document.body exists for IE as that browser reports
	      // document ready when it hasn't yet created the body element
	      if (readyRE.test(document.readyState) && document.body) callback($);else document.addEventListener('DOMContentLoaded', function () {
	        callback($);
	      }, false);
	      return this;
	    },
	    get: function get(idx) {
	      return idx === undefined ? _slice.call(this) : this[idx >= 0 ? idx : idx + this.length];
	    },
	    toArray: function toArray() {
	      return this.get();
	    },
	    size: function size() {
	      return this.length;
	    },
	    remove: function remove() {
	      return this.each(function () {
	        if (this.parentNode != null) this.parentNode.removeChild(this);
	      });
	    },
	    each: function each(callback) {
	      emptyArray.every.call(this, function (el, idx) {
	        return callback.call(el, idx, el) !== false;
	      });
	      return this;
	    },
	    filter: function filter(selector) {
	      if (isFunction(selector)) return this.not(this.not(selector));
	      return $(_filter.call(this, function (element) {
	        return zepto.matches(element, selector);
	      }));
	    },
	    add: function add(selector, context) {
	      return $(uniq(this.concat($(selector, context))));
	    },
	    is: function is(selector) {
	      return this.length > 0 && zepto.matches(this[0], selector);
	    },
	    not: function not(selector) {
	      var nodes = [];
	      if (isFunction(selector) && selector.call !== undefined) this.each(function (idx) {
	        if (!selector.call(this, idx)) nodes.push(this);
	      });else {
	        var excludes = typeof selector == 'string' ? this.filter(selector) : likeArray(selector) && isFunction(selector.item) ? _slice.call(selector) : $(selector);
	        this.forEach(function (el) {
	          if (excludes.indexOf(el) < 0) nodes.push(el);
	        });
	      }
	      return $(nodes);
	    },
	    has: function has(selector) {
	      return this.filter(function () {
	        return isObject(selector) ? $.contains(this, selector) : $(this).find(selector).size();
	      });
	    },
	    eq: function eq(idx) {
	      return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);
	    },
	    first: function first() {
	      var el = this[0];
	      return el && !isObject(el) ? el : $(el);
	    },
	    last: function last() {
	      var el = this[this.length - 1];
	      return el && !isObject(el) ? el : $(el);
	    },
	    find: function find(selector) {
	      var result,
	          $this = this;
	      if (!selector) result = $();else if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) == 'object') result = $(selector).filter(function () {
	        var node = this;
	        return emptyArray.some.call($this, function (parent) {
	          return $.contains(parent, node);
	        });
	      });else if (this.length == 1) result = $(zepto.qsa(this[0], selector));else result = this.map(function () {
	        return zepto.qsa(this, selector);
	      });
	      return result;
	    },
	    closest: function closest(selector, context) {
	      var node = this[0],
	          collection = false;
	      if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) == 'object') collection = $(selector);
	      while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector))) {
	        node = node !== context && !isDocument(node) && node.parentNode;
	      }return $(node);
	    },
	    parents: function parents(selector) {
	      var ancestors = [],
	          nodes = this;
	      while (nodes.length > 0) {
	        nodes = $.map(nodes, function (node) {
	          if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {
	            ancestors.push(node);
	            return node;
	          }
	        });
	      }return filtered(ancestors, selector);
	    },
	    parent: function parent(selector) {
	      return filtered(uniq(this.pluck('parentNode')), selector);
	    },
	    children: function children(selector) {
	      return filtered(this.map(function () {
	        return _children(this);
	      }), selector);
	    },
	    contents: function contents() {
	      return this.map(function () {
	        return _slice.call(this.childNodes);
	      });
	    },
	    siblings: function siblings(selector) {
	      return filtered(this.map(function (i, el) {
	        return _filter.call(_children(el.parentNode), function (child) {
	          return child !== el;
	        });
	      }), selector);
	    },
	    empty: function empty() {
	      return this.each(function () {
	        this.innerHTML = '';
	      });
	    },
	    // `pluck` is borrowed from Prototype.js
	    pluck: function pluck(property) {
	      return $.map(this, function (el) {
	        return el[property];
	      });
	    },
	    show: function show() {
	      return this.each(function () {
	        this.style.display == "none" && (this.style.display = '');
	        if (getComputedStyle(this, '').getPropertyValue("display") == "none") this.style.display = defaultDisplay(this.nodeName);
	      });
	    },
	    replaceWith: function replaceWith(newContent) {
	      return this.before(newContent).remove();
	    },
	    wrap: function wrap(structure) {
	      var func = isFunction(structure);
	      if (this[0] && !func) var dom = $(structure).get(0),
	          clone = dom.parentNode || this.length > 1;
	
	      return this.each(function (index) {
	        $(this).wrapAll(func ? structure.call(this, index) : clone ? dom.cloneNode(true) : dom);
	      });
	    },
	    wrapAll: function wrapAll(structure) {
	      if (this[0]) {
	        $(this[0]).before(structure = $(structure));
	        var children;
	        // drill down to the inmost element
	        while ((children = structure.children()).length) {
	          structure = children.first();
	        }$(structure).append(this);
	      }
	      return this;
	    },
	    wrapInner: function wrapInner(structure) {
	      var func = isFunction(structure);
	      return this.each(function (index) {
	        var self = $(this),
	            contents = self.contents(),
	            dom = func ? structure.call(this, index) : structure;
	        contents.length ? contents.wrapAll(dom) : self.append(dom);
	      });
	    },
	    unwrap: function unwrap() {
	      this.parent().each(function () {
	        $(this).replaceWith($(this).children());
	      });
	      return this;
	    },
	    clone: function clone() {
	      return this.map(function () {
	        return this.cloneNode(true);
	      });
	    },
	    hide: function hide() {
	      return this.css("display", "none");
	    },
	    toggle: function toggle(setting) {
	      return this.each(function () {
	        var el = $(this);(setting === undefined ? el.css("display") == "none" : setting) ? el.show() : el.hide();
	      });
	    },
	    prev: function prev(selector) {
	      return $(this.pluck('previousElementSibling')).filter(selector || '*');
	    },
	    next: function next(selector) {
	      return $(this.pluck('nextElementSibling')).filter(selector || '*');
	    },
	    html: function html(_html) {
	      return 0 in arguments ? this.each(function (idx) {
	        var originHtml = this.innerHTML;
	        $(this).empty().append(funcArg(this, _html, idx, originHtml));
	      }) : 0 in this ? this[0].innerHTML : null;
	    },
	    text: function text(_text) {
	      return 0 in arguments ? this.each(function (idx) {
	        var newText = funcArg(this, _text, idx, this.textContent);
	        this.textContent = newText == null ? '' : '' + newText;
	      }) : 0 in this ? this[0].textContent : null;
	    },
	    attr: function attr(name, value) {
	      var result;
	      return typeof name == 'string' && !(1 in arguments) ? !this.length || this[0].nodeType !== 1 ? undefined : !(result = this[0].getAttribute(name)) && name in this[0] ? this[0][name] : result : this.each(function (idx) {
	        if (this.nodeType !== 1) return;
	        if (isObject(name)) for (key in name) {
	          setAttribute(this, key, name[key]);
	        } else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)));
	      });
	    },
	    removeAttr: function removeAttr(name) {
	      return this.each(function () {
	        this.nodeType === 1 && name.split(' ').forEach(function (attribute) {
	          setAttribute(this, attribute);
	        }, this);
	      });
	    },
	    prop: function prop(name, value) {
	      name = propMap[name] || name;
	      return 1 in arguments ? this.each(function (idx) {
	        this[name] = funcArg(this, value, idx, this[name]);
	      }) : this[0] && this[0][name];
	    },
	    data: function data(name, value) {
	      var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase();
	
	      var data = 1 in arguments ? this.attr(attrName, value) : this.attr(attrName);
	
	      return data !== null ? deserializeValue(data) : undefined;
	    },
	    val: function val(value) {
	      return 0 in arguments ? this.each(function (idx) {
	        this.value = funcArg(this, value, idx, this.value);
	      }) : this[0] && (this[0].multiple ? $(this[0]).find('option').filter(function () {
	        return this.selected;
	      }).pluck('value') : this[0].value);
	    },
	    offset: function offset(coordinates) {
	      if (coordinates) return this.each(function (index) {
	        var $this = $(this),
	            coords = funcArg(this, coordinates, index, $this.offset()),
	            parentOffset = $this.offsetParent().offset(),
	            props = {
	          top: coords.top - parentOffset.top,
	          left: coords.left - parentOffset.left
	        };
	
	        if ($this.css('position') == 'static') props['position'] = 'relative';
	        $this.css(props);
	      });
	      if (!this.length) return null;
	      var obj = this[0].getBoundingClientRect();
	      return {
	        left: obj.left + window.pageXOffset,
	        top: obj.top + window.pageYOffset,
	        width: Math.round(obj.width),
	        height: Math.round(obj.height)
	      };
	    },
	    css: function css(property, value) {
	      if (arguments.length < 2) {
	        var computedStyle,
	            element = this[0];
	        if (!element) return;
	        computedStyle = getComputedStyle(element, '');
	        if (typeof property == 'string') return element.style[camelize(property)] || computedStyle.getPropertyValue(property);else if (isArray(property)) {
	          var props = {};
	          $.each(property, function (_, prop) {
	            props[prop] = element.style[camelize(prop)] || computedStyle.getPropertyValue(prop);
	          });
	          return props;
	        }
	      }
	
	      var css = '';
	      if (type(property) == 'string') {
	        if (!value && value !== 0) this.each(function () {
	          this.style.removeProperty(dasherize(property));
	        });else css = dasherize(property) + ":" + maybeAddPx(property, value);
	      } else {
	        for (key in property) {
	          if (!property[key] && property[key] !== 0) this.each(function () {
	            this.style.removeProperty(dasherize(key));
	          });else css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';';
	        }
	      }
	
	      return this.each(function () {
	        this.style.cssText += ';' + css;
	      });
	    },
	    index: function index(element) {
	      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0]);
	    },
	    hasClass: function hasClass(name) {
	      if (!name) return false;
	      return emptyArray.some.call(this, function (el) {
	        return this.test(className(el));
	      }, classRE(name));
	    },
	    addClass: function addClass(name) {
	      if (!name) return this;
	      return this.each(function (idx) {
	        if (!('className' in this)) return;
	        classList = [];
	        var cls = className(this),
	            newName = funcArg(this, name, idx, cls);
	        newName.split(/\s+/g).forEach(function (klass) {
	          if (!$(this).hasClass(klass)) classList.push(klass);
	        }, this);
	        classList.length && className(this, cls + (cls ? " " : "") + classList.join(" "));
	      });
	    },
	    removeClass: function removeClass(name) {
	      return this.each(function (idx) {
	        if (!('className' in this)) return;
	        if (name === undefined) return className(this, '');
	        classList = className(this);
	        funcArg(this, name, idx, classList).split(/\s+/g).forEach(function (klass) {
	          classList = classList.replace(classRE(klass), " ");
	        });
	        className(this, classList.trim());
	      });
	    },
	    toggleClass: function toggleClass(name, when) {
	      if (!name) return this;
	      return this.each(function (idx) {
	        var $this = $(this),
	            names = funcArg(this, name, idx, className(this));
	        names.split(/\s+/g).forEach(function (klass) {
	          (when === undefined ? !$this.hasClass(klass) : when) ? $this.addClass(klass) : $this.removeClass(klass);
	        });
	      });
	    },
	    scrollTop: function scrollTop(value) {
	      if (!this.length) return;
	      var hasScrollTop = 'scrollTop' in this[0];
	      if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset;
	      return this.each(hasScrollTop ? function () {
	        this.scrollTop = value;
	      } : function () {
	        this.scrollTo(this.scrollX, value);
	      });
	    },
	    scrollLeft: function scrollLeft(value) {
	      if (!this.length) return;
	      var hasScrollLeft = 'scrollLeft' in this[0];
	      if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset;
	      return this.each(hasScrollLeft ? function () {
	        this.scrollLeft = value;
	      } : function () {
	        this.scrollTo(value, this.scrollY);
	      });
	    },
	    position: function position() {
	      if (!this.length) return;
	
	      var elem = this[0],
	
	      // Get *real* offsetParent
	      offsetParent = this.offsetParent(),
	
	      // Get correct offsets
	      offset = this.offset(),
	          parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();
	
	      // Subtract element margins
	      // note: when an element has margin: auto the offsetLeft and marginLeft
	      // are the same in Safari causing offset.left to incorrectly be 0
	      offset.top -= parseFloat($(elem).css('margin-top')) || 0;
	      offset.left -= parseFloat($(elem).css('margin-left')) || 0;
	
	      // Add offsetParent borders
	      parentOffset.top += parseFloat($(offsetParent[0]).css('border-top-width')) || 0;
	      parentOffset.left += parseFloat($(offsetParent[0]).css('border-left-width')) || 0;
	
	      // Subtract the two offsets
	      return {
	        top: offset.top - parentOffset.top,
	        left: offset.left - parentOffset.left
	      };
	    },
	    offsetParent: function offsetParent() {
	      return this.map(function () {
	        var parent = this.offsetParent || document.body;
	        while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css("position") == "static") {
	          parent = parent.offsetParent;
	        }return parent;
	      });
	    }
	  };
	
	  // for now
	  $.fn.detach = $.fn.remove
	
	  // Generate the `width` and `height` functions
	  ;['width', 'height'].forEach(function (dimension) {
	    var dimensionProperty = dimension.replace(/./, function (m) {
	      return m[0].toUpperCase();
	    });
	
	    $.fn[dimension] = function (value) {
	      var offset,
	          el = this[0];
	      if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] : isDocument(el) ? el.documentElement['scroll' + dimensionProperty] : (offset = this.offset()) && offset[dimension];else return this.each(function (idx) {
	        el = $(this);
	        el.css(dimension, funcArg(this, value, idx, el[dimension]()));
	      });
	    };
	  });
	
	  function traverseNode(node, fun) {
	    fun(node);
	    for (var i = 0, len = node.childNodes.length; i < len; i++) {
	      traverseNode(node.childNodes[i], fun);
	    }
	  }
	
	  // Generate the `after`, `prepend`, `before`, `append`,
	  // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.
	  adjacencyOperators.forEach(function (operator, operatorIndex) {
	    var inside = operatorIndex % 2; //=> prepend, append
	
	    $.fn[operator] = function () {
	      // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings
	      var argType,
	          nodes = $.map(arguments, function (arg) {
	        argType = type(arg);
	        return argType == "object" || argType == "array" || arg == null ? arg : zepto.fragment(arg);
	      }),
	          parent,
	          copyByClone = this.length > 1;
	      if (nodes.length < 1) return this;
	
	      return this.each(function (_, target) {
	        parent = inside ? target : target.parentNode;
	
	        // convert all methods to a "before" operation
	        target = operatorIndex == 0 ? target.nextSibling : operatorIndex == 1 ? target.firstChild : operatorIndex == 2 ? target : null;
	
	        var parentInDocument = $.contains(document.documentElement, parent);
	
	        nodes.forEach(function (node) {
	          if (copyByClone) node = node.cloneNode(true);else if (!parent) return $(node).remove();
	
	          parent.insertBefore(node, target);
	          if (parentInDocument) traverseNode(node, function (el) {
	            if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' && (!el.type || el.type === 'text/javascript') && !el.src) window['eval'].call(window, el.innerHTML);
	          });
	        });
	      });
	    };
	
	    // after    => insertAfter
	    // prepend  => prependTo
	    // before   => insertBefore
	    // append   => appendTo
	    $.fn[inside ? operator + 'To' : 'insert' + (operatorIndex ? 'Before' : 'After')] = function (html) {
	      $(html)[operator](this);
	      return this;
	    };
	  });
	
	  zepto.Z.prototype = $.fn;
	
	  // Export internal API functions in the `$.zepto` namespace
	  zepto.uniq = uniq;
	  zepto.deserializeValue = deserializeValue;
	  $.zepto = zepto;
	
	  return $;
	}();
	
	window.Zepto = Zepto;
	window.$ === undefined && (window.$ = Zepto);(function ($) {
	  var _zid = 1,
	      undefined,
	      slice = Array.prototype.slice,
	      isFunction = $.isFunction,
	      isString = function isString(obj) {
	    return typeof obj == 'string';
	  },
	      handlers = {},
	      specialEvents = {},
	      focusinSupported = 'onfocusin' in window,
	      focus = { focus: 'focusin', blur: 'focusout' },
	      hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' };
	
	  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents';
	
	  function zid(element) {
	    return element._zid || (element._zid = _zid++);
	  }
	  function findHandlers(element, event, fn, selector) {
	    event = parse(event);
	    if (event.ns) var matcher = matcherFor(event.ns);
	    return (handlers[zid(element)] || []).filter(function (handler) {
	      return handler && (!event.e || handler.e == event.e) && (!event.ns || matcher.test(handler.ns)) && (!fn || zid(handler.fn) === zid(fn)) && (!selector || handler.sel == selector);
	    });
	  }
	  function parse(event) {
	    var parts = ('' + event).split('.');
	    return { e: parts[0], ns: parts.slice(1).sort().join(' ') };
	  }
	  function matcherFor(ns) {
	    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)');
	  }
	
	  function eventCapture(handler, captureSetting) {
	    return handler.del && !focusinSupported && handler.e in focus || !!captureSetting;
	  }
	
	  function realEvent(type) {
	    return hover[type] || focusinSupported && focus[type] || type;
	  }
	
	  function add(element, events, fn, data, selector, delegator, capture) {
	    var id = zid(element),
	        set = handlers[id] || (handlers[id] = []);
	    events.split(/\s/).forEach(function (event) {
	      if (event == 'ready') return $(document).ready(fn);
	      var handler = parse(event);
	      handler.fn = fn;
	      handler.sel = selector;
	      // emulate mouseenter, mouseleave
	      if (handler.e in hover) fn = function fn(e) {
	        var related = e.relatedTarget;
	        if (!related || related !== this && !$.contains(this, related)) return handler.fn.apply(this, arguments);
	      };
	      handler.del = delegator;
	      var callback = delegator || fn;
	      handler.proxy = function (e) {
	        e = compatible(e);
	        if (e.isImmediatePropagationStopped()) return;
	        e.data = data;
	        var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args));
	        if (result === false) e.preventDefault(), e.stopPropagation();
	        return result;
	      };
	      handler.i = set.length;
	      set.push(handler);
	      if ('addEventListener' in element) element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
	    });
	  }
	  function remove(element, events, fn, selector, capture) {
	    var id = zid(element);(events || '').split(/\s/).forEach(function (event) {
	      findHandlers(element, event, fn, selector).forEach(function (handler) {
	        delete handlers[id][handler.i];
	        if ('removeEventListener' in element) element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
	      });
	    });
	  }
	
	  $.event = { add: add, remove: remove };
	
	  $.proxy = function (fn, context) {
	    var args = 2 in arguments && slice.call(arguments, 2);
	    if (isFunction(fn)) {
	      var proxyFn = function proxyFn() {
	        return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);
	      };
	      proxyFn._zid = zid(fn);
	      return proxyFn;
	    } else if (isString(context)) {
	      if (args) {
	        args.unshift(fn[context], fn);
	        return $.proxy.apply(null, args);
	      } else {
	        return $.proxy(fn[context], fn);
	      }
	    } else {
	      throw new TypeError("expected function");
	    }
	  };
	
	  $.fn.bind = function (event, data, callback) {
	    return this.on(event, data, callback);
	  };
	  $.fn.unbind = function (event, callback) {
	    return this.off(event, callback);
	  };
	  $.fn.one = function (event, selector, data, callback) {
	    return this.on(event, selector, data, callback, 1);
	  };
	
	  var returnTrue = function returnTrue() {
	    return true;
	  },
	      returnFalse = function returnFalse() {
	    return false;
	  },
	      ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,
	      eventMethods = {
	    preventDefault: 'isDefaultPrevented',
	    stopImmediatePropagation: 'isImmediatePropagationStopped',
	    stopPropagation: 'isPropagationStopped'
	  };
	
	  function compatible(event, source) {
	    if (source || !event.isDefaultPrevented) {
	      source || (source = event);
	
	      $.each(eventMethods, function (name, predicate) {
	        var sourceMethod = source[name];
	        event[name] = function () {
	          this[predicate] = returnTrue;
	          return sourceMethod && sourceMethod.apply(source, arguments);
	        };
	        event[predicate] = returnFalse;
	      });
	
	      if (source.defaultPrevented !== undefined ? source.defaultPrevented : 'returnValue' in source ? source.returnValue === false : source.getPreventDefault && source.getPreventDefault()) event.isDefaultPrevented = returnTrue;
	    }
	    return event;
	  }
	
	  function createProxy(event) {
	    var key,
	        proxy = { originalEvent: event };
	    for (key in event) {
	      if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key];
	    }return compatible(proxy, event);
	  }
	
	  $.fn.delegate = function (selector, event, callback) {
	    return this.on(event, selector, callback);
	  };
	  $.fn.undelegate = function (selector, event, callback) {
	    return this.off(event, selector, callback);
	  };
	
	  $.fn.live = function (event, callback) {
	    $(document.body).delegate(this.selector, event, callback);
	    return this;
	  };
	  $.fn.die = function (event, callback) {
	    $(document.body).undelegate(this.selector, event, callback);
	    return this;
	  };
	
	  $.fn.on = function (event, selector, data, callback, one) {
	    var autoRemove,
	        delegator,
	        $this = this;
	    if (event && !isString(event)) {
	      $.each(event, function (type, fn) {
	        $this.on(type, selector, data, fn, one);
	      });
	      return $this;
	    }
	
	    if (!isString(selector) && !isFunction(callback) && callback !== false) callback = data, data = selector, selector = undefined;
	    if (isFunction(data) || data === false) callback = data, data = undefined;
	
	    if (callback === false) callback = returnFalse;
	
	    return $this.each(function (_, element) {
	      if (one) autoRemove = function autoRemove(e) {
	        remove(element, e.type, callback);
	        return callback.apply(this, arguments);
	      };
	
	      if (selector) delegator = function delegator(e) {
	        var evt,
	            match = $(e.target).closest(selector, element).get(0);
	        if (match && match !== element) {
	          evt = $.extend(createProxy(e), { currentTarget: match, liveFired: element });
	          return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)));
	        }
	      };
	
	      add(element, event, callback, data, selector, delegator || autoRemove);
	    });
	  };
	  $.fn.off = function (event, selector, callback) {
	    var $this = this;
	    if (event && !isString(event)) {
	      $.each(event, function (type, fn) {
	        $this.off(type, selector, fn);
	      });
	      return $this;
	    }
	
	    if (!isString(selector) && !isFunction(callback) && callback !== false) callback = selector, selector = undefined;
	
	    if (callback === false) callback = returnFalse;
	
	    return $this.each(function () {
	      remove(this, event, callback, selector);
	    });
	  };
	
	  $.fn.trigger = function (event, args) {
	    event = isString(event) || $.isPlainObject(event) ? $.Event(event) : compatible(event);
	    event._args = args;
	    return this.each(function () {
	      // handle focus(), blur() by calling them directly
	      if (event.type in focus && typeof this[event.type] == "function") this[event.type]();
	      // items in the collection might not be DOM elements
	      else if ('dispatchEvent' in this) this.dispatchEvent(event);else $(this).triggerHandler(event, args);
	    });
	  };
	
	  // triggers event handlers on current element just as if an event occurred,
	  // doesn't trigger an actual event, doesn't bubble
	  $.fn.triggerHandler = function (event, args) {
	    var e, result;
	    this.each(function (i, element) {
	      e = createProxy(isString(event) ? $.Event(event) : event);
	      e._args = args;
	      e.target = element;
	      $.each(findHandlers(element, event.type || event), function (i, handler) {
	        result = handler.proxy(e);
	        if (e.isImmediatePropagationStopped()) return false;
	      });
	    });
	    return result;
	  }
	
	  // shortcut methods for `.bind(event, fn)` for each event type
	  ;('focusin focusout focus blur load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select keydown keypress keyup error').split(' ').forEach(function (event) {
	    $.fn[event] = function (callback) {
	      return 0 in arguments ? this.bind(event, callback) : this.trigger(event);
	    };
	  });
	
	  $.Event = function (type, props) {
	    if (!isString(type)) props = type, type = props.type;
	    var event = document.createEvent(specialEvents[type] || 'Events'),
	        bubbles = true;
	    if (props) for (var name in props) {
	      name == 'bubbles' ? bubbles = !!props[name] : event[name] = props[name];
	    }event.initEvent(type, bubbles, true);
	    return compatible(event);
	  };
	})(Zepto);(function ($) {
	  var jsonpID = 0,
	      document = window.document,
	      key,
	      name,
	      rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	      scriptTypeRE = /^(?:text|application)\/javascript/i,
	      xmlTypeRE = /^(?:text|application)\/xml/i,
	      jsonType = 'application/json',
	      htmlType = 'text/html',
	      blankRE = /^\s*$/,
	      originAnchor = document.createElement('a');
	
	  originAnchor.href = window.location.href;
	
	  // trigger a custom event and return false if it was cancelled
	  function triggerAndReturn(context, eventName, data) {
	    var event = $.Event(eventName);
	    $(context).trigger(event, data);
	    return !event.isDefaultPrevented();
	  }
	
	  // trigger an Ajax "global" event
	  function triggerGlobal(settings, context, eventName, data) {
	    if (settings.global) return triggerAndReturn(context || document, eventName, data);
	  }
	
	  // Number of active Ajax requests
	  $.active = 0;
	
	  function ajaxStart(settings) {
	    if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart');
	  }
	  function ajaxStop(settings) {
	    if (settings.global && ! --$.active) triggerGlobal(settings, null, 'ajaxStop');
	  }
	
	  // triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable
	  function ajaxBeforeSend(xhr, settings) {
	    var context = settings.context;
	    if (settings.beforeSend.call(context, xhr, settings) === false || triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false) return false;
	
	    triggerGlobal(settings, context, 'ajaxSend', [xhr, settings]);
	  }
	  function ajaxSuccess(data, xhr, settings, deferred) {
	    var context = settings.context,
	        status = 'success';
	    settings.success.call(context, data, status, xhr);
	    if (deferred) deferred.resolveWith(context, [data, status, xhr]);
	    triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data]);
	    ajaxComplete(status, xhr, settings);
	  }
	  // type: "timeout", "error", "abort", "parsererror"
	  function ajaxError(error, type, xhr, settings, deferred) {
	    var context = settings.context;
	    settings.error.call(context, xhr, type, error);
	    if (deferred) deferred.rejectWith(context, [xhr, type, error]);
	    triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type]);
	    ajaxComplete(type, xhr, settings);
	  }
	  // status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
	  function ajaxComplete(status, xhr, settings) {
	    var context = settings.context;
	    settings.complete.call(context, xhr, status);
	    triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings]);
	    ajaxStop(settings);
	  }
	
	  // Empty function, used as default callback
	  function empty() {}
	
	  $.ajaxJSONP = function (options, deferred) {
	    if (!('type' in options)) return $.ajax(options);
	
	    var _callbackName = options.jsonpCallback,
	        callbackName = ($.isFunction(_callbackName) ? _callbackName() : _callbackName) || 'jsonp' + ++jsonpID,
	        script = document.createElement('script'),
	        originalCallback = window[callbackName],
	        responseData,
	        abort = function abort(errorType) {
	      $(script).triggerHandler('error', errorType || 'abort');
	    },
	        xhr = { abort: abort },
	        abortTimeout;
	
	    if (deferred) deferred.promise(xhr);
	
	    $(script).on('load error', function (e, errorType) {
	      clearTimeout(abortTimeout);
	      $(script).off().remove();
	
	      if (e.type == 'error' || !responseData) {
	        ajaxError(null, errorType || 'error', xhr, options, deferred);
	      } else {
	        ajaxSuccess(responseData[0], xhr, options, deferred);
	      }
	
	      window[callbackName] = originalCallback;
	      if (responseData && $.isFunction(originalCallback)) originalCallback(responseData[0]);
	
	      originalCallback = responseData = undefined;
	    });
	
	    if (ajaxBeforeSend(xhr, options) === false) {
	      abort('abort');
	      return xhr;
	    }
	
	    window[callbackName] = function () {
	      responseData = arguments;
	    };
	
	    script.src = options.url.replace(/\?(.+)=\?/, '?$1=' + callbackName);
	    document.head.appendChild(script);
	
	    if (options.timeout > 0) abortTimeout = setTimeout(function () {
	      abort('timeout');
	    }, options.timeout);
	
	    return xhr;
	  };
	
	  $.ajaxSettings = {
	    // Default type of request
	    type: 'GET',
	    // Callback that is executed before request
	    beforeSend: empty,
	    // Callback that is executed if the request succeeds
	    success: empty,
	    // Callback that is executed the the server drops error
	    error: empty,
	    // Callback that is executed on request complete (both: error and success)
	    complete: empty,
	    // The context for the callbacks
	    context: null,
	    // Whether to trigger "global" Ajax events
	    global: true,
	    // Transport
	    xhr: function xhr() {
	      return new window.XMLHttpRequest();
	    },
	    // MIME types mapping
	    // IIS returns Javascript as "application/x-javascript"
	    accepts: {
	      script: 'text/javascript, application/javascript, application/x-javascript',
	      json: jsonType,
	      xml: 'application/xml, text/xml',
	      html: htmlType,
	      text: 'text/plain'
	    },
	    // Whether the request is to another domain
	    crossDomain: false,
	    // Default timeout
	    timeout: 0,
	    // Whether data should be serialized to string
	    processData: true,
	    // Whether the browser should be allowed to cache GET responses
	    cache: true
	  };
	
	  function mimeToDataType(mime) {
	    if (mime) mime = mime.split(';', 2)[0];
	    return mime && (mime == htmlType ? 'html' : mime == jsonType ? 'json' : scriptTypeRE.test(mime) ? 'script' : xmlTypeRE.test(mime) && 'xml') || 'text';
	  }
	
	  function appendQuery(url, query) {
	    if (query == '') return url;
	    return (url + '&' + query).replace(/[&?]{1,2}/, '?');
	  }
	
	  // serialize payload and append it to the URL for GET requests
	  function serializeData(options) {
	    if (options.processData && options.data && $.type(options.data) != "string") options.data = $.param(options.data, options.traditional);
	    if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) options.url = appendQuery(options.url, options.data), options.data = undefined;
	  }
	
	  $.ajax = function (options) {
	    var settings = $.extend({}, options || {}),
	        deferred = $.Deferred && $.Deferred(),
	        urlAnchor;
	    for (key in $.ajaxSettings) {
	      if (settings[key] === undefined) settings[key] = $.ajaxSettings[key];
	    }ajaxStart(settings);
	
	    if (!settings.crossDomain) {
	      urlAnchor = document.createElement('a');
	      urlAnchor.href = settings.url;
	      urlAnchor.href = urlAnchor.href;
	      settings.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host;
	    }
	
	    if (!settings.url) settings.url = window.location.toString();
	    serializeData(settings);
	
	    var dataType = settings.dataType,
	        hasPlaceholder = /\?.+=\?/.test(settings.url);
	    if (hasPlaceholder) dataType = 'jsonp';
	
	    if (settings.cache === false || (!options || options.cache !== true) && ('script' == dataType || 'jsonp' == dataType)) settings.url = appendQuery(settings.url, '_=' + Date.now());
	
	    if ('jsonp' == dataType) {
	      if (!hasPlaceholder) settings.url = appendQuery(settings.url, settings.jsonp ? settings.jsonp + '=?' : settings.jsonp === false ? '' : 'callback=?');
	      return $.ajaxJSONP(settings, deferred);
	    }
	
	    var mime = settings.accepts[dataType],
	        headers = {},
	        setHeader = function setHeader(name, value) {
	      headers[name.toLowerCase()] = [name, value];
	    },
	        protocol = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol,
	        xhr = settings.xhr(),
	        nativeSetHeader = xhr.setRequestHeader,
	        abortTimeout;
	
	    if (deferred) deferred.promise(xhr);
	
	    if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest');
	    setHeader('Accept', mime || '*/*');
	    if (mime = settings.mimeType || mime) {
	      if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0];
	      xhr.overrideMimeType && xhr.overrideMimeType(mime);
	    }
	    if (settings.contentType || settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET') setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded');
	
	    if (settings.headers) for (name in settings.headers) {
	      setHeader(name, settings.headers[name]);
	    }xhr.setRequestHeader = setHeader;
	
	    xhr.onreadystatechange = function () {
	      if (xhr.readyState == 4) {
	        xhr.onreadystatechange = empty;
	        clearTimeout(abortTimeout);
	        var result,
	            error = false;
	        if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304 || xhr.status == 0 && protocol == 'file:') {
	          dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'));
	          result = xhr.responseText;
	
	          try {
	            // http://perfectionkills.com/global-eval-what-are-the-options/
	            if (dataType == 'script') (1, eval)(result);else if (dataType == 'xml') result = xhr.responseXML;else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result);
	          } catch (e) {
	            error = e;
	          }
	
	          if (error) ajaxError(error, 'parsererror', xhr, settings, deferred);else ajaxSuccess(result, xhr, settings, deferred);
	        } else {
	          ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred);
	        }
	      }
	    };
	
	    if (ajaxBeforeSend(xhr, settings) === false) {
	      xhr.abort();
	      ajaxError(null, 'abort', xhr, settings, deferred);
	      return xhr;
	    }
	
	    if (settings.xhrFields) for (name in settings.xhrFields) {
	      xhr[name] = settings.xhrFields[name];
	    }var async = 'async' in settings ? settings.async : true;
	    xhr.open(settings.type, settings.url, async, settings.username, settings.password);
	
	    for (name in headers) {
	      nativeSetHeader.apply(xhr, headers[name]);
	    }if (settings.timeout > 0) abortTimeout = setTimeout(function () {
	      xhr.onreadystatechange = empty;
	      xhr.abort();
	      ajaxError(null, 'timeout', xhr, settings, deferred);
	    }, settings.timeout);
	
	    // avoid sending empty string (#319)
	    xhr.send(settings.data ? settings.data : null);
	    return xhr;
	  };
	
	  // handle optional data/success arguments
	  function parseArguments(url, data, success, dataType) {
	    if ($.isFunction(data)) dataType = success, success = data, data = undefined;
	    if (!$.isFunction(success)) dataType = success, success = undefined;
	    return {
	      url: url,
	      data: data,
	      success: success,
	      dataType: dataType
	    };
	  }
	
	  $.get = function () /* url, data, success, dataType */{
	    return $.ajax(parseArguments.apply(null, arguments));
	  };
	
	  $.post = function () /* url, data, success, dataType */{
	    var options = parseArguments.apply(null, arguments);
	    options.type = 'POST';
	    return $.ajax(options);
	  };
	
	  $.getJSON = function () /* url, data, success */{
	    var options = parseArguments.apply(null, arguments);
	    options.dataType = 'json';
	    return $.ajax(options);
	  };
	
	  $.fn.load = function (url, data, success) {
	    if (!this.length) return this;
	    var self = this,
	        parts = url.split(/\s/),
	        selector,
	        options = parseArguments(url, data, success),
	        callback = options.success;
	    if (parts.length > 1) options.url = parts[0], selector = parts[1];
	    options.success = function (response) {
	      self.html(selector ? $('<div>').html(response.replace(rscript, "")).find(selector) : response);
	      callback && callback.apply(self, arguments);
	    };
	    $.ajax(options);
	    return this;
	  };
	
	  var escape = encodeURIComponent;
	
	  function serialize(params, obj, traditional, scope) {
	    var type,
	        array = $.isArray(obj),
	        hash = $.isPlainObject(obj);
	    $.each(obj, function (key, value) {
	      type = $.type(value);
	      if (scope) key = traditional ? scope : scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']';
	      // handle data in serializeArray() format
	      if (!scope && array) params.add(value.name, value.value);
	      // recurse into nested objects
	      else if (type == "array" || !traditional && type == "object") serialize(params, value, traditional, key);else params.add(key, value);
	    });
	  }
	
	  $.param = function (obj, traditional) {
	    var params = [];
	    params.add = function (key, value) {
	      if ($.isFunction(value)) value = value();
	      if (value == null) value = "";
	      this.push(escape(key) + '=' + escape(value));
	    };
	    serialize(params, obj, traditional);
	    return params.join('&').replace(/%20/g, '+');
	  };
	})(Zepto);(function ($) {
	  $.fn.serializeArray = function () {
	    var name,
	        type,
	        result = [],
	        add = function add(value) {
	      if (value.forEach) return value.forEach(add);
	      result.push({ name: name, value: value });
	    };
	    if (this[0]) $.each(this[0].elements, function (_, field) {
	      type = field.type, name = field.name;
	      if (name && field.nodeName.toLowerCase() != 'fieldset' && !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' && (type != 'radio' && type != 'checkbox' || field.checked)) add($(field).val());
	    });
	    return result;
	  };
	
	  $.fn.serialize = function () {
	    var result = [];
	    this.serializeArray().forEach(function (elm) {
	      result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value));
	    });
	    return result.join('&');
	  };
	
	  $.fn.submit = function (callback) {
	    if (0 in arguments) this.bind('submit', callback);else if (this.length) {
	      var event = $.Event('submit');
	      this.eq(0).trigger(event);
	      if (!event.isDefaultPrevented()) this.get(0).submit();
	    }
	    return this;
	  };
	})(Zepto);(function ($) {
	  // __proto__ doesn't exist on IE<11, so redefine
	  // the Z function to use object extension instead
	  if (!('__proto__' in {})) {
	    $.extend($.zepto, {
	      Z: function Z(dom, selector) {
	        dom = dom || [];
	        $.extend(dom, $.fn);
	        dom.selector = selector || '';
	        dom.__Z = true;
	        return dom;
	      },
	      // this is a kludge but works
	      isZ: function isZ(object) {
	        return $.type(object) === 'array' && '__Z' in object;
	      }
	    });
	  }
	
	  // getComputedStyle shouldn't freak out when called
	  // without a valid element as argument
	  try {
	    getComputedStyle(undefined);
	  } catch (e) {
	    var nativeGetComputedStyle = getComputedStyle;
	    window.getComputedStyle = function (element) {
	      try {
	        return nativeGetComputedStyle(element);
	      } catch (e) {
	        return null;
	      }
	    };
	  }
	})(Zepto);

/***/ },
/* 2 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+aspnet+bash+c+csharp+cpp+ruby+css-extras+git+go+java+json+less+markdown+perl+php+php-extras+python+jsx+scss+sql+swift&plugins=line-numbers */
	var _self = "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {},
	    Prism = function () {
	  var e = /\blang(?:uage)?-(\w+)\b/i,
	      t = 0,
	      n = _self.Prism = { util: { encode: function encode(e) {
	        return e instanceof a ? new a(e.type, n.util.encode(e.content), e.alias) : "Array" === n.util.type(e) ? e.map(n.util.encode) : e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
	      }, type: function type(e) {
	        return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1];
	      }, objId: function objId(e) {
	        return e.__id || Object.defineProperty(e, "__id", { value: ++t }), e.__id;
	      }, clone: function clone(e) {
	        var t = n.util.type(e);switch (t) {case "Object":
	            var a = {};for (var r in e) {
	              e.hasOwnProperty(r) && (a[r] = n.util.clone(e[r]));
	            }return a;case "Array":
	            return e.map && e.map(function (e) {
	              return n.util.clone(e);
	            });}return e;
	      } }, languages: { extend: function extend(e, t) {
	        var a = n.util.clone(n.languages[e]);for (var r in t) {
	          a[r] = t[r];
	        }return a;
	      }, insertBefore: function insertBefore(e, t, a, r) {
	        r = r || n.languages;var l = r[e];if (2 == arguments.length) {
	          a = arguments[1];for (var i in a) {
	            a.hasOwnProperty(i) && (l[i] = a[i]);
	          }return l;
	        }var o = {};for (var s in l) {
	          if (l.hasOwnProperty(s)) {
	            if (s == t) for (var i in a) {
	              a.hasOwnProperty(i) && (o[i] = a[i]);
	            }o[s] = l[s];
	          }
	        }return n.languages.DFS(n.languages, function (t, n) {
	          n === r[e] && t != e && (this[t] = o);
	        }), r[e] = o;
	      }, DFS: function DFS(e, t, a, r) {
	        r = r || {};for (var l in e) {
	          e.hasOwnProperty(l) && (t.call(e, l, e[l], a || l), "Object" !== n.util.type(e[l]) || r[n.util.objId(e[l])] ? "Array" !== n.util.type(e[l]) || r[n.util.objId(e[l])] || (r[n.util.objId(e[l])] = !0, n.languages.DFS(e[l], t, l, r)) : (r[n.util.objId(e[l])] = !0, n.languages.DFS(e[l], t, null, r)));
	        }
	      } }, plugins: {}, highlightAll: function highlightAll(e, t) {
	      var a = { callback: t, selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code' };n.hooks.run("before-highlightall", a);for (var r, l = a.elements || document.querySelectorAll(a.selector), i = 0; r = l[i++];) {
	        n.highlightElement(r, e === !0, a.callback);
	      }
	    }, highlightElement: function highlightElement(t, a, r) {
	      for (var l, i, o = t; o && !e.test(o.className);) {
	        o = o.parentNode;
	      }o && (l = (o.className.match(e) || [, ""])[1].toLowerCase(), i = n.languages[l]), t.className = t.className.replace(e, "").replace(/\s+/g, " ") + " language-" + l, o = t.parentNode, /pre/i.test(o.nodeName) && (o.className = o.className.replace(e, "").replace(/\s+/g, " ") + " language-" + l);var s = t.textContent,
	          u = { element: t, language: l, grammar: i, code: s };if (n.hooks.run("before-sanity-check", u), !u.code || !u.grammar) return n.hooks.run("complete", u), void 0;if (n.hooks.run("before-highlight", u), a && _self.Worker) {
	        var c = new Worker(n.filename);c.onmessage = function (e) {
	          u.highlightedCode = e.data, n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(u.element), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
	        }, c.postMessage(JSON.stringify({ language: u.language, code: u.code, immediateClose: !0 }));
	      } else u.highlightedCode = n.highlight(u.code, u.grammar, u.language), n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(t), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
	    }, highlight: function highlight(e, t, r) {
	      var l = n.tokenize(e, t);return a.stringify(n.util.encode(l), r);
	    }, tokenize: function tokenize(e, t) {
	      var a = n.Token,
	          r = [e],
	          l = t.rest;if (l) {
	        for (var i in l) {
	          t[i] = l[i];
	        }delete t.rest;
	      }e: for (var i in t) {
	        if (t.hasOwnProperty(i) && t[i]) {
	          var o = t[i];o = "Array" === n.util.type(o) ? o : [o];for (var s = 0; s < o.length; ++s) {
	            var u = o[s],
	                c = u.inside,
	                g = !!u.lookbehind,
	                h = !!u.greedy,
	                f = 0,
	                d = u.alias;u = u.pattern || u;for (var p = 0; p < r.length; p++) {
	              var m = r[p];if (r.length > e.length) break e;if (!(m instanceof a)) {
	                u.lastIndex = 0;var y = u.exec(m),
	                    v = 1;if (!y && h && p != r.length - 1) {
	                  var b = r[p + 1].matchedStr || r[p + 1],
	                      k = m + b;if (p < r.length - 2 && (k += r[p + 2].matchedStr || r[p + 2]), u.lastIndex = 0, y = u.exec(k), !y) continue;var w = y.index + (g ? y[1].length : 0);if (w >= m.length) continue;var _ = y.index + y[0].length,
	                      P = m.length + b.length;if (v = 3, P >= _) {
	                    if (r[p + 1].greedy) continue;v = 2, k = k.slice(0, P);
	                  }m = k;
	                }if (y) {
	                  g && (f = y[1].length);var w = y.index + f,
	                      y = y[0].slice(f),
	                      _ = w + y.length,
	                      S = m.slice(0, w),
	                      O = m.slice(_),
	                      j = [p, v];S && j.push(S);var A = new a(i, c ? n.tokenize(y, c) : y, d, y, h);j.push(A), O && j.push(O), Array.prototype.splice.apply(r, j);
	                }
	              }
	            }
	          }
	        }
	      }return r;
	    }, hooks: { all: {}, add: function add(e, t) {
	        var a = n.hooks.all;a[e] = a[e] || [], a[e].push(t);
	      }, run: function run(e, t) {
	        var a = n.hooks.all[e];if (a && a.length) for (var r, l = 0; r = a[l++];) {
	          r(t);
	        }
	      } } },
	      a = n.Token = function (e, t, n, a, r) {
	    this.type = e, this.content = t, this.alias = n, this.matchedStr = a || null, this.greedy = !!r;
	  };if (a.stringify = function (e, t, r) {
	    if ("string" == typeof e) return e;if ("Array" === n.util.type(e)) return e.map(function (n) {
	      return a.stringify(n, t, e);
	    }).join("");var l = { type: e.type, content: a.stringify(e.content, t, r), tag: "span", classes: ["token", e.type], attributes: {}, language: t, parent: r };if ("comment" == l.type && (l.attributes.spellcheck = "true"), e.alias) {
	      var i = "Array" === n.util.type(e.alias) ? e.alias : [e.alias];Array.prototype.push.apply(l.classes, i);
	    }n.hooks.run("wrap", l);var o = "";for (var s in l.attributes) {
	      o += (o ? " " : "") + s + '="' + (l.attributes[s] || "") + '"';
	    }return "<" + l.tag + ' class="' + l.classes.join(" ") + '" ' + o + ">" + l.content + "</" + l.tag + ">";
	  }, !_self.document) return _self.addEventListener ? (_self.addEventListener("message", function (e) {
	    var t = JSON.parse(e.data),
	        a = t.language,
	        r = t.code,
	        l = t.immediateClose;_self.postMessage(n.highlight(r, n.languages[a], a)), l && _self.close();
	  }, !1), _self.Prism) : _self.Prism;var r = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();return r && (n.filename = r.src, document.addEventListener && !r.hasAttribute("data-manual") && document.addEventListener("DOMContentLoaded", n.highlightAll)), _self.Prism;
	}();"undefined" != typeof module && module.exports && (module.exports = Prism), "undefined" != typeof global && (global.Prism = Prism);
	Prism.languages.markup = { comment: /<!--[\w\W]*?-->/, prolog: /<\?[\w\W]+?\?>/, doctype: /<!DOCTYPE[\w\W]+?>/, cdata: /<!\[CDATA\[[\w\W]*?]]>/i, tag: { pattern: /<\/?(?!\d)[^\s>\/=.$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, inside: { tag: { pattern: /^<\/?[^\s>\/]+/i, inside: { punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/ } }, "attr-value": { pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i, inside: { punctuation: /[=>"']/ } }, punctuation: /\/?>/, "attr-name": { pattern: /[^\s>\/]+/, inside: { namespace: /^[^\s>\/:]+:/ } } } }, entity: /&#?[\da-z]{1,8};/i }, Prism.hooks.add("wrap", function (a) {
	  "entity" === a.type && (a.attributes.title = a.content.replace(/&amp;/, "&"));
	}), Prism.languages.xml = Prism.languages.markup, Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup;
	Prism.languages.css = { comment: /\/\*[\w\W]*?\*\//, atrule: { pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i, inside: { rule: /@[\w-]+/ } }, url: /url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i, selector: /[^\{\}\s][^\{\};]*?(?=\s*\{)/, string: /("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/, property: /(\b|\B)[\w-]+(?=\s*:)/i, important: /\B!important\b/i, "function": /[-a-z0-9]+(?=\()/i, punctuation: /[(){};:]/ }, Prism.languages.css.atrule.inside.rest = Prism.util.clone(Prism.languages.css), Prism.languages.markup && (Prism.languages.insertBefore("markup", "tag", { style: { pattern: /(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i, lookbehind: !0, inside: Prism.languages.css, alias: "language-css" } }), Prism.languages.insertBefore("inside", "attr-value", { "style-attr": { pattern: /\s*style=("|').*?\1/i, inside: { "attr-name": { pattern: /^\s*style/i, inside: Prism.languages.markup.tag.inside }, punctuation: /^\s*=\s*['"]|['"]\s*$/, "attr-value": { pattern: /.+/i, inside: Prism.languages.css } }, alias: "language-css" } }, Prism.languages.markup.tag));
	Prism.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\w\W]*?\*\//, lookbehind: !0 }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: !0 }], string: { pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: !0 }, "class-name": { pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i, lookbehind: !0, inside: { punctuation: /(\.|\\)/ } }, keyword: /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, "boolean": /\b(true|false)\b/, "function": /[a-z0-9_]+(?=\()/i, number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation: /[{}[\];(),.:]/ };
	Prism.languages.javascript = Prism.languages.extend("clike", { keyword: /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/, number: /\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/, "function": /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i }), Prism.languages.insertBefore("javascript", "keyword", { regex: { pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/, lookbehind: !0, greedy: !0 } }), Prism.languages.insertBefore("javascript", "class-name", { "template-string": { pattern: /`(?:\\\\|\\?[^\\])*?`/, greedy: !0, inside: { interpolation: { pattern: /\$\{[^}]+\}/, inside: { "interpolation-punctuation": { pattern: /^\$\{|\}$/, alias: "punctuation" }, rest: Prism.languages.javascript } }, string: /[\s\S]+/ } } }), Prism.languages.markup && Prism.languages.insertBefore("markup", "tag", { script: { pattern: /(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind: !0, inside: Prism.languages.javascript, alias: "language-javascript" } }), Prism.languages.js = Prism.languages.javascript;
	Prism.languages.aspnet = Prism.languages.extend("markup", { "page-directive tag": { pattern: /<%\s*@.*%>/i, inside: { "page-directive tag": /<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i, rest: Prism.languages.markup.tag.inside } }, "directive tag": { pattern: /<%.*%>/i, inside: { "directive tag": /<%\s*?[$=%#:]{0,2}|%>/i, rest: Prism.languages.csharp } } }), Prism.languages.aspnet.tag.pattern = /<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, Prism.languages.insertBefore("inside", "punctuation", { "directive tag": Prism.languages.aspnet["directive tag"] }, Prism.languages.aspnet.tag.inside["attr-value"]), Prism.languages.insertBefore("aspnet", "comment", { "asp comment": /<%--[\w\W]*?--%>/ }), Prism.languages.insertBefore("aspnet", Prism.languages.javascript ? "script" : "tag", { "asp script": { pattern: /(<script(?=.*runat=['"]?server['"]?)[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind: !0, inside: Prism.languages.csharp || {} } });
	!function (e) {
	  var t = { variable: [{ pattern: /\$?\(\([\w\W]+?\)\)/, inside: { variable: [{ pattern: /(^\$\(\([\w\W]+)\)\)/, lookbehind: !0 }, /^\$\(\(/], number: /\b-?(?:0x[\dA-Fa-f]+|\d*\.?\d+(?:[Ee]-?\d+)?)\b/, operator: /--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/, punctuation: /\(\(?|\)\)?|,|;/ } }, { pattern: /\$\([^)]+\)|`[^`]+`/, inside: { variable: /^\$\(|^`|\)$|`$/ } }, /\$(?:[a-z0-9_#\?\*!@]+|\{[^}]+\})/i] };e.languages.bash = { shebang: { pattern: /^#!\s*\/bin\/bash|^#!\s*\/bin\/sh/, alias: "important" }, comment: { pattern: /(^|[^"{\\])#.*/, lookbehind: !0 }, string: [{ pattern: /((?:^|[^<])<<\s*)(?:"|')?(\w+?)(?:"|')?\s*\r?\n(?:[\s\S])*?\r?\n\2/g, lookbehind: !0, greedy: !0, inside: t }, { pattern: /(["'])(?:\\\\|\\?[^\\])*?\1/g, greedy: !0, inside: t }], variable: t.variable, "function": { pattern: /(^|\s|;|\||&)(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|\s|;|\||&)/, lookbehind: !0 }, keyword: { pattern: /(^|\s|;|\||&)(?:let|:|\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|\s|;|\||&)/, lookbehind: !0 }, "boolean": { pattern: /(^|\s|;|\||&)(?:true|false)(?=$|\s|;|\||&)/, lookbehind: !0 }, operator: /&&?|\|\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/, punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];]/ };var a = t.variable[1].inside;a["function"] = e.languages.bash["function"], a.keyword = e.languages.bash.keyword, a.boolean = e.languages.bash.boolean, a.operator = e.languages.bash.operator, a.punctuation = e.languages.bash.punctuation;
	}(Prism);
	Prism.languages.c = Prism.languages.extend("clike", { keyword: /\b(asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/, operator: /\-[>-]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|?\||[~^%?*\/]/, number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)[ful]*\b/i }), Prism.languages.insertBefore("c", "string", { macro: { pattern: /(^\s*)#\s*[a-z]+([^\r\n\\]|\\.|\\(?:\r\n?|\n))*/im, lookbehind: !0, alias: "property", inside: { string: { pattern: /(#\s*include\s*)(<.+?>|("|')(\\?.)+?\3)/, lookbehind: !0 }, directive: { pattern: /(#\s*)\b(define|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\b/, lookbehind: !0, alias: "keyword" } } }, constant: /\b(__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|stdin|stdout|stderr)\b/ }), delete Prism.languages.c["class-name"], delete Prism.languages.c["boolean"];
	Prism.languages.csharp = Prism.languages.extend("clike", { keyword: /\b(abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while|add|alias|ascending|async|await|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|where|yield)\b/, string: [/@("|')(\1\1|\\\1|\\?(?!\1)[\s\S])*\1/, /("|')(\\?.)*?\1/], number: /\b-?(0x[\da-f]+|\d*\.?\d+f?)\b/i }), Prism.languages.insertBefore("csharp", "keyword", { "generic-method": { pattern: /[a-z0-9_]+\s*<[^>\r\n]+?>\s*(?=\()/i, alias: "function", inside: { keyword: Prism.languages.csharp.keyword, punctuation: /[<>(),.:]/ } }, preprocessor: { pattern: /(^\s*)#.*/m, lookbehind: !0, alias: "property", inside: { directive: { pattern: /(\s*#)\b(define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\b/, lookbehind: !0, alias: "keyword" } } } });
	Prism.languages.cpp = Prism.languages.extend("c", { keyword: /\b(alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/, "boolean": /\b(true|false)\b/, operator: /[-+]{1,2}|!=?|<{1,2}=?|>{1,2}=?|\->|:{1,2}|={1,2}|\^|~|%|&{1,2}|\|?\||\?|\*|\/|\b(and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/ }), Prism.languages.insertBefore("cpp", "keyword", { "class-name": { pattern: /(class\s+)[a-z0-9_]+/i, lookbehind: !0 } });
	!function (e) {
	  e.languages.ruby = e.languages.extend("clike", { comment: /#(?!\{[^\r\n]*?\}).*/, keyword: /\b(alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\b/ });var n = { pattern: /#\{[^}]+\}/, inside: { delimiter: { pattern: /^#\{|\}$/, alias: "tag" }, rest: e.util.clone(e.languages.ruby) } };e.languages.insertBefore("ruby", "keyword", { regex: [{ pattern: /%r([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\((?:[^()\\]|\\[\s\S])*\)[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\[(?:[^\[\]\\]|\\[\s\S])*\][gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r<(?:[^<>\\]|\\[\s\S])*>[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\r\n])+\/[gim]{0,3}(?=\s*($|[\r\n,.;})]))/, lookbehind: !0 }], variable: /[@$]+[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\b)/, symbol: /:[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\b)/ }), e.languages.insertBefore("ruby", "number", { builtin: /\b(Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|File|Fixnum|Fload|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/, constant: /\b[A-Z][a-zA-Z_0-9]*(?:[?!]|\b)/ }), e.languages.ruby.string = [{ pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\((?:[^()\\]|\\[\s\S])*\)/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\[(?:[^\[\]\\]|\\[\s\S])*\]/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?<(?:[^<>\\]|\\[\s\S])*>/, inside: { interpolation: n } }, { pattern: /("|')(#\{[^}]+\}|\\(?:\r?\n|\r)|\\?.)*?\1/, inside: { interpolation: n } }];
	}(Prism);
	Prism.languages.css.selector = { pattern: /[^\{\}\s][^\{\}]*(?=\s*\{)/, inside: { "pseudo-element": /:(?:after|before|first-letter|first-line|selection)|::[-\w]+/, "pseudo-class": /:[-\w]+(?:\(.*\))?/, "class": /\.[-:\.\w]+/, id: /#[-:\.\w]+/ } }, Prism.languages.insertBefore("css", "function", { hexcode: /#[\da-f]{3,6}/i, entity: /\\[\da-f]{1,8}/i, number: /[\d%\.]+/ });
	Prism.languages.git = { comment: /^#.*/m, deleted: /^[-–].*/m, inserted: /^\+.*/m, string: /("|')(\\?.)*?\1/m, command: { pattern: /^.*\$ git .*$/m, inside: { parameter: /\s(--|-)\w+/m } }, coord: /^@@.*@@$/m, commit_sha1: /^commit \w{40}$/m };
	Prism.languages.go = Prism.languages.extend("clike", { keyword: /\b(break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/, builtin: /\b(bool|byte|complex(64|128)|error|float(32|64)|rune|string|u?int(8|16|32|64|)|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(ln)?|real|recover)\b/, "boolean": /\b(_|iota|nil|true|false)\b/, operator: /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./, number: /\b(-?(0x[a-f\d]+|(\d+\.?\d*|\.\d+)(e[-+]?\d+)?)i?)\b/i, string: /("|'|`)(\\?.|\r|\n)*?\1/ }), delete Prism.languages.go["class-name"];
	Prism.languages.java = Prism.languages.extend("clike", { keyword: /\b(abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\b/, number: /\b0b[01]+\b|\b0x[\da-f]*\.?[\da-fp\-]+\b|\b\d*\.?\d+(?:e[+-]?\d+)?[df]?\b/i, operator: { pattern: /(^|[^.])(?:\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\|[|=]?|\*=?|\/=?|%=?|\^=?|[?:~])/m, lookbehind: !0 } }), Prism.languages.insertBefore("java", "function", { annotation: { alias: "punctuation", pattern: /(^|[^.])@\w+/, lookbehind: !0 } });
	Prism.languages.json = { property: /".*?"(?=\s*:)/gi, string: /"(?!:)(\\?[^"])*?"(?!:)/g, number: /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/g, punctuation: /[{}[\]);,]/g, operator: /:/g, "boolean": /\b(true|false)\b/gi, "null": /\bnull\b/gi }, Prism.languages.jsonp = Prism.languages.json;
	Prism.languages.less = Prism.languages.extend("css", { comment: [/\/\*[\w\W]*?\*\//, { pattern: /(^|[^\\])\/\/.*/, lookbehind: !0 }], atrule: { pattern: /@[\w-]+?(?:\([^{}]+\)|[^(){};])*?(?=\s*\{)/i, inside: { punctuation: /[:()]/ } }, selector: { pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\([^{}]*\)|[^{};@])*?(?=\s*\{)/, inside: { variable: /@+[\w-]+/ } }, property: /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/i, punctuation: /[{}();:,]/, operator: /[+\-*\/]/ }), Prism.languages.insertBefore("less", "punctuation", { "function": Prism.languages.less.function }), Prism.languages.insertBefore("less", "property", { variable: [{ pattern: /@[\w-]+\s*:/, inside: { punctuation: /:/ } }, /@@?[\w-]+/], "mixin-usage": { pattern: /([{;]\s*)[.#](?!\d)[\w-]+.*?(?=[(;])/, lookbehind: !0, alias: "function" } });
	Prism.languages.markdown = Prism.languages.extend("markup", {}), Prism.languages.insertBefore("markdown", "prolog", { blockquote: { pattern: /^>(?:[\t ]*>)*/m, alias: "punctuation" }, code: [{ pattern: /^(?: {4}|\t).+/m, alias: "keyword" }, { pattern: /``.+?``|`[^`\n]+`/, alias: "keyword" }], title: [{ pattern: /\w+.*(?:\r?\n|\r)(?:==+|--+)/, alias: "important", inside: { punctuation: /==+$|--+$/ } }, { pattern: /(^\s*)#+.+/m, lookbehind: !0, alias: "important", inside: { punctuation: /^#+|#+$/ } }], hr: { pattern: /(^\s*)([*-])([\t ]*\2){2,}(?=\s*$)/m, lookbehind: !0, alias: "punctuation" }, list: { pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m, lookbehind: !0, alias: "punctuation" }, "url-reference": { pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/, inside: { variable: { pattern: /^(!?\[)[^\]]+/, lookbehind: !0 }, string: /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/, punctuation: /^[\[\]!:]|[<>]/ }, alias: "url" }, bold: { pattern: /(^|[^\\])(\*\*|__)(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^\*\*|^__|\*\*$|__$/ } }, italic: { pattern: /(^|[^\\])([*_])(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^[*_]|[*_]$/ } }, url: { pattern: /!?\[[^\]]+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)| ?\[[^\]\n]*\])/, inside: { variable: { pattern: /(!?\[)[^\]]+(?=\]$)/, lookbehind: !0 }, string: { pattern: /"(?:\\.|[^"\\])*"(?=\)$)/ } } } }), Prism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic), Prism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold);
	Prism.languages.perl = { comment: [{ pattern: /(^\s*)=\w+[\s\S]*?=cut.*/m, lookbehind: !0 }, { pattern: /(^|[^\\$])#.*/, lookbehind: !0 }], string: [/\b(?:q|qq|qx|qw)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1/, /\b(?:q|qq|qx|qw)\s+([a-zA-Z0-9])(?:[^\\]|\\[\s\S])*?\1/, /\b(?:q|qq|qx|qw)\s*\((?:[^()\\]|\\[\s\S])*\)/, /\b(?:q|qq|qx|qw)\s*\{(?:[^{}\\]|\\[\s\S])*\}/, /\b(?:q|qq|qx|qw)\s*\[(?:[^[\]\\]|\\[\s\S])*\]/, /\b(?:q|qq|qx|qw)\s*<(?:[^<>\\]|\\[\s\S])*>/, /("|`)(?:[^\\]|\\[\s\S])*?\1/, /'(?:[^'\\\r\n]|\\.)*'/], regex: [/\b(?:m|qr)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1[msixpodualngc]*/, /\b(?:m|qr)\s+([a-zA-Z0-9])(?:[^\\]|\\.)*?\1[msixpodualngc]*/, /\b(?:m|qr)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngc]*/, /\b(?:m|qr)\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngc]*/, /\b(?:m|qr)\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngc]*/, /\b(?:m|qr)\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngc]*/, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\2(?:[^\\]|\\[\s\S])*?\2[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s+([a-zA-Z0-9])(?:[^\\]|\\[\s\S])*?\2(?:[^\\]|\\[\s\S])*?\2[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\((?:[^()\\]|\\[\s\S])*\)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\{(?:[^{}\\]|\\[\s\S])*\}\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\[(?:[^[\]\\]|\\[\s\S])*\]\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*<(?:[^<>\\]|\\[\s\S])*>\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngcer]*/, lookbehind: !0 }, /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\b))/], variable: [/[&*$@%]\{\^[A-Z]+\}/, /[&*$@%]\^[A-Z_]/, /[&*$@%]#?(?=\{)/, /[&*$@%]#?((::)*'?(?!\d)[\w$]+)+(::)*/i, /[&*$@%]\d+/, /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/], filehandle: { pattern: /<(?![<=])\S*>|\b_\b/, alias: "symbol" }, vstring: { pattern: /v\d+(\.\d+)*|\d+(\.\d+){2,}/, alias: "string" }, "function": { pattern: /sub [a-z0-9_]+/i, inside: { keyword: /sub/ } }, keyword: /\b(any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\b/, number: /\b-?(0x[\dA-Fa-f](_?[\dA-Fa-f])*|0b[01](_?[01])*|(\d(_?\d)*)?\.?\d(_?\d)*([Ee][+-]?\d+)?)\b/, operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\b/, punctuation: /[{}[\];(),:]/ };
	Prism.languages.php = Prism.languages.extend("clike", { keyword: /\b(and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\b/i, constant: /\b[A-Z0-9_]{2,}\b/, comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0 } }), Prism.languages.insertBefore("php", "class-name", { "shell-comment": { pattern: /(^|[^\\])#.*/, lookbehind: !0, alias: "comment" } }), Prism.languages.insertBefore("php", "keyword", { delimiter: /\?>|<\?(?:php)?/i, variable: /\$\w+\b/i, "package": { pattern: /(\\|namespace\s+|use\s+)[\w\\]+/, lookbehind: !0, inside: { punctuation: /\\/ } } }), Prism.languages.insertBefore("php", "operator", { property: { pattern: /(->)[\w]+/, lookbehind: !0 } }), Prism.languages.markup && (Prism.hooks.add("before-highlight", function (e) {
	  "php" === e.language && (e.tokenStack = [], e.backupCode = e.code, e.code = e.code.replace(/(?:<\?php|<\?)[\w\W]*?(?:\?>)/gi, function (a) {
	    return e.tokenStack.push(a), "{{{PHP" + e.tokenStack.length + "}}}";
	  }));
	}), Prism.hooks.add("before-insert", function (e) {
	  "php" === e.language && (e.code = e.backupCode, delete e.backupCode);
	}), Prism.hooks.add("after-highlight", function (e) {
	  if ("php" === e.language) {
	    for (var a, n = 0; a = e.tokenStack[n]; n++) {
	      e.highlightedCode = e.highlightedCode.replace("{{{PHP" + (n + 1) + "}}}", Prism.highlight(a, e.grammar, "php").replace(/\$/g, "$$$$"));
	    }e.element.innerHTML = e.highlightedCode;
	  }
	}), Prism.hooks.add("wrap", function (e) {
	  "php" === e.language && "markup" === e.type && (e.content = e.content.replace(/(\{\{\{PHP[0-9]+\}\}\})/g, '<span class="token php">$1</span>'));
	}), Prism.languages.insertBefore("php", "comment", { markup: { pattern: /<[^?]\/?(.*?)>/, inside: Prism.languages.markup }, php: /\{\{\{PHP[0-9]+\}\}\}/ }));
	Prism.languages.insertBefore("php", "variable", { "this": /\$this\b/, global: /\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)/, scope: { pattern: /\b[\w\\]+::/, inside: { keyword: /(static|self|parent)/, punctuation: /(::|\\)/ } } });
	Prism.languages.python = { "triple-quoted-string": { pattern: /"""[\s\S]+?"""|'''[\s\S]+?'''/, alias: "string" }, comment: { pattern: /(^|[^\\])#.*/, lookbehind: !0 }, string: { pattern: /("|')(?:\\\\|\\?[^\\\r\n])*?\1/, greedy: !0 }, "function": { pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_][a-zA-Z0-9_]*(?=\()/g, lookbehind: !0 }, "class-name": { pattern: /(\bclass\s+)[a-z0-9_]+/i, lookbehind: !0 }, keyword: /\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|with|yield)\b/, "boolean": /\b(?:True|False)\b/, number: /\b-?(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i, operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not)\b/, punctuation: /[{}[\];(),.:]/ };
	!function (a) {
	  var e = a.util.clone(a.languages.javascript);a.languages.jsx = a.languages.extend("markup", e), a.languages.jsx.tag.pattern = /<\/?[\w\.:-]+\s*(?:\s+[\w\.:-]+(?:=(?:("|')(\\?[\w\W])*?\1|[^\s'">=]+|(\{[\w\W]*?\})))?\s*)*\/?>/i, a.languages.jsx.tag.inside["attr-value"].pattern = /=[^\{](?:('|")[\w\W]*?(\1)|[^\s>]+)/i;var s = a.util.clone(a.languages.jsx);delete s.punctuation, s = a.languages.insertBefore("jsx", "operator", { punctuation: /=(?={)|[{}[\];(),.:]/ }, { jsx: s }), a.languages.insertBefore("inside", "attr-value", { script: { pattern: /=(\{(?:\{[^}]*\}|[^}])+\})/i, inside: s, alias: "language-javascript" } }, a.languages.jsx.tag);
	}(Prism);
	Prism.languages.scss = Prism.languages.extend("css", { comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0 }, atrule: { pattern: /@[\w-]+(?:\([^()]+\)|[^(])*?(?=\s+[{;])/, inside: { rule: /@[\w-]+/ } }, url: /(?:[-a-z]+-)*url(?=\()/i, selector: { pattern: /(?=\S)[^@;\{\}\(\)]?([^@;\{\}\(\)]|&|#\{\$[-_\w]+\})+(?=\s*\{(\}|\s|[^\}]+(:|\{)[^\}]+))/m, inside: { placeholder: /%[-_\w]+/ } } }), Prism.languages.insertBefore("scss", "atrule", { keyword: [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, { pattern: /( +)(?:from|through)(?= )/, lookbehind: !0 }] }), Prism.languages.insertBefore("scss", "property", { variable: /\$[-_\w]+|#\{\$[-_\w]+\}/ }), Prism.languages.insertBefore("scss", "function", { placeholder: { pattern: /%[-_\w]+/, alias: "selector" }, statement: /\B!(?:default|optional)\b/i, "boolean": /\b(?:true|false)\b/, "null": /\bnull\b/, operator: { pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|or|not)(?=\s)/, lookbehind: !0 } }), Prism.languages.scss.atrule.inside.rest = Prism.util.clone(Prism.languages.scss);
	Prism.languages.sql = { comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|(?:--|\/\/|#).*)/, lookbehind: !0 }, string: { pattern: /(^|[^@\\])("|')(?:\\?[\s\S])*?\2/, lookbehind: !0 }, variable: /@[\w.$]+|@("|'|`)(?:\\?[\s\S])+?\1/, "function": /\b(?:COUNT|SUM|AVG|MIN|MAX|FIRST|LAST|UCASE|LCASE|MID|LEN|ROUND|NOW|FORMAT)(?=\s*\()/i, keyword: /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR VARYING|CHARACTER (?:SET|VARYING)|CHARSET|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COLUMNS|COMMENT|COMMIT|COMMITTED|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|DATA(?:BASES?)?|DATETIME|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE(?: PRECISION)?|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE KEY|ELSE|ENABLE|ENCLOSED BY|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPE(?:D BY)?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTO|INVOKER|ISOLATION LEVEL|JOIN|KEYS?|KILL|LANGUAGE SQL|LAST|LEFT|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MODIFIES SQL DATA|MODIFY|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL(?: CHAR VARYING| CHARACTER(?: VARYING)?| VARCHAR)?|NATURAL|NCHAR(?: VARCHAR)?|NEXT|NO(?: SQL|CHECK|CYCLE)?|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READ(?:S SQL DATA|TEXT)?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEATABLE|REPLICATION|REQUIRE|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE MODE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|START(?:ING BY)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED BY|TEXT(?:SIZE)?|THEN|TIMESTAMP|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNPIVOT|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?)\b/i, "boolean": /\b(?:TRUE|FALSE|NULL)\b/i, number: /\b-?(?:0x)?\d*\.?[\da-f]+\b/, operator: /[-+*\/=%^~]|&&?|\|?\||!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i, punctuation: /[;[\]()`,.]/ };
	Prism.languages.swift = Prism.languages.extend("clike", { string: { pattern: /("|')(\\(?:\((?:[^()]|\([^)]+\))+\)|\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: !0, inside: { interpolation: { pattern: /\\\((?:[^()]|\([^)]+\))+\)/, inside: { delimiter: { pattern: /^\\\(|\)$/, alias: "variable" } } } } }, keyword: /\b(as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|Protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\b/, number: /\b([\d_]+(\.[\de_]+)?|0x[a-f0-9_]+(\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i, constant: /\b(nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/, atrule: /@\b(IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\b/, builtin: /\b([A-Z]\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\b/ }), Prism.languages.swift.string.inside.interpolation.inside.rest = Prism.util.clone(Prism.languages.swift);
	!function () {
	  "undefined" != typeof self && self.Prism && self.document && Prism.hooks.add("complete", function (e) {
	    if (e.code) {
	      var t = e.element.parentNode,
	          s = /\s*\bline-numbers\b\s*/;if (t && /pre/i.test(t.nodeName) && (s.test(t.className) || s.test(e.element.className)) && !e.element.querySelector(".line-numbers-rows")) {
	        s.test(e.element.className) && (e.element.className = e.element.className.replace(s, "")), s.test(t.className) || (t.className += " line-numbers");var n,
	            a = e.code.match(/\n(?!$)/g),
	            l = a ? a.length + 1 : 1,
	            m = new Array(l + 1);m = m.join("<span></span>"), n = document.createElement("span"), n.className = "line-numbers-rows", n.innerHTML = m, t.hasAttribute("data-start") && (t.style.counterReset = "linenumber " + (parseInt(t.getAttribute("data-start"), 10) - 1)), e.element.appendChild(n);
	      }
	    }
	  });
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
	* @package godofredoninja
	* Share social media
	*/
	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GodoShare = function () {
		function GodoShare(elem) {
			_classCallCheck(this, GodoShare);
	
			this.elem = elem;
		}
	
		/**
	    *  @function godoValue
	    *  @description Helper to get the attribute of a DOM element
	    *  @param {String} attr DOM element attribute
	    *  @returns {String|Empty} returns the attr value or empty string
	    */
	
	
		_createClass(GodoShare, [{
			key: 'godoValue',
			value: function godoValue(a) {
				var val = this.elem.attr('godo-' + a);
				return val === undefined || val === null ? false : val;
			}
	
			/**
	      * @event godoShare
	      * @description Main share event. Will pop a window or redirect to a link
	      */
	
		}, {
			key: 'godoShare',
			value: function godoShare() {
				var share_name = this.godoValue('share').toLowerCase(),
				    share_social = {
					facebook: {
						shareUrl: 'https://www.facebook.com/sharer/sharer.php',
						params: { u: this.godoValue('url') }
					},
					twitter: {
						shareUrl: 'https://twitter.com/intent/tweet/',
						params: {
							text: this.godoValue('title'),
							url: this.godoValue('url')
						}
					},
					reddit: {
						shareUrl: 'https://www.reddit.com/submit',
						params: { 'url': this.godoValue('url') }
					},
					pinterest: {
						shareUrl: 'https://www.pinterest.com/pin/create/button/',
						params: {
							url: this.godoValue('url'),
							description: this.godoValue('title')
						}
					},
					pocket: {
						shareUrl: 'https://getpocket.com/save',
						params: {
							url: this.godoValue('url')
						}
					}
				},
				    s = share_social[share_name];
	
				return s !== undefined ? this.godoPopup(s) : false;
			}
	
			/**
	      * @event godoPopup
	      * @param {Object} share
	      */
	
		}, {
			key: 'godoPopup',
			value: function godoPopup(share) {
				var p = share.params || {},
				    keys = Object.keys(p),
				    i,
				    str = keys.length > 0 ? '?' : '';
	
				for (i = 0; i < keys.length; i++) {
					if (str !== '?') {
						str += '&';
					}
					if (p[keys[i]]) {
						str += keys[i] + '=' + encodeURIComponent(p[keys[i]]);
					}
				}
	
				share.shareUrl += str;
	
				if (!share.isLink) {
					var popWidth = share.width || 600,
					    popHeight = share.height || 480,
					    left = window.innerWidth / 2 - popWidth / 2 + window.screenX,
					    top = window.innerHeight / 2 - popHeight / 2 + window.screenY,
					    popParams = 'scrollbars=no, width=' + popWidth + ', height=' + popHeight + ', top=' + top + ', left=' + left,
					    newWindow = window.open(share.shareUrl, '', popParams);
	
					if (window.focus) {
						newWindow.focus();
					}
				} else {
					window.location.href = share.shareUrl;
				}
			}
		}]);
	
		return GodoShare;
	}();
	
	module.exports = GodoShare;

/***/ },
/* 4 */
/***/ function(module, exports) {

	/*
	* @package godofredoninja
	*  Share count social media
	*/
	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GodoShareCount = function () {
		function GodoShareCount(elem) {
			_classCallCheck(this, GodoShareCount);
	
			this.elem = elem;
			this.url = elem.attr('data-url');
			this.total = 0;
		}
	
		/**
	  * @function convertNumber
	  * @description  Return rounded and pretty value of share count.
	  */
	
	
		_createClass(GodoShareCount, [{
			key: 'convertNumber',
			value: function convertNumber(n) {
				if (n >= 1000000000) return (n / 1000000000).toFixed(1) + 'G';
				if (n >= 1000000) return (n / 1000000).toFixed(1) + 'M';
				if (n >= 1000) return (n / 1000).toFixed(1) + 'K';
				return n;
			}
	
			/**
	   * @function updateCounter
	   * @description  adds all the number of shared pages
	   */
	
		}, {
			key: 'addCounter',
			value: function addCounter(n) {
				this.total = this.total + n;
			}
	
			/**
	   * @function updateCounter
	   * @description  update the number of shares.
	   */
	
		}, {
			key: 'updateCounter',
			value: function updateCounter() {
				this.elem.html('<span style="margin-right:5px"><strong>' + this.convertNumber(this.total) + '</strong></span><span>Shares</span>');
			}
		}, {
			key: 'godoCount',
			value: function godoCount() {
				var _this = this;
	
				$.getJSON('https://graph.facebook.com/?id=' + encodeURIComponent(this.url) + '&callback=?', function (response) {
					if (response.shares === undefined) _this.addCounter(0);else _this.addCounter(response.shares);
					_this.updateCounter();
				});
	
				$.getJSON("https://www.linkedin.com/countserv/count/share?url=" + encodeURIComponent(this.url) + "&format=jsonp&callback=?", function (response) {
					_this.addCounter(response.count);
					_this.updateCounter();
				});
			}
		}]);
	
		return GodoShareCount;
	}();
	
	module.exports = GodoShareCount;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(6);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(12)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/resolve-url-loader/index.js!./../../node_modules/autoprefixer-loader/index.js?browsers=last 3 versions!./../../node_modules/sass-loader/index.js?outputStyle=expanded!./main.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/resolve-url-loader/index.js!./../../node_modules/autoprefixer-loader/index.js?browsers=last 3 versions!./../../node_modules/sass-loader/index.js?outputStyle=expanded!./main.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(7)();
	// imports
	exports.i(__webpack_require__(8), "");
	
	// module
	exports.push([module.id, "/*\n\t@package godofredoninja\n*/\n\n/* Normalize and icon fonts (libraries)\n========================================================================== */\n\n@font-face {\n  font-family: 'mapache';\n  src: url(" + __webpack_require__(9) + ") format(\"truetype\"), url(" + __webpack_require__(10) + ") format(\"woff\"), url(" + __webpack_require__(11) + ") format(\"svg\");\n  font-weight: normal;\n  font-style: normal;\n}\n\n[class^=\"i-\"]:before,\n[class*=\" i-\"]:before {\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: 'mapache' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.i-github:before {\n  content: \"\\F09B\";\n}\n\n.i-linkedin:before {\n  content: \"\\F0E1\";\n}\n\n.i-flickr:before {\n  content: \"\\F16E\";\n}\n\n.i-dribbble:before {\n  content: \"\\F17D\";\n}\n\n.i-pinterest:before {\n  content: \"\\F231\";\n}\n\n.i-map:before {\n  content: \"\\F041\";\n}\n\n.i-twitter:before {\n  content: \"\\F099\";\n}\n\n.i-facebook:before {\n  content: \"\\F09A\";\n}\n\n.i-youtube:before {\n  content: \"\\F16A\";\n}\n\n.i-instagram:before {\n  content: \"\\F16D\";\n}\n\n.i-google:before {\n  content: \"\\F1A0\";\n}\n\n.i-pocket:before {\n  content: \"\\F265\";\n}\n\n.i-reddit:before {\n  content: \"\\F281\";\n}\n\n.i-back:before {\n  content: \"\\E5C4\";\n}\n\n.i-forward:before {\n  content: \"\\E5C8\";\n}\n\n.i-chat:before {\n  content: \"\\E0CB\";\n}\n\n.i-close:before {\n  content: \"\\E5CD\";\n}\n\n.i-code:before {\n  content: \"\\E86F\";\n}\n\n.i-favorite:before {\n  content: \"\\E87D\";\n}\n\n.i-link:before {\n  content: \"\\E157\";\n}\n\n.i-menu:before {\n  content: \"\\E5D2\";\n}\n\n.i-feed:before {\n  content: \"\\E0E5\";\n}\n\n.i-search:before {\n  content: \"\\E8B6\";\n}\n\n.i-share:before {\n  content: \"\\E80D\";\n}\n\n.i-spinner:before {\n  content: \"\\E982\";\n}\n\n/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+aspnet+bash+c+csharp+cpp+ruby+css-extras+git+go+java+json+less+markdown+perl+php+php-extras+python+jsx+scss+sql+swift&plugins=line-numbers */\n\n/**\r\n * prism.js default theme for JavaScript, CSS and HTML\r\n * Based on dabblet (http://dabblet.com)\r\n * @author Lea Verou\r\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n  color: black;\n  background: none;\n  text-shadow: 0 1px white;\n  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  word-wrap: normal;\n  line-height: 1.5;\n  -moz-tab-size: 4;\n  tab-size: 4;\n  -webkit-hyphens: none;\n  -ms-hyphens: none;\n  hyphens: none;\n}\n\npre[class*=\"language-\"]::-moz-selection,\npre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection,\ncode[class*=\"language-\"] ::-moz-selection {\n  text-shadow: none;\n  background: #b3d4fc;\n}\n\npre[class*=\"language-\"]::selection,\npre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection,\ncode[class*=\"language-\"] ::selection {\n  text-shadow: none;\n  background: #b3d4fc;\n}\n\n@media print {\n  code[class*=\"language-\"],\n  pre[class*=\"language-\"] {\n    text-shadow: none;\n  }\n}\n\n/* Code blocks */\n\npre[class*=\"language-\"] {\n  padding: 1em;\n  margin: .5em 0;\n  overflow: auto;\n}\n\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n  background: #f5f2f0;\n}\n\n/* Inline code */\n\n:not(pre) > code[class*=\"language-\"] {\n  padding: .1em;\n  border-radius: .3em;\n  white-space: normal;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: slategray;\n}\n\n.token.punctuation {\n  color: #999;\n}\n\n.namespace {\n  opacity: .7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: #905;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n  color: #690;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n  color: #a67f59;\n  background: rgba(255, 255, 255, 0.5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n  color: #07a;\n}\n\n.token.function {\n  color: #DD4A68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n  color: #e90;\n}\n\n.token.important,\n.token.bold {\n  font-weight: bold;\n}\n\n.token.italic {\n  font-style: italic;\n}\n\n.token.entity {\n  cursor: help;\n}\n\npre.line-numbers {\n  position: relative;\n  padding-left: 3.8em;\n  counter-reset: linenumber;\n}\n\npre.line-numbers > code {\n  position: relative;\n}\n\n.line-numbers .line-numbers-rows {\n  position: absolute;\n  pointer-events: none;\n  top: 0;\n  font-size: 100%;\n  left: -3.8em;\n  width: 3em;\n  /* works for line-numbers below 1000 lines */\n  letter-spacing: -1px;\n  border-right: 1px solid #999;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.line-numbers-rows > span {\n  pointer-events: none;\n  display: block;\n  counter-increment: linenumber;\n}\n\n.line-numbers-rows > span:before {\n  content: counter(linenumber);\n  color: #999;\n  display: block;\n  padding-right: 0.8em;\n  text-align: right;\n}\n\n/* Mixins & Variables\n========================================================================== */\n\n/*\n@package godofredoninja\n\n\t========================================================================\n\t\tMapache variables styles\n\t========================================================================\n*/\n\n/**\n * Table of Contents:\n *\n *\t\t1. Colors\n */\n\n/* 1. Colors\n========================================================================== */\n\n/* 2. Fonts\n========================================================================== */\n\n/* 3. Typography\n========================================================================== */\n\n/* 4. Header\n========================================================================== */\n\n/* 4. Footer\n========================================================================== */\n\n/* 4. Code Syntax\n========================================================================== */\n\n/* 3. buttons\n========================================================================== */\n\n/* 5. container\n========================================================================== */\n\n/* 10. Grid\n========================================================================== */\n\n/* 11. Media Query Ranges\n========================================================================== */\n\n.header.toolbar-shadow {\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);\n}\n\n.u-unstyled {\n  padding-left: 0;\n  list-style: none;\n  margin: 0;\n}\n\n@media only screen and (max-width: 766px) {\n  .hide-before-md {\n    display: none !important;\n  }\n}\n\n@media only screen and (max-width: 992px) {\n  .hide-before-lg {\n    display: none !important;\n  }\n}\n\n@media only screen and (min-width: 766px) {\n  .hide-after-md {\n    display: none !important;\n  }\n}\n\n@media only screen and (min-width: 992px) {\n  .hide-after-lg {\n    display: none !important;\n  }\n}\n\n/* Structure\n========================================================================== */\n\nhtml {\n  box-sizing: border-box;\n  font-size: 16px;\n  -webkit-tap-highlight-color: transparent;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: border-box;\n}\n\n[godo-state~=no-scroll] {\n  height: 100%;\n  overflow: hidden;\n}\n\na {\n  color: #4184F3;\n  outline: 0;\n  text-decoration: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\na:focus {\n  text-decoration: none;\n  background-color: transparent;\n}\n\nbody {\n  color: #333;\n  font-family: \"Roboto\", sans-serif;\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\nfigure {\n  margin: 0;\n}\n\nimg {\n  height: auto;\n  max-width: 100%;\n  vertical-align: middle;\n  width: auto;\n}\n\nimg:not([src]) {\n  visibility: hidden;\n}\n\n.img-responsive {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n\ni {\n  display: inline-block;\n  vertical-align: middle;\n}\n\nhr {\n  margin: 1.8rem 0;\n  border: 0;\n  border-top: 1px solid #DDDDDD;\n  height: 0;\n}\n\nblockquote {\n  border-left: 3px solid #4285f4;\n  padding: 10px 24px;\n  color: #666;\n  font-size: 17px;\n  line-height: 1.7em;\n  margin-bottom: 20px;\n  margin: 0 0 20px;\n  quotes: none;\n}\n\nol,\nul,\nblockquote {\n  margin-left: 2rem;\n}\n\nstrong {\n  font-weight: 500;\n}\n\nsmall,\n.small {\n  font-size: 85%;\n}\n\nol {\n  padding-left: 40px;\n  list-style: decimal outside;\n}\n\n/* Code Syntax\n========================================================================== */\n\nkbd,\nsamp,\ncode {\n  font-family: \"Fira Mono\", monospace !important;\n  font-size: 0.9375rem;\n  color: #c7254e;\n  background: #f7f7f7;\n  border-radius: 4px;\n  padding: 4px 6px;\n  white-space: pre-wrap;\n}\n\ncode[class*=language-],\npre[class*=language-] {\n  color: #37474f;\n  line-height: 1.5;\n}\n\ncode[class*=language-] .token.comment,\npre[class*=language-] .token.comment {\n  opacity: .8;\n}\n\ncode[class*=language-].line-numbers,\npre[class*=language-].line-numbers {\n  padding-left: 58px;\n}\n\ncode[class*=language-].line-numbers:before,\npre[class*=language-].line-numbers:before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  top: 0;\n  background: #F0EDEE;\n  width: 40px;\n  height: 100%;\n}\n\ncode[class*=language-] .line-numbers-rows,\npre[class*=language-] .line-numbers-rows {\n  border-right: none;\n  top: -3px;\n  left: -58px;\n}\n\ncode[class*=language-] .line-numbers-rows > span:before,\npre[class*=language-] .line-numbers-rows > span:before {\n  padding-right: 0;\n  text-align: center;\n  opacity: .8;\n}\n\npre {\n  background-color: #f7f7f7 !important;\n  padding: 1rem;\n  overflow: hidden;\n  border-radius: 4px;\n  word-wrap: normal;\n  margin: 2.5rem 0 !important;\n  font-family: \"Fira Mono\", monospace !important;\n  font-size: 0.9375rem;\n}\n\npre code {\n  color: #37474f;\n  text-shadow: 0 1px #fff;\n  padding: 0;\n  background: transparent;\n}\n\n/* Social icon color and backgrount\n========================================================================== */\n\n.c-facebook {\n  color: #3b5998;\n}\n\n.bg-facebook {\n  background-color: #3b5998 !important;\n}\n\n.c-twitter {\n  color: #55acee;\n}\n\n.bg-twitter {\n  background-color: #55acee !important;\n}\n\n.c-google {\n  color: #dd4b39;\n}\n\n.bg-google {\n  background-color: #dd4b39 !important;\n}\n\n.c-instagram {\n  color: #306088;\n}\n\n.bg-instagram {\n  background-color: #306088 !important;\n}\n\n.c-youtube {\n  color: #e52d27;\n}\n\n.bg-youtube {\n  background-color: #e52d27 !important;\n}\n\n.c-github {\n  color: #333333;\n}\n\n.bg-github {\n  background-color: #333333 !important;\n}\n\n.c-linkedin {\n  color: #007bb6;\n}\n\n.bg-linkedin {\n  background-color: #007bb6 !important;\n}\n\n.c-spotify {\n  color: #2ebd59;\n}\n\n.bg-spotify {\n  background-color: #2ebd59 !important;\n}\n\n.c-codepen {\n  color: #222222;\n}\n\n.bg-codepen {\n  background-color: #222222 !important;\n}\n\n.c-behance {\n  color: #131418;\n}\n\n.bg-behance {\n  background-color: #131418 !important;\n}\n\n.c-dribbble {\n  color: #ea4c89;\n}\n\n.bg-dribbble {\n  background-color: #ea4c89 !important;\n}\n\n.c-flickr {\n  color: #0063DC;\n}\n\n.bg-flickr {\n  background-color: #0063DC !important;\n}\n\n.c-reddit {\n  color: orangered;\n}\n\n.bg-reddit {\n  background-color: orangered !important;\n}\n\n.c-pocket {\n  color: #F50057;\n}\n\n.bg-pocket {\n  background-color: #F50057 !important;\n}\n\n.c-pinterest {\n  color: #bd081c;\n}\n\n.bg-pinterest {\n  background-color: #bd081c !important;\n}\n\n.clear:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.u-align-center,\n.cover {\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-align: center;\n  -ms-flex-align: center;\n  -webkit-align-items: center;\n  align-items: center;\n  -ms-flex-pack: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n}\n\n.card {\n  border: 0;\n  background: #fff;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(43, 59, 93, 0.29);\n  margin-bottom: 20px;\n  padding: 1em;\n}\n\n.show-on-medium-screen,\n.show-on-small-screen {\n  display: none;\n}\n\n.landing {\n  overflow: hidden;\n}\n\n.main {\n  position: relative;\n}\n\n.overlay {\n  background-color: rgba(50, 50, 50, 0.5);\n  bottom: 0;\n  left: 0;\n  opacity: 0;\n  position: fixed;\n  right: 0;\n  top: 0;\n  visibility: hidden;\n  z-index: 59;\n  transition-duration: 0.3s;\n}\n\n/* sidebar\n========================================================================== */\n\n.sidebar {\n  position: relative;\n  color: rgba(0, 0, 0, 0.54);\n  line-height: 1.6;\n}\n\n.sidebar h1,\n.sidebar h2,\n.sidebar h3,\n.sidebar h4,\n.sidebar h5,\n.sidebar h6 {\n  margin-top: 0;\n}\n\n.sidebar .widget {\n  margin-bottom: 2rem;\n  position: relative;\n}\n\n.sidebar .title {\n  background-color: #4285f4;\n  color: #FFFFFF;\n  padding: 10px 16px;\n  font-size: 18px;\n}\n\n.svg-icon {\n  margin: auto;\n  background-repeat: no-repeat no-repeat;\n  display: block;\n  fill: currentcolor;\n}\n\n/* Video Responsive\n========================================================================== */\n\n.video-responsive {\n  position: relative;\n  display: block;\n  height: 0;\n  padding: 0;\n  overflow: hidden;\n  padding-bottom: 56.25%;\n  margin-bottom: 1.5rem;\n}\n\n.video-responsive iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  height: 100%;\n  width: 100%;\n  border: 0;\n}\n\n@media only screen and (min-width: 900px) {\n  .bg-home {\n    background-color: #EEEEEE;\n    background-image: linear-gradient(to right, #fff 0, #fff 50%, #EEEEEE 50%, #EEEEEE 100%);\n  }\n\n  .bg-home .main-post {\n    background: #fff;\n  }\n}\n\n.fb-post,\n.twitter-tweet {\n  display: block !important;\n  margin: 0 auto 40px auto !important;\n  text-align: center;\n}\n\n.Ads {\n  position: relative;\n  margin: 10px -32px;\n  text-align: center;\n}\n\n.Ads .Ads-content {\n  display: inline-block;\n  vertical-align: top;\n  margin-bottom: 10px;\n  margin-right: 10px;\n  margin-left: 10px;\n}\n\n.container {\n  margin: 0 auto;\n  padding-left: 0.9375rem;\n  padding-right: 0.9375rem;\n  width: 576px;\n  width: 100%;\n}\n\n@media only screen and (min-width: 766px) {\n  .container {\n    max-width: 750px;\n  }\n}\n\n@media only screen and (min-width: 992px) {\n  .container {\n    max-width: 970px;\n  }\n}\n\n@media only screen and (min-width: 1230px) {\n  .container {\n    max-width: 1200px;\n  }\n}\n\n.margin-top {\n  margin-top: 56px;\n  padding-top: 1rem;\n}\n\n@media only screen and (min-width: 766px) {\n  .margin-top {\n    padding-top: 2rem;\n  }\n}\n\n.layout-wrap {\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n}\n\n.layout-row {\n  box-sizing: border-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n[class^=\"col-gd-\"] {\n  min-height: 1px;\n  padding-left: 0.9375rem;\n  padding-right: 0.9375rem;\n}\n\n.col-gd-left,\n.col-gd-right,\n.col-gd-post-image,\n.col-gd-post-meta {\n  width: 100%;\n}\n\n@media only screen and (min-width: 992px) {\n  .col-gd-left {\n    width: 65.98%;\n  }\n\n  .col-gd-right {\n    width: 34.02%;\n  }\n\n  .col-gd-post-image {\n    width: 46.5%;\n  }\n\n  .col-gd-post-meta {\n    width: 53.5%;\n  }\n}\n\n@media only screen and (min-width: 1230px) {\n  .col-gd-left {\n    width: 72.5%;\n  }\n\n  .col-gd-right {\n    width: 27.5%;\n  }\n}\n\n.row {\n  margin-left: -0.9375rem;\n  margin-right: -0.9375rem;\n}\n\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.row .col {\n  float: left;\n  box-sizing: border-box;\n  padding-left: 0.9375rem;\n  padding-right: 0.9375rem;\n}\n\n.row .col.s1 {\n  width: 8.33333%;\n}\n\n.row .col.s2 {\n  width: 16.66667%;\n}\n\n.row .col.s3 {\n  width: 25%;\n}\n\n.row .col.s4 {\n  width: 33.33333%;\n}\n\n.row .col.s5 {\n  width: 41.66667%;\n}\n\n.row .col.s6 {\n  width: 50%;\n}\n\n.row .col.s7 {\n  width: 58.33333%;\n}\n\n.row .col.s8 {\n  width: 66.66667%;\n}\n\n.row .col.s9 {\n  width: 75%;\n}\n\n.row .col.s10 {\n  width: 83.33333%;\n}\n\n.row .col.s11 {\n  width: 91.66667%;\n}\n\n.row .col.s12 {\n  width: 100%;\n}\n\n@media only screen and (min-width: 766px) {\n  .row .col.m1 {\n    width: 8.33333%;\n  }\n\n  .row .col.m2 {\n    width: 16.66667%;\n  }\n\n  .row .col.m3 {\n    width: 25%;\n  }\n\n  .row .col.m4 {\n    width: 33.33333%;\n  }\n\n  .row .col.m5 {\n    width: 41.66667%;\n  }\n\n  .row .col.m6 {\n    width: 50%;\n  }\n\n  .row .col.m7 {\n    width: 58.33333%;\n  }\n\n  .row .col.m8 {\n    width: 66.66667%;\n  }\n\n  .row .col.m9 {\n    width: 75%;\n  }\n\n  .row .col.m10 {\n    width: 83.33333%;\n  }\n\n  .row .col.m11 {\n    width: 91.66667%;\n  }\n\n  .row .col.m12 {\n    width: 100%;\n  }\n}\n\n@media only screen and (min-width: 992px) {\n  .row .col.l1 {\n    width: 8.33333%;\n  }\n\n  .row .col.l2 {\n    width: 16.66667%;\n  }\n\n  .row .col.l3 {\n    width: 25%;\n  }\n\n  .row .col.l4 {\n    width: 33.33333%;\n  }\n\n  .row .col.l5 {\n    width: 41.66667%;\n  }\n\n  .row .col.l6 {\n    width: 50%;\n  }\n\n  .row .col.l7 {\n    width: 58.33333%;\n  }\n\n  .row .col.l8 {\n    width: 66.66667%;\n  }\n\n  .row .col.l9 {\n    width: 75%;\n  }\n\n  .row .col.l10 {\n    width: 83.33333%;\n  }\n\n  .row .col.l11 {\n    width: 91.66667%;\n  }\n\n  .row .col.l12 {\n    width: 100%;\n  }\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\n.h1,\n.h2,\n.h3,\n.h4,\n.h5,\n.h6 {\n  margin-bottom: 0.5rem;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: 500;\n  line-height: 1.1;\n  color: inherit;\n}\n\nh1 {\n  font-size: 2.25rem;\n}\n\nh2 {\n  font-size: 1.875rem;\n}\n\nh3 {\n  font-size: 1.5625rem;\n}\n\nh4 {\n  font-size: 1.375rem;\n}\n\nh5 {\n  font-size: 1.125rem;\n}\n\nh6 {\n  font-size: 1rem;\n}\n\n.h1 {\n  font-size: 2.25rem;\n}\n\n.h2 {\n  font-size: 1.875rem;\n}\n\n.h3 {\n  font-size: 1.5625rem;\n}\n\n.h4 {\n  font-size: 1.375rem;\n}\n\n.h5 {\n  font-size: 1.125rem;\n}\n\n.h6 {\n  font-size: 1rem;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin-bottom: 1rem;\n}\n\nh1 a,\nh2 a,\nh3 a,\nh4 a,\nh5 a,\nh6 a {\n  color: inherit;\n  line-height: inherit;\n}\n\np {\n  margin-top: 0;\n  margin-bottom: 1rem;\n}\n\n.menu-mobile {\n  background: #fff;\n  bottom: 0;\n  box-shadow: 0 9px 18px 0 rgba(0, 0, 0, 0.18);\n  left: 0;\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  width: 256px;\n  z-index: 60;\n  transition-duration: .3s;\n  -webkit-transform: translate3d(-100%, 0, 0);\n  transform: translate3d(-100%, 0, 0);\n  transition: all 0.4s cubic-bezier(0.25, 0.8, 0.58, 1);\n}\n\n.menu-mobile.open {\n  -webkit-transform: translate3d(0%, 0, 0);\n  transform: translate3d(0%, 0, 0);\n}\n\n.menu-mobile-wrap {\n  height: 100%;\n  margin-bottom: 10px;\n  overflow-y: auto;\n  padding-bottom: 8px;\n  width: 100%;\n  padding-top: 1rem;\n}\n\n.menu-mobile .navigation-link {\n  color: #333;\n  display: block;\n  font-size: 14px;\n  font-weight: 500;\n  height: 48px;\n  line-height: 50px;\n  opacity: .85;\n  overflow: hidden;\n  padding: 0 12px 0 20px;\n  transition: background-color 0.3s cubic-bezier(0, 0, 0.2, 1);\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.menu-mobile .navigation-link.active,\n.menu-mobile .navigation-link:hover {\n  background-color: #e7e7e7;\n}\n\n.menu-mobile-text {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-break: break-all;\n  -webkit-user-select: none;\n}\n\n.header {\n  background: #4285f4;\n  height: 56px;\n  left: 0;\n  position: fixed;\n  right: 0;\n  z-index: 50;\n  color: #fff;\n}\n\n.header [class*=\" i-\"]:before,\n.header [class^=i-]:before {\n  font-size: 1.5rem;\n}\n\n.header-btn {\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px !important;\n  border-radius: 50%;\n}\n\n.header-btn:hover {\n  background: rgba(0, 0, 0, 0.12);\n}\n\n.header .menu-open {\n  margin-left: -0.625rem;\n  margin-right: 0.5rem;\n}\n\n.header .search-open {\n  margin-right: -.625rem;\n}\n\n.header a {\n  height: 56px;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  color: inherit;\n}\n\n.header-wrap {\n  height: 56px;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding-left: 0.9375rem;\n  padding-right: 0.9375rem;\n  position: relative;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  margin: 0 auto;\n  max-width: 1400px;\n}\n\n.header-topbar:not(.toolbar-shadow) {\n  background-color: transparent !important;\n}\n\n.header-logo span {\n  font-size: 1.25rem;\n  font-weight: 500;\n}\n\n.header-logo img {\n  max-height: 35px;\n  position: relative;\n}\n\n/* Navigation\n========================================================================== */\n\n.header-navigation {\n  margin-left: 48px;\n  display: inline-block;\n  -webkit-flex: 1 1 auto;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  overflow-y: auto;\n  vertical-align: top;\n  transition: margin .2s,width .2s,-webkit-flex .2s;\n  transition: flex .2s,margin .2s,width .2s;\n  transition: flex .2s,margin .2s,width .2s,-webkit-flex .2s,-ms-flex .2s;\n}\n\n.header-navigation-wrap {\n  left: 0px;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.header-navigation .navigation-link {\n  border-bottom: 2px solid transparent;\n  font-weight: 400;\n  margin: 0;\n  padding: 0 1rem;\n  transition: color .2s;\n  font-size: 0.875rem;\n}\n\n.header-navigation .navigation-link:hover {\n  color: rgba(255, 255, 255, 0.8);\n}\n\n.header-navigation .navigation-link.active {\n  border-bottom-color: #fff;\n  font-weight: 500;\n}\n\n/* Header search\n========================================================================== */\n\n.header-search {\n  background: #f7f7f7;\n  border-radius: 2px;\n  display: inline-block;\n  -webkit-flex: 0 0 auto;\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  height: 36px;\n  position: relative;\n  text-align: left;\n  transition: background .2s,-webkit-flex .2s;\n  transition: background .2s,flex .2s;\n  transition: background .2s,flex .2s,-webkit-flex .2s,-ms-flex .2s;\n  vertical-align: top;\n  box-shadow: 0 1px 1.5px rgba(0, 0, 0, 0.06), 0 1px 1px rgba(0, 0, 0, 0.12);\n}\n\n.header-search.has-focus {\n  background: #f7f7f7;\n  max-width: 100%;\n}\n\n.header-search.has-focus:hover {\n  background: #f7f7f7;\n}\n\n.header-search.has-focus input {\n  color: #212121 !important;\n}\n\n.header-search.has-focus .search-icon {\n  color: #757575;\n}\n\n.header-search .search-icon {\n  color: #757575;\n  left: 24px;\n  position: absolute;\n  top: 6px;\n  transition: color .2s;\n}\n\ninput.search-field {\n  background: 0;\n  border: 0;\n  color: #212121;\n  height: 36px;\n  padding: 8px 8px 8px 72px;\n  transition: color .2s;\n  width: 100%;\n}\n\ninput.search-field:focus {\n  border: 0;\n  outline: none;\n}\n\n/* header social\n========================================================================== */\n\n.header-social {\n  -webkit-flex: 0 0 auto;\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.header-social a {\n  padding: 0 8px;\n}\n\n.header-social a:hover {\n  color: rgba(255, 255, 255, 0.8);\n}\n\n.header-social a:before {\n  font-size: 1.25rem !important;\n}\n\n/* mediaquery medium\n========================================================================== */\n\n@media only screen and (min-width: 766px) {\n  .header-navigation {\n    -webkit-flex: 0 0 auto;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    margin: 0;\n    visibility: hidden;\n    width: 0;\n  }\n\n  .header-search {\n    -webkit-flex: 1 0 auto;\n    -ms-flex: 1 0 auto;\n    flex: 1 0 auto;\n    margin: 6px 24px;\n  }\n}\n\n@media only screen and (max-width: 766px) {\n  .header.search-open-form .header-logo,\n  .header.search-open-form .header-navigation,\n  .header.search-open-form #search-open {\n    display: none;\n  }\n\n  .header.search-open-form #search-close {\n    display: inherit !important;\n  }\n\n  .header.search-open-form .header-search {\n    display: inline-block !important;\n    -webkit-flex: 1 0 auto;\n    -ms-flex: 1 0 auto;\n    flex: 1 0 auto;\n  }\n}\n\n/* mediaquery large\n========================================================================== */\n\n@media only screen and (min-width: 766px) {\n  .header-navigation {\n    -webkit-flex: 1 1 0;\n    -ms-flex: 1 1 0;\n    flex: 1 1 0;\n    visibility: visible;\n    margin-left: 48px;\n  }\n\n  .header-search {\n    background: rgba(255, 255, 255, 0.25);\n    max-width: 200px;\n    color: #fff;\n  }\n\n  .header-search:hover {\n    background: rgba(255, 255, 255, 0.4);\n  }\n\n  .header-search input[placeholder],\n  .header-search .search-icon {\n    color: #fff;\n  }\n}\n\n.cover {\n  background: #4285f4;\n  color: #fff;\n  letter-spacing: .2px;\n  height: 65vh;\n  position: relative;\n  text-shadow: 0 0 10px rgba(0, 0, 0, 0.33);\n  z-index: 2;\n}\n\n.cover.full-height {\n  height: 100vh;\n}\n\n.cover-wrap {\n  margin: 0 auto;\n  max-width: 700px;\n  padding: 16px;\n  position: relative;\n  text-align: center;\n  z-index: 99;\n}\n\n.cover-title {\n  font-size: 3rem;\n  margin: 0 0 30px 0;\n  line-height: 1.2;\n}\n\n.cover .mouse {\n  width: 25px;\n  position: absolute;\n  height: 36px;\n  border-radius: 15px;\n  border: 2px solid #888;\n  border: 2px solid rgba(255, 255, 255, 0.27);\n  bottom: 40px;\n  right: 40px;\n  margin-left: -12px;\n  cursor: pointer;\n  transition: border-color 0.2s ease-in;\n}\n\n.cover .mouse .scroll {\n  display: block;\n  margin: 6px auto;\n  width: 3px;\n  height: 6px;\n  border-radius: 4px;\n  background: #b0b1b1;\n  -webkit-animation-duration: 2s;\n  animation-duration: 2s;\n  -webkit-animation-name: scroll;\n  animation-name: scroll;\n  -webkit-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n}\n\n.cover .background {\n  position: absolute;\n  overflow: hidden;\n  background-size: cover;\n  background-position: center;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n\n.cover .background:before {\n  display: block;\n  content: ' ';\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.6);\n  background: -webkit-gradient(linear, left top, left bottom, from(rgba(0, 0, 0, 0.1)), to(rgba(0, 0, 0, 0.7)));\n}\n\n.author .info {\n  overflow: hidden;\n  margin-top: 10%;\n}\n\n.author .name-wrap {\n  display: inline-block;\n}\n\n.author .title {\n  display: block;\n  text-transform: uppercase;\n}\n\n.author .name {\n  margin: 5px 0;\n  font-size: 1.75rem;\n}\n\n.author .description {\n  margin: 1.5rem 0;\n  line-height: 1.8;\n  font-size: 18px;\n}\n\n.author .avatar {\n  display: inline-block;\n  border-radius: 90px;\n  margin-right: 5%;\n  width: 80px;\n  height: 80px;\n  background-size: cover;\n  background-position: center;\n  vertical-align: bottom;\n}\n\n.author-meta {\n  overflow: hidden;\n  display: inline-block;\n  margin-bottom: 2.5rem;\n  margin-top: 1rem;\n  text-align: center;\n  padding: 0;\n}\n\n.author-meta span {\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0 10px;\n}\n\n.author-meta a {\n  color: inherit;\n  background: transparent;\n}\n\n@media only screen and (min-width: 766px) {\n  .cover-description {\n    font-size: 1.25rem;\n  }\n}\n\n.entries {\n  margin-bottom: 1.5rem;\n  padding-bottom: 0;\n  border-bottom: solid 1px #EEE;\n}\n\n.entries .image {\n  margin-bottom: 10px;\n}\n\n.entries .image-link {\n  line-height: 0;\n  display: block;\n  margin: 0;\n  overflow: hidden;\n}\n\n.entries .image img {\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  height: auto;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.entries .tag {\n  margin-bottom: 5px;\n  text-transform: capitalize;\n  font-size: 0.875rem;\n  line-height: 1;\n}\n\n.entries .tag a:hover {\n  color: #1165f0;\n}\n\n.entries .title {\n  font-size: 1.25rem;\n  color: #000;\n  margin: 0 0 1rem;\n  padding: 0;\n  height: auto;\n  line-height: 1.3;\n  font-weight: 400;\n}\n\n.entries .title:hover {\n  color: #777;\n}\n\n.entries .meta-author-date {\n  margin-top: 0;\n  margin-bottom: 1.125rem;\n}\n\n.entries-bg {\n  display: block;\n  width: 100%;\n  position: relative;\n  height: 100%;\n  background-position: center;\n  background-size: cover;\n}\n\n@media only screen and (min-width: 992px) {\n  .entries {\n    margin-bottom: 2rem;\n    padding-bottom: 2rem;\n  }\n\n  .entries .title {\n    font-size: 1.625rem;\n  }\n\n  .entries .image {\n    margin-bottom: 0;\n  }\n\n  .entries .image-link {\n    height: 180px;\n  }\n}\n\n@media only screen and (min-width: 1230px) {\n  .entries .image-link {\n    height: 250px;\n  }\n}\n\n.footer {\n  background: #253238;\n  color: #fff;\n}\n\n.footer a {\n  color: #fff;\n  opacity: .90;\n}\n\n.footer-wrap {\n  padding: 10px 16px;\n  color: #A2AAAD;\n  text-align: center;\n}\n\n.footer-wrap .copy,\n.footer-wrap .by {\n  margin: 10px 0;\n}\n\n.footer-wrap .copy span,\n.footer-wrap .by span {\n  display: inline-block;\n  line-height: 1;\n  vertical-align: middle;\n}\n\n@media only screen and (min-width: 640px) {\n  .footer-wrap {\n    padding-left: 30px;\n    padding-right: 30px;\n    text-align: left;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n  }\n\n  .footer-wrap .by {\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n    -ms-flex-pack: flex-end;\n    -webkit-justify-content: flex-end;\n    justify-content: flex-end;\n    -webkit-flex: 1 0 auto;\n    -ms-flex: 1 0 auto;\n    flex: 1 0 auto;\n  }\n}\n\n.btn {\n  border-radius: 2px;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.12);\n  display: inline-block;\n  color: #333;\n  background-color: #eee;\n  vertical-align: top;\n  font-family: \"Roboto\", sans-serif;\n  font-size: 0.875rem;\n  font-weight: 500;\n  outline: 0;\n  padding: 10px;\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  text-transform: uppercase;\n  z-index: 2;\n  line-height: 1;\n  border: none;\n  min-width: 36px;\n  cursor: pointer;\n}\n\n.btn:hover {\n  background: rgba(0, 0, 0, 0.12);\n}\n\n.btn.btn-primary {\n  background: #4285f4;\n  border-color: #4285f4;\n  color: #fff;\n}\n\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n\n.form-control {\n  width: 100%;\n  height: 34px;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857;\n  color: #555;\n  background-color: #fff;\n  background-image: none;\n  border: 1px solid #ccc;\n  border-radius: 0px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s;\n  display: table-cell;\n}\n\n.form-control:focus {\n  border-color: #4285f4;\n  outline: 0;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(66, 133, 244, 0.6);\n}\n\n.input-group-btn {\n  width: 1%;\n  white-space: nowrap;\n  vertical-align: middle;\n  display: table-cell;\n}\n\n.input-group-btn .btn {\n  border-radius: 0;\n}\n\n/*  Post\n========================================================================== */\n\n.post .title {\n  margin: 0 0 0.625rem;\n  font-size: 1.75rem;\n  line-height: 1.2;\n  padding: 0;\n  height: auto;\n}\n\n.post-image {\n  margin-bottom: 1.45rem;\n  overflow: hidden;\n}\n\n.post-content {\n  color: rgba(35, 37, 40, 0.8);\n}\n\n.post-content h2 {\n  border-bottom: 1px solid #ebebeb;\n  font-weight: 300;\n  margin: 2.50rem 0 1.25rem;\n  padding-bottom: 3px;\n}\n\n.post-content h3,\n.post-content h4 {\n  margin: 32px 0 16px;\n}\n\n.post .tags {\n  margin: 1.25rem 0;\n}\n\n.post .tags .tag {\n  margin: 0 10px 10px 0;\n  text-transform: capitalize;\n}\n\n.post .comments {\n  margin: 0 0 1.5rem;\n}\n\n/* Meta (autor -date - 1 tag - comments count)\n========================================================================== */\n\n.meta {\n  margin-bottom: 1rem;\n  line-height: 1;\n}\n\n.meta-author-date {\n  font-size: 0.875rem;\n  color: #999;\n  margin: 10px 0 5px;\n}\n\n.meta-author-date a {\n  color: inherit;\n}\n\n.meta-author-date .author-name a,\n.meta-author-date .tag a {\n  color: #333;\n}\n\n.meta-author-date .author-name a:hover {\n  color: #777;\n}\n\n.meta-author-date .point {\n  margin: 0 2px;\n  display: inline-block;\n}\n\n/* Social Share\n========================================================================== */\n\n.social-share {\n  padding: 5px 0;\n  font-size: 0.875rem;\n}\n\n.social-share .share-count {\n  text-align: center;\n  color: #000;\n  margin-right: 5px;\n}\n\n.social-share .share {\n  display: inline-block;\n  vertical-align: middle;\n  padding: 5px;\n  font-size: 1.125rem;\n  cursor: pointer;\n}\n\n.social-share .share:hover {\n  opacity: .7;\n}\n\n.social-share .btn {\n  margin-right: 3px;\n  padding: 8px 10px;\n  border-radius: 0;\n  color: #fff;\n}\n\n/* bottom share and bottom subscribe\n========================================================================== */\n\n.share-subscribe p {\n  color: #7d7d7d;\n  margin-bottom: 1rem;\n  line-height: 1;\n  font-size: 0.875rem;\n}\n\n.share-subscribe .social-share {\n  float: none !important;\n}\n\n.share-subscribe > div {\n  position: relative;\n  overflow: hidden;\n  margin-bottom: 15px;\n}\n\n.share-subscribe > div:before {\n  content: \" \";\n  border-top: solid 1px #000;\n  position: absolute;\n  top: 0;\n  left: 15px;\n  width: 40px;\n  height: 1px;\n}\n\n.share-subscribe > div h5 {\n  color: #666;\n  font-size: 0.875rem;\n  margin: 1rem 0;\n  line-height: 1;\n  text-transform: uppercase;\n}\n\n.share-subscribe .newsletter-form {\n  max-width: 300px;\n}\n\n/* Media Query (medium)\n========================================================================== */\n\n@media only screen and (min-width: 766px) {\n  .post .title {\n    font-size: 2.25rem;\n    margin: 0 0 1rem;\n  }\n\n  .post .meta-author-date {\n    float: left;\n    margin-top: 12px;\n  }\n\n  .post .social-share {\n    float: right;\n  }\n\n  .post-content {\n    font-size: 1.2rem;\n  }\n\n  .post-content p {\n    margin-bottom: 1.5rem;\n    line-height: 35px;\n  }\n}\n\n/* Media Query (large)\n========================================================================== */\n\n@media only screen and (min-width: 992px) {\n  .post .meta-author-date {\n    float: left;\n    margin-top: 12px;\n  }\n\n  .post .meta-share {\n    float: right;\n  }\n}\n\n.animated {\n  -webkit-animation-duration: 1s;\n  -moz-animation-duration: 1s;\n  -ms-animation-duration: 1s;\n  -o-animation-duration: 1s;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n}\n\n.animated.infinite {\n  -webkit-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n}\n\n.bounceIn {\n  -webkit-animation-name: bounceIn;\n  animation-name: bounceIn;\n}\n\n.bounceInDown {\n  -webkit-animation-name: bounceInDown;\n  animation-name: bounceInDown;\n}\n\n@-webkit-keyframes bounceIn {\n  0%, 20%, 40%, 60%, 80%, 100% {\n    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(0.3, 0.3, 0.3);\n    transform: scale3d(0.3, 0.3, 0.3);\n  }\n\n  20% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1);\n    transform: scale3d(1.1, 1.1, 1.1);\n  }\n\n  40% {\n    -webkit-transform: scale3d(0.9, 0.9, 0.9);\n    transform: scale3d(0.9, 0.9, 0.9);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(1.03, 1.03, 1.03);\n    transform: scale3d(1.03, 1.03, 1.03);\n  }\n\n  80% {\n    -webkit-transform: scale3d(0.97, 0.97, 0.97);\n    transform: scale3d(0.97, 0.97, 0.97);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@keyframes bounceIn {\n  0%, 20%, 40%, 60%, 80%, 100% {\n    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(0.3, 0.3, 0.3);\n    transform: scale3d(0.3, 0.3, 0.3);\n  }\n\n  20% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1);\n    transform: scale3d(1.1, 1.1, 1.1);\n  }\n\n  40% {\n    -webkit-transform: scale3d(0.9, 0.9, 0.9);\n    transform: scale3d(0.9, 0.9, 0.9);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(1.03, 1.03, 1.03);\n    transform: scale3d(1.03, 1.03, 1.03);\n  }\n\n  80% {\n    -webkit-transform: scale3d(0.97, 0.97, 0.97);\n    transform: scale3d(0.97, 0.97, 0.97);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@-webkit-keyframes bounceInDown {\n  0%, 60%, 75%, 90%, 100% {\n    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -3000px, 0);\n    transform: translate3d(0, -3000px, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 25px, 0);\n    transform: translate3d(0, 25px, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(0, -10px, 0);\n    transform: translate3d(0, -10px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0, 5px, 0);\n    transform: translate3d(0, 5px, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes bounceInDown {\n  0%, 60%, 75%, 90%, 100% {\n    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -3000px, 0);\n    transform: translate3d(0, -3000px, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 25px, 0);\n    transform: translate3d(0, 25px, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(0, -10px, 0);\n    transform: translate3d(0, -10px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0, 5px, 0);\n    transform: translate3d(0, 5px, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@-webkit-keyframes pulse {\n  from {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  50% {\n    -webkit-transform: scale3d(1.05, 1.05, 1.05);\n    transform: scale3d(1.05, 1.05, 1.05);\n  }\n\n  to {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@keyframes pulse {\n  from {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  50% {\n    -webkit-transform: scale3d(1.05, 1.05, 1.05);\n    transform: scale3d(1.05, 1.05, 1.05);\n  }\n\n  to {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@-webkit-keyframes scroll {\n  0% {\n    opacity: 0;\n  }\n\n  10% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    transform: translateY(0px);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(10px);\n    transform: translateY(10px);\n  }\n}\n\n@keyframes scroll {\n  0% {\n    opacity: 0;\n  }\n\n  10% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    transform: translateY(0px);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(10px);\n    transform: translateY(10px);\n  }\n}", ""]);
	
	// exports


/***/ },
/* 7 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(7)();
	// imports
	
	
	// module
	exports.push([module.id, "/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */\n\n/**\n * 1. Change the default font family in all browsers (opinionated).\n * 2. Prevent adjustments of font size after orientation changes in IE and iOS.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  -ms-text-size-adjust: 100%; /* 2 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/**\n * Remove the margin in all browsers (opinionated).\n */\n\nbody {\n  margin: 0;\n}\n\n/* HTML5 display definitions\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 9-.\n * 1. Add the correct display in Edge, IE, and Firefox.\n * 2. Add the correct display in IE.\n */\n\narticle,\naside,\ndetails, /* 1 */\nfigcaption,\nfigure,\nfooter,\nheader,\nmain, /* 2 */\nmenu,\nnav,\nsection,\nsummary { /* 1 */\n  display: block;\n}\n\n/**\n * Add the correct display in IE 9-.\n */\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n}\n\n/**\n * Add the correct display in iOS 4-7.\n */\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Add the correct display in IE 10-.\n * 1. Add the correct display in IE.\n */\n\ntemplate, /* 1 */\n[hidden] {\n  display: none;\n}\n\n/* Links\n   ========================================================================== */\n\n/**\n * 1. Remove the gray background on active links in IE 10.\n * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.\n */\n\na {\n  background-color: transparent; /* 1 */\n  -webkit-text-decoration-skip: objects; /* 2 */\n}\n\n/**\n * Remove the outline on focused links when they are also active or hovered\n * in all browsers (opinionated).\n */\n\na:active,\na:hover {\n  outline-width: 0;\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * 1. Remove the bottom border in Firefox 39-.\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Prevent the duplicate application of `bolder` by the next rule in Safari 6.\n */\n\nb,\nstrong {\n  font-weight: inherit;\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * Add the correct font style in Android 4.3-.\n */\n\ndfn {\n  font-style: italic;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/**\n * Add the correct background and color in IE 9-.\n */\n\nmark {\n  background-color: #ff0;\n  color: #000;\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10-.\n */\n\nimg {\n  border-style: none;\n}\n\n/**\n * Hide the overflow in IE.\n */\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct margin in IE 8.\n */\n\nfigure {\n  margin: 1em 40px;\n}\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change font properties to `inherit` in all browsers (opinionated).\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\nselect,\ntextarea {\n  font: inherit; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Restore the font weight unset by the previous rule.\n */\n\noptgroup {\n  font-weight: bold;\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\n *    controls in Android 4.\n * 2. Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\nhtml [type=\"button\"], /* 1 */\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button; /* 2 */\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Change the border, margin, and padding in all browsers (opinionated).\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Remove the default vertical scrollbar in IE.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10-.\n * 2. Remove the padding in IE 10-.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.\n */\n\n[type=\"search\"]::-webkit-search-cancel-button,\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * Correct the text style of placeholders in Chrome, Edge, and Safari.\n */\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.54;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n", ""]);
	
	// exports


/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = "data:application/x-font-ttf;base64,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"

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = "data:application/font-woff;base64,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"

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "38b0f724b87ca57d9dd0dc2e5fd8aec7.svg";

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNmQ2ZWY4OGNlNjE4MTEzZmUzMDUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbGliL3plcHRvLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9saWIvcHJpc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC9hcHAuc2hhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC9hcHAuc2hhcmUtY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3MvbWFpbi5zY3NzPzYwMDAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3MvbWFpbi5zY3NzIiwid2VicGFjazovLy8uL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9ub3JtYWxpemUuY3NzL25vcm1hbGl6ZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2ZvbnRzL21hcGFjaGUudHRmIiwid2VicGFjazovLy8uL2Fzc2V0cy9mb250cy9tYXBhY2hlLndvZmYiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2ZvbnRzL21hcGFjaGUuc3ZnIiwid2VicGFjazovLy8uL34vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDZkE7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFLQSxLQUFNLGFBQWtCLEVBQUUsU0FBRixDQUF4QjtLQUNJLFdBQW9CLEVBQUUsY0FBRixDQUR4QjtLQUVJLFlBQW9CLEVBQUUsUUFBRixD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3REFBdUQ7QUFDdkQ7O0FBRUEsOEJBQTZCLG1CQUFtQjs7QUFFaEQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6ImJ1bmRsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIDZkNmVmODhjZTYxODExM2ZlMzA1XG4gKiovIiwiLypcbkBwYWNrYWdlIGdvZG9mcmVkb25pbmphXG5cblx0PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdFx0TWFwYWNoZSBKYXZhc2NyaXB0IEZ1bmN0aW9uc1xuXHQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiovXG5cbi8qKlxuICogVGFibGUgb2YgQ29udGVudHM6XG4gKlxuICpcdFx0MS4gSW1wb3J0cyBsaWJyYXJpcyBhbmQgbW9kdWxlc1xuICogICAgICAyLiB2YXJpYWJsZXMgR2xvYmFsc1xuICogICAgICAzLiBGdW5jdGlvbnNcbiAqICAgICAgNC4gU2VhcmNoIGhlYWRlclxuICogICAgICA1LiBPcGVuYSBhbmQgY2xvc2UgbWVudSBtb2JpbGVcbiAqICAgICAgNi4gVmlkZW8gUmVzcG9uc2l2ZSB5b3V0dWJlIGFuZCB2aW1lb1xuICogICAgICA3LiBoZWFkZXIgdHJhbnNwYXJlbnRcbiAqL1xuXG5cbi8qIDEuIEltcG9ydHMgYW5kIGxpYnJhcmlzIGFuZCBtb2R1bGVzXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuaW1wb3J0IHplcHRvICAgICAgICBmcm9tIFwiLi9saWIvemVwdG8uanNcIjtcbi8vIGltcG9ydCAkICAgICAgICAgICAgZnJvbSBcImpxdWVyeVwiO1xuaW1wb3J0IHByaXNtICAgICAgICBmcm9tIFwiLi9saWIvcHJpc20uanNcIjtcbmltcG9ydCBHb2RvU2hhcmUgICAgZnJvbSAnLi9hcHAvYXBwLnNoYXJlJztcbmltcG9ydCBzaGFyZUNvdW50ICAgZnJvbSAnLi9hcHAvYXBwLnNoYXJlLWNvdW50JztcbmltcG9ydCAgICAgICAgICAgICAgJy4uL3Nhc3MvbWFpbi5zY3NzJztcblxuXG4vKiAyLiB2YXJpYWJsZXMgZ2xvYmFsc1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbmNvbnN0ICRnZF9oZWFkZXIgICAgICA9ICQoJyNoZWFkZXInKSxcbiAgICAkZ2RfbWVudSAgICAgICAgICA9ICQoJyNtZW51LW1vYmlsZScpLFxuICAgICRnZF9jb3ZlciAgICAgICAgID0gJCgnI2NvdmVyJyksXG4gICAgJGdkX3NlYXJjaCAgICAgICAgPSAkKCcjaGVhZGVyLXNlYXJjaCcpLFxuICAgICRzaWRlYmFyX2hpZGRlbiAgID0gJCgnLnNpZGViYXIgLmZpeGVkJyksXG4gICAgJGdkX3NlYXJjaF9pbnB1dCAgPSAkKCcuc2VhcmNoLWZpZWxkJyksXG4gICAgJGdkX3NoYXJlX2NvdW50ICAgPSAkKCcuc2hhcmUtY291bnQnKTtcblxudmFyIG92ZXJsYXkgPSB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbn07XG5cblxuLyogMy4gRnVuY3Rpb25zXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuJCgnI21lbnUtb3BlbicpLm9uKCdjbGljaycsIG1lbnVPcGVuKTtcbiQoJyNtZW51LWNsb3NlJykub24oJ2NsaWNrJywgbWVudUNsb3NlKTtcbiQoJy5zaGFyZScpLmJpbmQoJ2NsaWNrJywgU2hhcmUpO1xuJChkb2N1bWVudCkub24oJ21vdXNldXAnLCBtb3VzZVVwKTtcblxuXG4vKiA0LiBTZWFyY2ggb3BlbiBhbmQgY2xvc2Vcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4kKCcjc2VhcmNoLW9wZW4nKS5vbignY2xpY2snLCAoZSkgID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgJGdkX2hlYWRlci5hZGRDbGFzcygnc2VhcmNoLW9wZW4tZm9ybScpO1xufSk7XG5cbiQoJyNzZWFyY2gtY2xvc2UnKS5vbignY2xpY2snLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAkZ2RfaGVhZGVyLnJlbW92ZUNsYXNzKCdzZWFyY2gtb3Blbi1mb3JtJyk7XG59KTtcblxuXG4kZ2Rfc2VhcmNoX2lucHV0XG4gICAgLmZvY3VzKCAoKSA9PiB7XG4gICAgICAgICRnZF9zZWFyY2guYWRkQ2xhc3MoJ2hhcy1mb2N1cycpO1xuICAgICAgICAkKCcuaGVhZGVyLW5hdmlnYXRpb24nKS5jc3Moe2Rpc3BsYXk6J25vbmUnfSk7XG4gICAgfSlcbiAgICAuYmx1ciggKCkgPT4ge1xuICAgICAgICAkZ2Rfc2VhcmNoLnJlbW92ZUNsYXNzKCdoYXMtZm9jdXMnKTtcbiAgICAgICAgJCgnLmhlYWRlci1uYXZpZ2F0aW9uJykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICB9KTtcblxuXG4vKiA1LiBNZW51IE1vYmlsZSBvcGVuIGFuZCBjbG9zZVxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbmZ1bmN0aW9uIG1lbnVPcGVuKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgJCgnaHRtbCcpLmF0dHIoJ2dvZG8tc3RhdGUnLCduby1zY3JvbGwnKTtcbiAgICAkKCcub3ZlcmxheScpLmNzcyhvdmVybGF5KTtcbiAgICAkZ2RfbWVudS5hZGRDbGFzcygnb3BlbicpO1xufVxuXG5mdW5jdGlvbiBtZW51Q2xvc2UoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAkKCdodG1sJykucmVtb3ZlQXR0cignZ29kby1zdGF0ZScpXG4gICAgJCgnLm92ZXJsYXknKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICRnZF9tZW51LnJlbW92ZUNsYXNzKCdvcGVuJyk7XG59XG5cblxuLyogNi4gVmlkZW8gUmVzcG9uc2l2ZSB5b3V0dWJlIGFuZCB2aW1lb1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbiQoJy5wb3N0LWNvbnRlbnQnKS5lYWNoKCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZWN0b3JzID0gW1xuICAgICAgICAnaWZyYW1lW3NyYyo9XCJwbGF5ZXIudmltZW8uY29tXCJdJyxcbiAgICAgICAgJ2lmcmFtZVtzcmMqPVwieW91dHViZS5jb21cIl0nLFxuICAgICAgICAnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLW5vY29va2llLmNvbVwiXScsXG4gICAgICAgICdpZnJhbWVbc3JjKj1cImtpY2tzdGFydGVyLmNvbVwiXVtzcmMqPVwidmlkZW8uaHRtbFwiXScsXG4gICAgXTtcblxuICAgIHZhciAkYWxsVmlkZW9zID0gJCh0aGlzKS5maW5kKHNlbGVjdG9ycy5qb2luKCcsJykpO1xuXG4gICAgJGFsbFZpZGVvcy5lYWNoKCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQodGhpcykud3JhcCgnPGFzaWRlIGNsYXNzPVwidmlkZW8tcmVzcG9uc2l2ZVwiPjwvYXNpZGU+Jyk7XG4gICAgfSk7XG5cbn0pO1xuXG5cblxuLyogNy4gSGVhZGVyIGJveCBzaGFkb3cgYW5kIHRyYW5zcGFyZW50XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuaWYoJGdkX2NvdmVyLmxlbmd0aCA+IDApIHtcbiAgICAkZ2RfaGVhZGVyLmNzcyh7J2JhY2tncm91bmQnOid0cmFuc3BhcmVudCd9KTtcblxuICAgICQod2luZG93KS5zY3JvbGwoICgpID0+IHtcbiAgICAgICAgbGV0IHNjcm9sbFRvcCAgICAgICAgID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgICAgICBsZXQgZ2RfY292ZXJfaGVpZ2h0ICAgPSAkZ2RfY292ZXIuaGVpZ2h0KCkgLSAkZ2RfaGVhZGVyLmhlaWdodCgpO1xuICAgICAgICBsZXQgZ2RfY292ZXJfd3JhcCAgICAgPSAoIGdkX2NvdmVyX2hlaWdodCAtIHNjcm9sbFRvcCApIC8gZ2RfY292ZXJfaGVpZ2h0O1xuICAgICAgICBjb25zb2xlLmxvZyhnZF9jb3Zlcl93cmFwKTtcblxuICAgICAgICBpZiAoc2Nyb2xsVG9wID49IGdkX2NvdmVyX2hlaWdodCApIHtcbiAgICAgICAgICAgICRnZF9oZWFkZXJcbiAgICAgICAgICAgIC5hZGRDbGFzcygndG9vbGJhci1zaGFkb3cnKVxuICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICRnZF9oZWFkZXJcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygndG9vbGJhci1zaGFkb3cnKVxuICAgICAgICAgICAgLmNzcyh7J2JhY2tncm91bmQnOid0cmFuc3BhcmVudCd9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGdkX2NvdmVyX3dyYXAgPj0gMCl7XG4gICAgICAgICAgICAkKCcuY292ZXItd3JhcCcpLmNzcygnb3BhY2l0eScsIGdkX2NvdmVyX3dyYXApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbn1lbHNle1xuICAgICRnZF9oZWFkZXIuYWRkQ2xhc3MoJ3Rvb2xiYXItc2hhZG93Jyk7XG59XG5cblxuLyogOC4gU2hhcmUgc29jaWFsXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuZnVuY3Rpb24gU2hhcmUoZSkge1xuXHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdGxldCBzaGFyZSA9IG5ldyBHb2RvU2hhcmUoJCh0aGlzKSk7XG5cdHNoYXJlLmdvZG9TaGFyZSgpO1xufVxuXG4vKiA5LiBTaGFyZSBzb2NpYWwgY291bnRcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuaWYgKCRnZF9zaGFyZV9jb3VudC5sZW5ndGggPiAwKSB7XG4gICAgbGV0IHNoYXJlX2NvdW50ID0gbmV3IHNoYXJlQ291bnQoJGdkX3NoYXJlX2NvdW50KTtcbiAgICBzaGFyZV9jb3VudC5nb2RvQ291bnQoKTtcbn1cblxuLyogTW91c2UgdXBcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5mdW5jdGlvbiBtb3VzZVVwKGUpIHtcbiAgICBpZigkZ2RfbWVudS5oYXNDbGFzcygnb3BlbicpICYmICRnZF9tZW51LmhhcyhlLnRhcmdldCkubGVuZ3RoPT09MCl7XG4gICAgICAgIG1lbnVDbG9zZShlKTtcbiAgICB9O1xufVxuXG5cbi8vIHNpZGViYXIgaGlkZGVuIGFzaWRlXG4vLyBpZiAoJHNpZGViYXJfaGlkZGVuLmxlbmd0aCA+IDApIHtcbi8vICAgICB2YXIgbWVsYSAgPSAkc2lkZWJhcl9oaWRkZW4ub2Zmc2V0KCkudG9wO1xuLy8gICAgICQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24oKXtcbi8vICAgICAgICAgdmFyIHNjcm9sbFRvcCAgICAgICAgICAgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG4vL1xuLy8gICAgICAgICBpZiAoc2Nyb2xsVG9wID49IG1lbGEgLSA4MCkge1xuLy8gICAgICAgICAgICAgJHNpZGViYXJfaGlkZGVuLmNzcyh7J3Bvc2l0aW9uJzonZml4ZWQnLCd0b3AnOiAnODBweCcsICd3aWR0aCc6JzMwMHB4J30pO1xuLy8gICAgICAgICB9ZWxzZSB7XG4vLyAgICAgICAgICAgICAkc2lkZWJhcl9oaWRkZW4ucmVtb3ZlQXR0cignc3R5bGUnKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH0pO1xuLy8gfVxuXG5cblxuLy8gUGx1Z2luc1xuXG4vLyAgU2VhcmNoIHJlc3VsdHMgZ2hvc3RIdW50ZXJcbi8vICRnZF9zZWFyY2hfaW5wdXQuZ2hvc3RIdW50ZXIoe1xuLy8gICByZXN1bHRzOiAnI3NlYXJjaC1yZXN1bHQnLFxuLy8gICB6ZXJvUmVzdWx0c0luZm8gICA6IGZhbHNlLFxuLy8gICBkaXNwbGF5U2VhcmNoSW5mbyA6IGZhbHNlLFxuLy8gICByZXN1bHRfdGVtcGxhdGUgICA6ICc8YSBocmVmPXt7bGlua319XCI+e3t0aXRsZX19PC9hPicsXG4vLyAgIG9uS2V5VXAgICAgICAgICAgIDogdHJ1ZSxcbi8vICAgcnNzICAgICAgICAgICAgICAgOiBcIi9yc3NcIlxuLy8gfSk7XG5cbi8vIGxhenkgbG9hZCBpbWdcbi8vIHZhciBteUxhenlMb2FkID0gbmV3IExhenlMb2FkKCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qcy9hcHAuanNcbiAqKi8iLCIvKiBaZXB0byB2MS4xLjYgLSB6ZXB0byBldmVudCBhamF4IGZvcm0gaWUgLSB6ZXB0b2pzLmNvbS9saWNlbnNlICovXG5cbnZhciBaZXB0byA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVuZGVmaW5lZCwga2V5LCAkLCBjbGFzc0xpc3QsIGVtcHR5QXJyYXkgPSBbXSwgc2xpY2UgPSBlbXB0eUFycmF5LnNsaWNlLCBmaWx0ZXIgPSBlbXB0eUFycmF5LmZpbHRlcixcbiAgICBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcbiAgICBlbGVtZW50RGlzcGxheSA9IHt9LCBjbGFzc0NhY2hlID0ge30sXG4gICAgY3NzTnVtYmVyID0geyAnY29sdW1uLWNvdW50JzogMSwgJ2NvbHVtbnMnOiAxLCAnZm9udC13ZWlnaHQnOiAxLCAnbGluZS1oZWlnaHQnOiAxLCdvcGFjaXR5JzogMSwgJ3otaW5kZXgnOiAxLCAnem9vbSc6IDEgfSxcbiAgICBmcmFnbWVudFJFID0gL15cXHMqPChcXHcrfCEpW14+XSo+LyxcbiAgICBzaW5nbGVUYWdSRSA9IC9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyxcbiAgICB0YWdFeHBhbmRlclJFID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2lnLFxuICAgIHJvb3ROb2RlUkUgPSAvXig/OmJvZHl8aHRtbCkkL2ksXG4gICAgY2FwaXRhbFJFID0gLyhbQS1aXSkvZyxcblxuICAgIC8vIHNwZWNpYWwgYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSBnZXQvc2V0IHZpYSBtZXRob2QgY2FsbHNcbiAgICBtZXRob2RBdHRyaWJ1dGVzID0gWyd2YWwnLCAnY3NzJywgJ2h0bWwnLCAndGV4dCcsICdkYXRhJywgJ3dpZHRoJywgJ2hlaWdodCcsICdvZmZzZXQnXSxcblxuICAgIGFkamFjZW5jeU9wZXJhdG9ycyA9IFsgJ2FmdGVyJywgJ3ByZXBlbmQnLCAnYmVmb3JlJywgJ2FwcGVuZCcgXSxcbiAgICB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyksXG4gICAgdGFibGVSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpLFxuICAgIGNvbnRhaW5lcnMgPSB7XG4gICAgICAndHInOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpLFxuICAgICAgJ3Rib2R5JzogdGFibGUsICd0aGVhZCc6IHRhYmxlLCAndGZvb3QnOiB0YWJsZSxcbiAgICAgICd0ZCc6IHRhYmxlUm93LCAndGgnOiB0YWJsZVJvdyxcbiAgICAgICcqJzogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9LFxuICAgIHJlYWR5UkUgPSAvY29tcGxldGV8bG9hZGVkfGludGVyYWN0aXZlLyxcbiAgICBzaW1wbGVTZWxlY3RvclJFID0gL15bXFx3LV0qJC8sXG4gICAgY2xhc3MydHlwZSA9IHt9LFxuICAgIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZyxcbiAgICB6ZXB0byA9IHt9LFxuICAgIGNhbWVsaXplLCB1bmlxLFxuICAgIHRlbXBQYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICBwcm9wTWFwID0ge1xuICAgICAgJ3RhYmluZGV4JzogJ3RhYkluZGV4JyxcbiAgICAgICdyZWFkb25seSc6ICdyZWFkT25seScsXG4gICAgICAnZm9yJzogJ2h0bWxGb3InLFxuICAgICAgJ2NsYXNzJzogJ2NsYXNzTmFtZScsXG4gICAgICAnbWF4bGVuZ3RoJzogJ21heExlbmd0aCcsXG4gICAgICAnY2VsbHNwYWNpbmcnOiAnY2VsbFNwYWNpbmcnLFxuICAgICAgJ2NlbGxwYWRkaW5nJzogJ2NlbGxQYWRkaW5nJyxcbiAgICAgICdyb3dzcGFuJzogJ3Jvd1NwYW4nLFxuICAgICAgJ2NvbHNwYW4nOiAnY29sU3BhbicsXG4gICAgICAndXNlbWFwJzogJ3VzZU1hcCcsXG4gICAgICAnZnJhbWVib3JkZXInOiAnZnJhbWVCb3JkZXInLFxuICAgICAgJ2NvbnRlbnRlZGl0YWJsZSc6ICdjb250ZW50RWRpdGFibGUnXG4gICAgfSxcbiAgICBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fFxuICAgICAgZnVuY3Rpb24ob2JqZWN0KXsgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIEFycmF5IH1cblxuICB6ZXB0by5tYXRjaGVzID0gZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBpZiAoIXNlbGVjdG9yIHx8ICFlbGVtZW50IHx8IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHJldHVybiBmYWxzZVxuICAgIHZhciBtYXRjaGVzU2VsZWN0b3IgPSBlbGVtZW50LndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBlbGVtZW50Lm1vek1hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9NYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudC5tYXRjaGVzU2VsZWN0b3JcbiAgICBpZiAobWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gbWF0Y2hlc1NlbGVjdG9yLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpXG4gICAgLy8gZmFsbCBiYWNrIHRvIHBlcmZvcm1pbmcgYSBzZWxlY3RvcjpcbiAgICB2YXIgbWF0Y2gsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSwgdGVtcCA9ICFwYXJlbnRcbiAgICBpZiAodGVtcCkgKHBhcmVudCA9IHRlbXBQYXJlbnQpLmFwcGVuZENoaWxkKGVsZW1lbnQpXG4gICAgbWF0Y2ggPSB+emVwdG8ucXNhKHBhcmVudCwgc2VsZWN0b3IpLmluZGV4T2YoZWxlbWVudClcbiAgICB0ZW1wICYmIHRlbXBQYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudClcbiAgICByZXR1cm4gbWF0Y2hcbiAgfVxuXG4gIGZ1bmN0aW9uIHR5cGUob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PSBudWxsID8gU3RyaW5nKG9iaikgOlxuICAgICAgY2xhc3MydHlwZVt0b1N0cmluZy5jYWxsKG9iaildIHx8IFwib2JqZWN0XCJcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHR5cGUodmFsdWUpID09IFwiZnVuY3Rpb25cIiB9XG4gIGZ1bmN0aW9uIGlzV2luZG93KG9iaikgICAgIHsgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PSBvYmoud2luZG93IH1cbiAgZnVuY3Rpb24gaXNEb2N1bWVudChvYmopICAgeyByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqLm5vZGVUeXBlID09IG9iai5ET0NVTUVOVF9OT0RFIH1cbiAgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSAgICAgeyByZXR1cm4gdHlwZShvYmopID09IFwib2JqZWN0XCIgfVxuICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICAgIHJldHVybiBpc09iamVjdChvYmopICYmICFpc1dpbmRvdyhvYmopICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09IE9iamVjdC5wcm90b3R5cGVcbiAgfVxuICBmdW5jdGlvbiBsaWtlQXJyYXkob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJyB9XG5cbiAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkgeyByZXR1cm4gZmlsdGVyLmNhbGwoYXJyYXksIGZ1bmN0aW9uKGl0ZW0peyByZXR1cm4gaXRlbSAhPSBudWxsIH0pIH1cbiAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkgeyByZXR1cm4gYXJyYXkubGVuZ3RoID4gMCA/ICQuZm4uY29uY2F0LmFwcGx5KFtdLCBhcnJheSkgOiBhcnJheSB9XG4gIGNhbWVsaXplID0gZnVuY3Rpb24oc3RyKXsgcmV0dXJuIHN0ci5yZXBsYWNlKC8tKyguKT8vZywgZnVuY3Rpb24obWF0Y2gsIGNocil7IHJldHVybiBjaHIgPyBjaHIudG9VcHBlckNhc2UoKSA6ICcnIH0pIH1cbiAgZnVuY3Rpb24gZGFzaGVyaXplKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvOjovZywgJy8nKVxuICAgICAgICAgICAucmVwbGFjZSgvKFtBLVpdKykoW0EtWl1bYS16XSkvZywgJyQxXyQyJylcbiAgICAgICAgICAgLnJlcGxhY2UoLyhbYS16XFxkXSkoW0EtWl0pL2csICckMV8kMicpXG4gICAgICAgICAgIC5yZXBsYWNlKC9fL2csICctJylcbiAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgfVxuICB1bmlxID0gZnVuY3Rpb24oYXJyYXkpeyByZXR1cm4gZmlsdGVyLmNhbGwoYXJyYXksIGZ1bmN0aW9uKGl0ZW0sIGlkeCl7IHJldHVybiBhcnJheS5pbmRleE9mKGl0ZW0pID09IGlkeCB9KSB9XG5cbiAgZnVuY3Rpb24gY2xhc3NSRShuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgaW4gY2xhc3NDYWNoZSA/XG4gICAgICBjbGFzc0NhY2hlW25hbWVdIDogKGNsYXNzQ2FjaGVbbmFtZV0gPSBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgbmFtZSArICcoXFxcXHN8JCknKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlQWRkUHgobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiICYmICFjc3NOdW1iZXJbZGFzaGVyaXplKG5hbWUpXSkgPyB2YWx1ZSArIFwicHhcIiA6IHZhbHVlXG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RGlzcGxheShub2RlTmFtZSkge1xuICAgIHZhciBlbGVtZW50LCBkaXNwbGF5XG4gICAgaWYgKCFlbGVtZW50RGlzcGxheVtub2RlTmFtZV0pIHtcbiAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKVxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KVxuICAgICAgZGlzcGxheSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgJycpLmdldFByb3BlcnR5VmFsdWUoXCJkaXNwbGF5XCIpXG4gICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudClcbiAgICAgIGRpc3BsYXkgPT0gXCJub25lXCIgJiYgKGRpc3BsYXkgPSBcImJsb2NrXCIpXG4gICAgICBlbGVtZW50RGlzcGxheVtub2RlTmFtZV0gPSBkaXNwbGF5XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50RGlzcGxheVtub2RlTmFtZV1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoaWxkcmVuKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gJ2NoaWxkcmVuJyBpbiBlbGVtZW50ID9cbiAgICAgIHNsaWNlLmNhbGwoZWxlbWVudC5jaGlsZHJlbikgOlxuICAgICAgJC5tYXAoZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihub2RlKXsgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkgcmV0dXJuIG5vZGUgfSlcbiAgfVxuXG4gIC8vIGAkLnplcHRvLmZyYWdtZW50YCB0YWtlcyBhIGh0bWwgc3RyaW5nIGFuZCBhbiBvcHRpb25hbCB0YWcgbmFtZVxuICAvLyB0byBnZW5lcmF0ZSBET00gbm9kZXMgbm9kZXMgZnJvbSB0aGUgZ2l2ZW4gaHRtbCBzdHJpbmcuXG4gIC8vIFRoZSBnZW5lcmF0ZWQgRE9NIG5vZGVzIGFyZSByZXR1cm5lZCBhcyBhbiBhcnJheS5cbiAgLy8gVGhpcyBmdW5jdGlvbiBjYW4gYmUgb3ZlcnJpZGVuIGluIHBsdWdpbnMgZm9yIGV4YW1wbGUgdG8gbWFrZVxuICAvLyBpdCBjb21wYXRpYmxlIHdpdGggYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHRoZSBET00gZnVsbHkuXG4gIHplcHRvLmZyYWdtZW50ID0gZnVuY3Rpb24oaHRtbCwgbmFtZSwgcHJvcGVydGllcykge1xuICAgIHZhciBkb20sIG5vZGVzLCBjb250YWluZXJcblxuICAgIC8vIEEgc3BlY2lhbCBjYXNlIG9wdGltaXphdGlvbiBmb3IgYSBzaW5nbGUgdGFnXG4gICAgaWYgKHNpbmdsZVRhZ1JFLnRlc3QoaHRtbCkpIGRvbSA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChSZWdFeHAuJDEpKVxuXG4gICAgaWYgKCFkb20pIHtcbiAgICAgIGlmIChodG1sLnJlcGxhY2UpIGh0bWwgPSBodG1sLnJlcGxhY2UodGFnRXhwYW5kZXJSRSwgXCI8JDE+PC8kMj5cIilcbiAgICAgIGlmIChuYW1lID09PSB1bmRlZmluZWQpIG5hbWUgPSBmcmFnbWVudFJFLnRlc3QoaHRtbCkgJiYgUmVnRXhwLiQxXG4gICAgICBpZiAoIShuYW1lIGluIGNvbnRhaW5lcnMpKSBuYW1lID0gJyonXG5cbiAgICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lcnNbbmFtZV1cbiAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJyArIGh0bWxcbiAgICAgIGRvbSA9ICQuZWFjaChzbGljZS5jYWxsKGNvbnRhaW5lci5jaGlsZE5vZGVzKSwgZnVuY3Rpb24oKXtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChpc1BsYWluT2JqZWN0KHByb3BlcnRpZXMpKSB7XG4gICAgICBub2RlcyA9ICQoZG9tKVxuICAgICAgJC5lYWNoKHByb3BlcnRpZXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG1ldGhvZEF0dHJpYnV0ZXMuaW5kZXhPZihrZXkpID4gLTEpIG5vZGVzW2tleV0odmFsdWUpXG4gICAgICAgIGVsc2Ugbm9kZXMuYXR0cihrZXksIHZhbHVlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gZG9tXG4gIH1cblxuICAvLyBgJC56ZXB0by5aYCBzd2FwcyBvdXQgdGhlIHByb3RvdHlwZSBvZiB0aGUgZ2l2ZW4gYGRvbWAgYXJyYXlcbiAgLy8gb2Ygbm9kZXMgd2l0aCBgJC5mbmAgYW5kIHRodXMgc3VwcGx5aW5nIGFsbCB0aGUgWmVwdG8gZnVuY3Rpb25zXG4gIC8vIHRvIHRoZSBhcnJheS4gTm90ZSB0aGF0IGBfX3Byb3RvX19gIGlzIG5vdCBzdXBwb3J0ZWQgb24gSW50ZXJuZXRcbiAgLy8gRXhwbG9yZXIuIFRoaXMgbWV0aG9kIGNhbiBiZSBvdmVycmlkZW4gaW4gcGx1Z2lucy5cbiAgemVwdG8uWiA9IGZ1bmN0aW9uKGRvbSwgc2VsZWN0b3IpIHtcbiAgICBkb20gPSBkb20gfHwgW11cbiAgICBkb20uX19wcm90b19fID0gJC5mblxuICAgIGRvbS5zZWxlY3RvciA9IHNlbGVjdG9yIHx8ICcnXG4gICAgcmV0dXJuIGRvbVxuICB9XG5cbiAgLy8gYCQuemVwdG8uaXNaYCBzaG91bGQgcmV0dXJuIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgWmVwdG9cbiAgLy8gY29sbGVjdGlvbi4gVGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRlbiBpbiBwbHVnaW5zLlxuICB6ZXB0by5pc1ogPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgemVwdG8uWlxuICB9XG5cbiAgLy8gYCQuemVwdG8uaW5pdGAgaXMgWmVwdG8ncyBjb3VudGVycGFydCB0byBqUXVlcnkncyBgJC5mbi5pbml0YCBhbmRcbiAgLy8gdGFrZXMgYSBDU1Mgc2VsZWN0b3IgYW5kIGFuIG9wdGlvbmFsIGNvbnRleHQgKGFuZCBoYW5kbGVzIHZhcmlvdXNcbiAgLy8gc3BlY2lhbCBjYXNlcykuXG4gIC8vIFRoaXMgbWV0aG9kIGNhbiBiZSBvdmVycmlkZW4gaW4gcGx1Z2lucy5cbiAgemVwdG8uaW5pdCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIGRvbVxuICAgIC8vIElmIG5vdGhpbmcgZ2l2ZW4sIHJldHVybiBhbiBlbXB0eSBaZXB0byBjb2xsZWN0aW9uXG4gICAgaWYgKCFzZWxlY3RvcikgcmV0dXJuIHplcHRvLlooKVxuICAgIC8vIE9wdGltaXplIGZvciBzdHJpbmcgc2VsZWN0b3JzXG4gICAgZWxzZSBpZiAodHlwZW9mIHNlbGVjdG9yID09ICdzdHJpbmcnKSB7XG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnRyaW0oKVxuICAgICAgLy8gSWYgaXQncyBhIGh0bWwgZnJhZ21lbnQsIGNyZWF0ZSBub2RlcyBmcm9tIGl0XG4gICAgICAvLyBOb3RlOiBJbiBib3RoIENocm9tZSAyMSBhbmQgRmlyZWZveCAxNSwgRE9NIGVycm9yIDEyXG4gICAgICAvLyBpcyB0aHJvd24gaWYgdGhlIGZyYWdtZW50IGRvZXNuJ3QgYmVnaW4gd2l0aCA8XG4gICAgICBpZiAoc2VsZWN0b3JbMF0gPT0gJzwnICYmIGZyYWdtZW50UkUudGVzdChzZWxlY3RvcikpXG4gICAgICAgIGRvbSA9IHplcHRvLmZyYWdtZW50KHNlbGVjdG9yLCBSZWdFeHAuJDEsIGNvbnRleHQpLCBzZWxlY3RvciA9IG51bGxcbiAgICAgIC8vIElmIHRoZXJlJ3MgYSBjb250ZXh0LCBjcmVhdGUgYSBjb2xsZWN0aW9uIG9uIHRoYXQgY29udGV4dCBmaXJzdCwgYW5kIHNlbGVjdFxuICAgICAgLy8gbm9kZXMgZnJvbSB0aGVyZVxuICAgICAgZWxzZSBpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gJChjb250ZXh0KS5maW5kKHNlbGVjdG9yKVxuICAgICAgLy8gSWYgaXQncyBhIENTUyBzZWxlY3RvciwgdXNlIGl0IHRvIHNlbGVjdCBub2Rlcy5cbiAgICAgIGVsc2UgZG9tID0gemVwdG8ucXNhKGRvY3VtZW50LCBzZWxlY3RvcilcbiAgICB9XG4gICAgLy8gSWYgYSBmdW5jdGlvbiBpcyBnaXZlbiwgY2FsbCBpdCB3aGVuIHRoZSBET00gaXMgcmVhZHlcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHNlbGVjdG9yKSkgcmV0dXJuICQoZG9jdW1lbnQpLnJlYWR5KHNlbGVjdG9yKVxuICAgIC8vIElmIGEgWmVwdG8gY29sbGVjdGlvbiBpcyBnaXZlbiwganVzdCByZXR1cm4gaXRcbiAgICBlbHNlIGlmICh6ZXB0by5pc1ooc2VsZWN0b3IpKSByZXR1cm4gc2VsZWN0b3JcbiAgICBlbHNlIHtcbiAgICAgIC8vIG5vcm1hbGl6ZSBhcnJheSBpZiBhbiBhcnJheSBvZiBub2RlcyBpcyBnaXZlblxuICAgICAgaWYgKGlzQXJyYXkoc2VsZWN0b3IpKSBkb20gPSBjb21wYWN0KHNlbGVjdG9yKVxuICAgICAgLy8gV3JhcCBET00gbm9kZXMuXG4gICAgICBlbHNlIGlmIChpc09iamVjdChzZWxlY3RvcikpXG4gICAgICAgIGRvbSA9IFtzZWxlY3Rvcl0sIHNlbGVjdG9yID0gbnVsbFxuICAgICAgLy8gSWYgaXQncyBhIGh0bWwgZnJhZ21lbnQsIGNyZWF0ZSBub2RlcyBmcm9tIGl0XG4gICAgICBlbHNlIGlmIChmcmFnbWVudFJFLnRlc3Qoc2VsZWN0b3IpKVxuICAgICAgICBkb20gPSB6ZXB0by5mcmFnbWVudChzZWxlY3Rvci50cmltKCksIFJlZ0V4cC4kMSwgY29udGV4dCksIHNlbGVjdG9yID0gbnVsbFxuICAgICAgLy8gSWYgdGhlcmUncyBhIGNvbnRleHQsIGNyZWF0ZSBhIGNvbGxlY3Rpb24gb24gdGhhdCBjb250ZXh0IGZpcnN0LCBhbmQgc2VsZWN0XG4gICAgICAvLyBub2RlcyBmcm9tIHRoZXJlXG4gICAgICBlbHNlIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQpIHJldHVybiAkKGNvbnRleHQpLmZpbmQoc2VsZWN0b3IpXG4gICAgICAvLyBBbmQgbGFzdCBidXQgbm8gbGVhc3QsIGlmIGl0J3MgYSBDU1Mgc2VsZWN0b3IsIHVzZSBpdCB0byBzZWxlY3Qgbm9kZXMuXG4gICAgICBlbHNlIGRvbSA9IHplcHRvLnFzYShkb2N1bWVudCwgc2VsZWN0b3IpXG4gICAgfVxuICAgIC8vIGNyZWF0ZSBhIG5ldyBaZXB0byBjb2xsZWN0aW9uIGZyb20gdGhlIG5vZGVzIGZvdW5kXG4gICAgcmV0dXJuIHplcHRvLlooZG9tLCBzZWxlY3RvcilcbiAgfVxuXG4gIC8vIGAkYCB3aWxsIGJlIHRoZSBiYXNlIGBaZXB0b2Agb2JqZWN0LiBXaGVuIGNhbGxpbmcgdGhpc1xuICAvLyBmdW5jdGlvbiBqdXN0IGNhbGwgYCQuemVwdG8uaW5pdCwgd2hpY2ggbWFrZXMgdGhlIGltcGxlbWVudGF0aW9uXG4gIC8vIGRldGFpbHMgb2Ygc2VsZWN0aW5nIG5vZGVzIGFuZCBjcmVhdGluZyBaZXB0byBjb2xsZWN0aW9uc1xuICAvLyBwYXRjaGFibGUgaW4gcGx1Z2lucy5cbiAgJCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjb250ZXh0KXtcbiAgICByZXR1cm4gemVwdG8uaW5pdChzZWxlY3RvciwgY29udGV4dClcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSwgZGVlcCkge1xuICAgIGZvciAoa2V5IGluIHNvdXJjZSlcbiAgICAgIGlmIChkZWVwICYmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSB8fCBpc0FycmF5KHNvdXJjZVtrZXldKSkpIHtcbiAgICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmICFpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSlcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHt9XG4gICAgICAgIGlmIChpc0FycmF5KHNvdXJjZVtrZXldKSAmJiAhaXNBcnJheSh0YXJnZXRba2V5XSkpXG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBbXVxuICAgICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBkZWVwKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc291cmNlW2tleV0gIT09IHVuZGVmaW5lZCkgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XVxuICB9XG5cbiAgLy8gQ29weSBhbGwgYnV0IHVuZGVmaW5lZCBwcm9wZXJ0aWVzIGZyb20gb25lIG9yIG1vcmVcbiAgLy8gb2JqZWN0cyB0byB0aGUgYHRhcmdldGAgb2JqZWN0LlxuICAkLmV4dGVuZCA9IGZ1bmN0aW9uKHRhcmdldCl7XG4gICAgdmFyIGRlZXAsIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICBpZiAodHlwZW9mIHRhcmdldCA9PSAnYm9vbGVhbicpIHtcbiAgICAgIGRlZXAgPSB0YXJnZXRcbiAgICAgIHRhcmdldCA9IGFyZ3Muc2hpZnQoKVxuICAgIH1cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24oYXJnKXsgZXh0ZW5kKHRhcmdldCwgYXJnLCBkZWVwKSB9KVxuICAgIHJldHVybiB0YXJnZXRcbiAgfVxuXG4gIC8vIGAkLnplcHRvLnFzYWAgaXMgWmVwdG8ncyBDU1Mgc2VsZWN0b3IgaW1wbGVtZW50YXRpb24gd2hpY2hcbiAgLy8gdXNlcyBgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbGAgYW5kIG9wdGltaXplcyBmb3Igc29tZSBzcGVjaWFsIGNhc2VzLCBsaWtlIGAjaWRgLlxuICAvLyBUaGlzIG1ldGhvZCBjYW4gYmUgb3ZlcnJpZGVuIGluIHBsdWdpbnMuXG4gIHplcHRvLnFzYSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKXtcbiAgICB2YXIgZm91bmQsXG4gICAgICAgIG1heWJlSUQgPSBzZWxlY3RvclswXSA9PSAnIycsXG4gICAgICAgIG1heWJlQ2xhc3MgPSAhbWF5YmVJRCAmJiBzZWxlY3RvclswXSA9PSAnLicsXG4gICAgICAgIG5hbWVPbmx5ID0gbWF5YmVJRCB8fCBtYXliZUNsYXNzID8gc2VsZWN0b3Iuc2xpY2UoMSkgOiBzZWxlY3RvciwgLy8gRW5zdXJlIHRoYXQgYSAxIGNoYXIgdGFnIG5hbWUgc3RpbGwgZ2V0cyBjaGVja2VkXG4gICAgICAgIGlzU2ltcGxlID0gc2ltcGxlU2VsZWN0b3JSRS50ZXN0KG5hbWVPbmx5KVxuICAgIHJldHVybiAoaXNEb2N1bWVudChlbGVtZW50KSAmJiBpc1NpbXBsZSAmJiBtYXliZUlEKSA/XG4gICAgICAoIChmb3VuZCA9IGVsZW1lbnQuZ2V0RWxlbWVudEJ5SWQobmFtZU9ubHkpKSA/IFtmb3VuZF0gOiBbXSApIDpcbiAgICAgIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDkpID8gW10gOlxuICAgICAgc2xpY2UuY2FsbChcbiAgICAgICAgaXNTaW1wbGUgJiYgIW1heWJlSUQgP1xuICAgICAgICAgIG1heWJlQ2xhc3MgPyBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobmFtZU9ubHkpIDogLy8gSWYgaXQncyBzaW1wbGUsIGl0IGNvdWxkIGJlIGEgY2xhc3NcbiAgICAgICAgICBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKSA6IC8vIE9yIGEgdGFnXG4gICAgICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSAvLyBPciBpdCdzIG5vdCBzaW1wbGUsIGFuZCB3ZSBuZWVkIHRvIHF1ZXJ5IGFsbFxuICAgICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyZWQobm9kZXMsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyAkKG5vZGVzKSA6ICQobm9kZXMpLmZpbHRlcihzZWxlY3RvcilcbiAgfVxuXG4gICQuY29udGFpbnMgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMgP1xuICAgIGZ1bmN0aW9uKHBhcmVudCwgbm9kZSkge1xuICAgICAgcmV0dXJuIHBhcmVudCAhPT0gbm9kZSAmJiBwYXJlbnQuY29udGFpbnMobm9kZSlcbiAgICB9IDpcbiAgICBmdW5jdGlvbihwYXJlbnQsIG5vZGUpIHtcbiAgICAgIHdoaWxlIChub2RlICYmIChub2RlID0gbm9kZS5wYXJlbnROb2RlKSlcbiAgICAgICAgaWYgKG5vZGUgPT09IHBhcmVudCkgcmV0dXJuIHRydWVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICBmdW5jdGlvbiBmdW5jQXJnKGNvbnRleHQsIGFyZywgaWR4LCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oYXJnKSA/IGFyZy5jYWxsKGNvbnRleHQsIGlkeCwgcGF5bG9hZCkgOiBhcmdcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEF0dHJpYnV0ZShub2RlLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhbHVlID09IG51bGwgPyBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKSA6IG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKVxuICB9XG5cbiAgLy8gYWNjZXNzIGNsYXNzTmFtZSBwcm9wZXJ0eSB3aGlsZSByZXNwZWN0aW5nIFNWR0FuaW1hdGVkU3RyaW5nXG4gIGZ1bmN0aW9uIGNsYXNzTmFtZShub2RlLCB2YWx1ZSl7XG4gICAgdmFyIGtsYXNzID0gbm9kZS5jbGFzc05hbWUgfHwgJycsXG4gICAgICAgIHN2ZyAgID0ga2xhc3MgJiYga2xhc3MuYmFzZVZhbCAhPT0gdW5kZWZpbmVkXG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHN2ZyA/IGtsYXNzLmJhc2VWYWwgOiBrbGFzc1xuICAgIHN2ZyA/IChrbGFzcy5iYXNlVmFsID0gdmFsdWUpIDogKG5vZGUuY2xhc3NOYW1lID0gdmFsdWUpXG4gIH1cblxuICAvLyBcInRydWVcIiAgPT4gdHJ1ZVxuICAvLyBcImZhbHNlXCIgPT4gZmFsc2VcbiAgLy8gXCJudWxsXCIgID0+IG51bGxcbiAgLy8gXCI0MlwiICAgID0+IDQyXG4gIC8vIFwiNDIuNVwiICA9PiA0Mi41XG4gIC8vIFwiMDhcIiAgICA9PiBcIjA4XCJcbiAgLy8gSlNPTiAgICA9PiBwYXJzZSBpZiB2YWxpZFxuICAvLyBTdHJpbmcgID0+IHNlbGZcbiAgZnVuY3Rpb24gZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdmFsdWUgP1xuICAgICAgICB2YWx1ZSA9PSBcInRydWVcIiB8fFxuICAgICAgICAoIHZhbHVlID09IFwiZmFsc2VcIiA/IGZhbHNlIDpcbiAgICAgICAgICB2YWx1ZSA9PSBcIm51bGxcIiA/IG51bGwgOlxuICAgICAgICAgICt2YWx1ZSArIFwiXCIgPT0gdmFsdWUgPyArdmFsdWUgOlxuICAgICAgICAgIC9eW1xcW1xce10vLnRlc3QodmFsdWUpID8gJC5wYXJzZUpTT04odmFsdWUpIDpcbiAgICAgICAgICB2YWx1ZSApXG4gICAgICAgIDogdmFsdWVcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gICQudHlwZSA9IHR5cGVcbiAgJC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvblxuICAkLmlzV2luZG93ID0gaXNXaW5kb3dcbiAgJC5pc0FycmF5ID0gaXNBcnJheVxuICAkLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0XG5cbiAgJC5pc0VtcHR5T2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIG5hbWVcbiAgICBmb3IgKG5hbWUgaW4gb2JqKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgJC5pbkFycmF5ID0gZnVuY3Rpb24oZWxlbSwgYXJyYXksIGkpe1xuICAgIHJldHVybiBlbXB0eUFycmF5LmluZGV4T2YuY2FsbChhcnJheSwgZWxlbSwgaSlcbiAgfVxuXG4gICQuY2FtZWxDYXNlID0gY2FtZWxpemVcbiAgJC50cmltID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ciA9PSBudWxsID8gXCJcIiA6IFN0cmluZy5wcm90b3R5cGUudHJpbS5jYWxsKHN0cilcbiAgfVxuXG4gIC8vIHBsdWdpbiBjb21wYXRpYmlsaXR5XG4gICQudXVpZCA9IDBcbiAgJC5zdXBwb3J0ID0geyB9XG4gICQuZXhwciA9IHsgfVxuXG4gICQubWFwID0gZnVuY3Rpb24oZWxlbWVudHMsIGNhbGxiYWNrKXtcbiAgICB2YXIgdmFsdWUsIHZhbHVlcyA9IFtdLCBpLCBrZXlcbiAgICBpZiAobGlrZUFycmF5KGVsZW1lbnRzKSlcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrKGVsZW1lbnRzW2ldLCBpKVxuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkgdmFsdWVzLnB1c2godmFsdWUpXG4gICAgICB9XG4gICAgZWxzZVxuICAgICAgZm9yIChrZXkgaW4gZWxlbWVudHMpIHtcbiAgICAgICAgdmFsdWUgPSBjYWxsYmFjayhlbGVtZW50c1trZXldLCBrZXkpXG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB2YWx1ZXMucHVzaCh2YWx1ZSlcbiAgICAgIH1cbiAgICByZXR1cm4gZmxhdHRlbih2YWx1ZXMpXG4gIH1cblxuICAkLmVhY2ggPSBmdW5jdGlvbihlbGVtZW50cywgY2FsbGJhY2spe1xuICAgIHZhciBpLCBrZXlcbiAgICBpZiAobGlrZUFycmF5KGVsZW1lbnRzKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgICBpZiAoY2FsbGJhY2suY2FsbChlbGVtZW50c1tpXSwgaSwgZWxlbWVudHNbaV0pID09PSBmYWxzZSkgcmV0dXJuIGVsZW1lbnRzXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoa2V5IGluIGVsZW1lbnRzKVxuICAgICAgICBpZiAoY2FsbGJhY2suY2FsbChlbGVtZW50c1trZXldLCBrZXksIGVsZW1lbnRzW2tleV0pID09PSBmYWxzZSkgcmV0dXJuIGVsZW1lbnRzXG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnRzXG4gIH1cblxuICAkLmdyZXAgPSBmdW5jdGlvbihlbGVtZW50cywgY2FsbGJhY2spe1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbChlbGVtZW50cywgY2FsbGJhY2spXG4gIH1cblxuICBpZiAod2luZG93LkpTT04pICQucGFyc2VKU09OID0gSlNPTi5wYXJzZVxuXG4gIC8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxuICAkLmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG4gICAgY2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKClcbiAgfSlcblxuICAvLyBEZWZpbmUgbWV0aG9kcyB0aGF0IHdpbGwgYmUgYXZhaWxhYmxlIG9uIGFsbFxuICAvLyBaZXB0byBjb2xsZWN0aW9uc1xuICAkLmZuID0ge1xuICAgIC8vIEJlY2F1c2UgYSBjb2xsZWN0aW9uIGFjdHMgbGlrZSBhbiBhcnJheVxuICAgIC8vIGNvcHkgb3ZlciB0aGVzZSB1c2VmdWwgYXJyYXkgZnVuY3Rpb25zLlxuICAgIGZvckVhY2g6IGVtcHR5QXJyYXkuZm9yRWFjaCxcbiAgICByZWR1Y2U6IGVtcHR5QXJyYXkucmVkdWNlLFxuICAgIHB1c2g6IGVtcHR5QXJyYXkucHVzaCxcbiAgICBzb3J0OiBlbXB0eUFycmF5LnNvcnQsXG4gICAgaW5kZXhPZjogZW1wdHlBcnJheS5pbmRleE9mLFxuICAgIGNvbmNhdDogZW1wdHlBcnJheS5jb25jYXQsXG5cbiAgICAvLyBgbWFwYCBhbmQgYHNsaWNlYCBpbiB0aGUgalF1ZXJ5IEFQSSB3b3JrIGRpZmZlcmVudGx5XG4gICAgLy8gZnJvbSB0aGVpciBhcnJheSBjb3VudGVycGFydHNcbiAgICBtYXA6IGZ1bmN0aW9uKGZuKXtcbiAgICAgIHJldHVybiAkKCQubWFwKHRoaXMsIGZ1bmN0aW9uKGVsLCBpKXsgcmV0dXJuIGZuLmNhbGwoZWwsIGksIGVsKSB9KSlcbiAgICB9LFxuICAgIHNsaWNlOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuICQoc2xpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSlcbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKGNhbGxiYWNrKXtcbiAgICAgIC8vIG5lZWQgdG8gY2hlY2sgaWYgZG9jdW1lbnQuYm9keSBleGlzdHMgZm9yIElFIGFzIHRoYXQgYnJvd3NlciByZXBvcnRzXG4gICAgICAvLyBkb2N1bWVudCByZWFkeSB3aGVuIGl0IGhhc24ndCB5ZXQgY3JlYXRlZCB0aGUgYm9keSBlbGVtZW50XG4gICAgICBpZiAocmVhZHlSRS50ZXN0KGRvY3VtZW50LnJlYWR5U3RhdGUpICYmIGRvY3VtZW50LmJvZHkpIGNhbGxiYWNrKCQpXG4gICAgICBlbHNlIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpeyBjYWxsYmFjaygkKSB9LCBmYWxzZSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uKGlkeCl7XG4gICAgICByZXR1cm4gaWR4ID09PSB1bmRlZmluZWQgPyBzbGljZS5jYWxsKHRoaXMpIDogdGhpc1tpZHggPj0gMCA/IGlkeCA6IGlkeCArIHRoaXMubGVuZ3RoXVxuICAgIH0sXG4gICAgdG9BcnJheTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuZ2V0KCkgfSxcbiAgICBzaXplOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoXG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudE5vZGUgIT0gbnVsbClcbiAgICAgICAgICB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcylcbiAgICAgIH0pXG4gICAgfSxcbiAgICBlYWNoOiBmdW5jdGlvbihjYWxsYmFjayl7XG4gICAgICBlbXB0eUFycmF5LmV2ZXJ5LmNhbGwodGhpcywgZnVuY3Rpb24oZWwsIGlkeCl7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKGVsLCBpZHgsIGVsKSAhPT0gZmFsc2VcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICBpZiAoaXNGdW5jdGlvbihzZWxlY3RvcikpIHJldHVybiB0aGlzLm5vdCh0aGlzLm5vdChzZWxlY3RvcikpXG4gICAgICByZXR1cm4gJChmaWx0ZXIuY2FsbCh0aGlzLCBmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgcmV0dXJuIHplcHRvLm1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpXG4gICAgICB9KSlcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24oc2VsZWN0b3IsY29udGV4dCl7XG4gICAgICByZXR1cm4gJCh1bmlxKHRoaXMuY29uY2F0KCQoc2VsZWN0b3IsY29udGV4dCkpKSlcbiAgICB9LFxuICAgIGlzOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGggPiAwICYmIHplcHRvLm1hdGNoZXModGhpc1swXSwgc2VsZWN0b3IpXG4gICAgfSxcbiAgICBub3Q6IGZ1bmN0aW9uKHNlbGVjdG9yKXtcbiAgICAgIHZhciBub2Rlcz1bXVxuICAgICAgaWYgKGlzRnVuY3Rpb24oc2VsZWN0b3IpICYmIHNlbGVjdG9yLmNhbGwgIT09IHVuZGVmaW5lZClcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgaWYgKCFzZWxlY3Rvci5jYWxsKHRoaXMsaWR4KSkgbm9kZXMucHVzaCh0aGlzKVxuICAgICAgICB9KVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBleGNsdWRlcyA9IHR5cGVvZiBzZWxlY3RvciA9PSAnc3RyaW5nJyA/IHRoaXMuZmlsdGVyKHNlbGVjdG9yKSA6XG4gICAgICAgICAgKGxpa2VBcnJheShzZWxlY3RvcikgJiYgaXNGdW5jdGlvbihzZWxlY3Rvci5pdGVtKSkgPyBzbGljZS5jYWxsKHNlbGVjdG9yKSA6ICQoc2VsZWN0b3IpXG4gICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbihlbCl7XG4gICAgICAgICAgaWYgKGV4Y2x1ZGVzLmluZGV4T2YoZWwpIDwgMCkgbm9kZXMucHVzaChlbClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiAkKG5vZGVzKVxuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHNlbGVjdG9yKSA/XG4gICAgICAgICAgJC5jb250YWlucyh0aGlzLCBzZWxlY3RvcikgOlxuICAgICAgICAgICQodGhpcykuZmluZChzZWxlY3Rvcikuc2l6ZSgpXG4gICAgICB9KVxuICAgIH0sXG4gICAgZXE6IGZ1bmN0aW9uKGlkeCl7XG4gICAgICByZXR1cm4gaWR4ID09PSAtMSA/IHRoaXMuc2xpY2UoaWR4KSA6IHRoaXMuc2xpY2UoaWR4LCArIGlkeCArIDEpXG4gICAgfSxcbiAgICBmaXJzdDogZnVuY3Rpb24oKXtcbiAgICAgIHZhciBlbCA9IHRoaXNbMF1cbiAgICAgIHJldHVybiBlbCAmJiAhaXNPYmplY3QoZWwpID8gZWwgOiAkKGVsKVxuICAgIH0sXG4gICAgbGFzdDogZnVuY3Rpb24oKXtcbiAgICAgIHZhciBlbCA9IHRoaXNbdGhpcy5sZW5ndGggLSAxXVxuICAgICAgcmV0dXJuIGVsICYmICFpc09iamVjdChlbCkgPyBlbCA6ICQoZWwpXG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICB2YXIgcmVzdWx0LCAkdGhpcyA9IHRoaXNcbiAgICAgIGlmICghc2VsZWN0b3IpIHJlc3VsdCA9ICQoKVxuICAgICAgZWxzZSBpZiAodHlwZW9mIHNlbGVjdG9yID09ICdvYmplY3QnKVxuICAgICAgICByZXN1bHQgPSAkKHNlbGVjdG9yKS5maWx0ZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgICB2YXIgbm9kZSA9IHRoaXNcbiAgICAgICAgICByZXR1cm4gZW1wdHlBcnJheS5zb21lLmNhbGwoJHRoaXMsIGZ1bmN0aW9uKHBhcmVudCl7XG4gICAgICAgICAgICByZXR1cm4gJC5jb250YWlucyhwYXJlbnQsIG5vZGUpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIGVsc2UgaWYgKHRoaXMubGVuZ3RoID09IDEpIHJlc3VsdCA9ICQoemVwdG8ucXNhKHRoaXNbMF0sIHNlbGVjdG9yKSlcbiAgICAgIGVsc2UgcmVzdWx0ID0gdGhpcy5tYXAoZnVuY3Rpb24oKXsgcmV0dXJuIHplcHRvLnFzYSh0aGlzLCBzZWxlY3RvcikgfSlcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9LFxuICAgIGNsb3Nlc3Q6IGZ1bmN0aW9uKHNlbGVjdG9yLCBjb250ZXh0KXtcbiAgICAgIHZhciBub2RlID0gdGhpc1swXSwgY29sbGVjdGlvbiA9IGZhbHNlXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09ICdvYmplY3QnKSBjb2xsZWN0aW9uID0gJChzZWxlY3RvcilcbiAgICAgIHdoaWxlIChub2RlICYmICEoY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24uaW5kZXhPZihub2RlKSA+PSAwIDogemVwdG8ubWF0Y2hlcyhub2RlLCBzZWxlY3RvcikpKVxuICAgICAgICBub2RlID0gbm9kZSAhPT0gY29udGV4dCAmJiAhaXNEb2N1bWVudChub2RlKSAmJiBub2RlLnBhcmVudE5vZGVcbiAgICAgIHJldHVybiAkKG5vZGUpXG4gICAgfSxcbiAgICBwYXJlbnRzOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICB2YXIgYW5jZXN0b3JzID0gW10sIG5vZGVzID0gdGhpc1xuICAgICAgd2hpbGUgKG5vZGVzLmxlbmd0aCA+IDApXG4gICAgICAgIG5vZGVzID0gJC5tYXAobm9kZXMsIGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgICAgIGlmICgobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkgJiYgIWlzRG9jdW1lbnQobm9kZSkgJiYgYW5jZXN0b3JzLmluZGV4T2Yobm9kZSkgPCAwKSB7XG4gICAgICAgICAgICBhbmNlc3RvcnMucHVzaChub2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5vZGVcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICByZXR1cm4gZmlsdGVyZWQoYW5jZXN0b3JzLCBzZWxlY3RvcilcbiAgICB9LFxuICAgIHBhcmVudDogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgcmV0dXJuIGZpbHRlcmVkKHVuaXEodGhpcy5wbHVjaygncGFyZW50Tm9kZScpKSwgc2VsZWN0b3IpXG4gICAgfSxcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgcmV0dXJuIGZpbHRlcmVkKHRoaXMubWFwKGZ1bmN0aW9uKCl7IHJldHVybiBjaGlsZHJlbih0aGlzKSB9KSwgc2VsZWN0b3IpXG4gICAgfSxcbiAgICBjb250ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7IHJldHVybiBzbGljZS5jYWxsKHRoaXMuY2hpbGROb2RlcykgfSlcbiAgICB9LFxuICAgIHNpYmxpbmdzOiBmdW5jdGlvbihzZWxlY3Rvcil7XG4gICAgICByZXR1cm4gZmlsdGVyZWQodGhpcy5tYXAoZnVuY3Rpb24oaSwgZWwpe1xuICAgICAgICByZXR1cm4gZmlsdGVyLmNhbGwoY2hpbGRyZW4oZWwucGFyZW50Tm9kZSksIGZ1bmN0aW9uKGNoaWxkKXsgcmV0dXJuIGNoaWxkIT09ZWwgfSlcbiAgICAgIH0pLCBzZWxlY3RvcilcbiAgICB9LFxuICAgIGVtcHR5OiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyB0aGlzLmlubmVySFRNTCA9ICcnIH0pXG4gICAgfSxcbiAgICAvLyBgcGx1Y2tgIGlzIGJvcnJvd2VkIGZyb20gUHJvdG90eXBlLmpzXG4gICAgcGx1Y2s6IGZ1bmN0aW9uKHByb3BlcnR5KXtcbiAgICAgIHJldHVybiAkLm1hcCh0aGlzLCBmdW5jdGlvbihlbCl7IHJldHVybiBlbFtwcm9wZXJ0eV0gfSlcbiAgICB9LFxuICAgIHNob3c6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9PSBcIm5vbmVcIiAmJiAodGhpcy5zdHlsZS5kaXNwbGF5ID0gJycpXG4gICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKHRoaXMsICcnKS5nZXRQcm9wZXJ0eVZhbHVlKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIilcbiAgICAgICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheSh0aGlzLm5vZGVOYW1lKVxuICAgICAgfSlcbiAgICB9LFxuICAgIHJlcGxhY2VXaXRoOiBmdW5jdGlvbihuZXdDb250ZW50KXtcbiAgICAgIHJldHVybiB0aGlzLmJlZm9yZShuZXdDb250ZW50KS5yZW1vdmUoKVxuICAgIH0sXG4gICAgd3JhcDogZnVuY3Rpb24oc3RydWN0dXJlKXtcbiAgICAgIHZhciBmdW5jID0gaXNGdW5jdGlvbihzdHJ1Y3R1cmUpXG4gICAgICBpZiAodGhpc1swXSAmJiAhZnVuYylcbiAgICAgICAgdmFyIGRvbSAgID0gJChzdHJ1Y3R1cmUpLmdldCgwKSxcbiAgICAgICAgICAgIGNsb25lID0gZG9tLnBhcmVudE5vZGUgfHwgdGhpcy5sZW5ndGggPiAxXG5cbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaW5kZXgpe1xuICAgICAgICAkKHRoaXMpLndyYXBBbGwoXG4gICAgICAgICAgZnVuYyA/IHN0cnVjdHVyZS5jYWxsKHRoaXMsIGluZGV4KSA6XG4gICAgICAgICAgICBjbG9uZSA/IGRvbS5jbG9uZU5vZGUodHJ1ZSkgOiBkb21cbiAgICAgICAgKVxuICAgICAgfSlcbiAgICB9LFxuICAgIHdyYXBBbGw6IGZ1bmN0aW9uKHN0cnVjdHVyZSl7XG4gICAgICBpZiAodGhpc1swXSkge1xuICAgICAgICAkKHRoaXNbMF0pLmJlZm9yZShzdHJ1Y3R1cmUgPSAkKHN0cnVjdHVyZSkpXG4gICAgICAgIHZhciBjaGlsZHJlblxuICAgICAgICAvLyBkcmlsbCBkb3duIHRvIHRoZSBpbm1vc3QgZWxlbWVudFxuICAgICAgICB3aGlsZSAoKGNoaWxkcmVuID0gc3RydWN0dXJlLmNoaWxkcmVuKCkpLmxlbmd0aCkgc3RydWN0dXJlID0gY2hpbGRyZW4uZmlyc3QoKVxuICAgICAgICAkKHN0cnVjdHVyZSkuYXBwZW5kKHRoaXMpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgd3JhcElubmVyOiBmdW5jdGlvbihzdHJ1Y3R1cmUpe1xuICAgICAgdmFyIGZ1bmMgPSBpc0Z1bmN0aW9uKHN0cnVjdHVyZSlcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaW5kZXgpe1xuICAgICAgICB2YXIgc2VsZiA9ICQodGhpcyksIGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpLFxuICAgICAgICAgICAgZG9tICA9IGZ1bmMgPyBzdHJ1Y3R1cmUuY2FsbCh0aGlzLCBpbmRleCkgOiBzdHJ1Y3R1cmVcbiAgICAgICAgY29udGVudHMubGVuZ3RoID8gY29udGVudHMud3JhcEFsbChkb20pIDogc2VsZi5hcHBlbmQoZG9tKVxuICAgICAgfSlcbiAgICB9LFxuICAgIHVud3JhcDogZnVuY3Rpb24oKXtcbiAgICAgIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAkKHRoaXMpLnJlcGxhY2VXaXRoKCQodGhpcykuY2hpbGRyZW4oKSlcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG4gICAgY2xvbmU6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuY2xvbmVOb2RlKHRydWUpIH0pXG4gICAgfSxcbiAgICBoaWRlOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICB9LFxuICAgIHRvZ2dsZTogZnVuY3Rpb24oc2V0dGluZyl7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBlbCA9ICQodGhpcylcbiAgICAgICAgOyhzZXR0aW5nID09PSB1bmRlZmluZWQgPyBlbC5jc3MoXCJkaXNwbGF5XCIpID09IFwibm9uZVwiIDogc2V0dGluZykgPyBlbC5zaG93KCkgOiBlbC5oaWRlKClcbiAgICAgIH0pXG4gICAgfSxcbiAgICBwcmV2OiBmdW5jdGlvbihzZWxlY3Rvcil7IHJldHVybiAkKHRoaXMucGx1Y2soJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnKSkuZmlsdGVyKHNlbGVjdG9yIHx8ICcqJykgfSxcbiAgICBuZXh0OiBmdW5jdGlvbihzZWxlY3Rvcil7IHJldHVybiAkKHRoaXMucGx1Y2soJ25leHRFbGVtZW50U2libGluZycpKS5maWx0ZXIoc2VsZWN0b3IgfHwgJyonKSB9LFxuICAgIGh0bWw6IGZ1bmN0aW9uKGh0bWwpe1xuICAgICAgcmV0dXJuIDAgaW4gYXJndW1lbnRzID9cbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgdmFyIG9yaWdpbkh0bWwgPSB0aGlzLmlubmVySFRNTFxuICAgICAgICAgICQodGhpcykuZW1wdHkoKS5hcHBlbmQoIGZ1bmNBcmcodGhpcywgaHRtbCwgaWR4LCBvcmlnaW5IdG1sKSApXG4gICAgICAgIH0pIDpcbiAgICAgICAgKDAgaW4gdGhpcyA/IHRoaXNbMF0uaW5uZXJIVE1MIDogbnVsbClcbiAgICB9LFxuICAgIHRleHQ6IGZ1bmN0aW9uKHRleHQpe1xuICAgICAgcmV0dXJuIDAgaW4gYXJndW1lbnRzID9cbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgdmFyIG5ld1RleHQgPSBmdW5jQXJnKHRoaXMsIHRleHQsIGlkeCwgdGhpcy50ZXh0Q29udGVudClcbiAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gbmV3VGV4dCA9PSBudWxsID8gJycgOiAnJytuZXdUZXh0XG4gICAgICAgIH0pIDpcbiAgICAgICAgKDAgaW4gdGhpcyA/IHRoaXNbMF0udGV4dENvbnRlbnQgOiBudWxsKVxuICAgIH0sXG4gICAgYXR0cjogZnVuY3Rpb24obmFtZSwgdmFsdWUpe1xuICAgICAgdmFyIHJlc3VsdFxuICAgICAgcmV0dXJuICh0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyAmJiAhKDEgaW4gYXJndW1lbnRzKSkgP1xuICAgICAgICAoIXRoaXMubGVuZ3RoIHx8IHRoaXNbMF0ubm9kZVR5cGUgIT09IDEgPyB1bmRlZmluZWQgOlxuICAgICAgICAgICghKHJlc3VsdCA9IHRoaXNbMF0uZ2V0QXR0cmlidXRlKG5hbWUpKSAmJiBuYW1lIGluIHRoaXNbMF0pID8gdGhpc1swXVtuYW1lXSA6IHJlc3VsdFxuICAgICAgICApIDpcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgaWYgKHRoaXMubm9kZVR5cGUgIT09IDEpIHJldHVyblxuICAgICAgICAgIGlmIChpc09iamVjdChuYW1lKSkgZm9yIChrZXkgaW4gbmFtZSkgc2V0QXR0cmlidXRlKHRoaXMsIGtleSwgbmFtZVtrZXldKVxuICAgICAgICAgIGVsc2Ugc2V0QXR0cmlidXRlKHRoaXMsIG5hbWUsIGZ1bmNBcmcodGhpcywgdmFsdWUsIGlkeCwgdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSkpKVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24obmFtZSl7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgbmFtZS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24oYXR0cmlidXRlKXtcbiAgICAgICAgc2V0QXR0cmlidXRlKHRoaXMsIGF0dHJpYnV0ZSlcbiAgICAgIH0sIHRoaXMpfSlcbiAgICB9LFxuICAgIHByb3A6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXtcbiAgICAgIG5hbWUgPSBwcm9wTWFwW25hbWVdIHx8IG5hbWVcbiAgICAgIHJldHVybiAoMSBpbiBhcmd1bWVudHMpID9cbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgdGhpc1tuYW1lXSA9IGZ1bmNBcmcodGhpcywgdmFsdWUsIGlkeCwgdGhpc1tuYW1lXSlcbiAgICAgICAgfSkgOlxuICAgICAgICAodGhpc1swXSAmJiB0aGlzWzBdW25hbWVdKVxuICAgIH0sXG4gICAgZGF0YTogZnVuY3Rpb24obmFtZSwgdmFsdWUpe1xuICAgICAgdmFyIGF0dHJOYW1lID0gJ2RhdGEtJyArIG5hbWUucmVwbGFjZShjYXBpdGFsUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG5cbiAgICAgIHZhciBkYXRhID0gKDEgaW4gYXJndW1lbnRzKSA/XG4gICAgICAgIHRoaXMuYXR0cihhdHRyTmFtZSwgdmFsdWUpIDpcbiAgICAgICAgdGhpcy5hdHRyKGF0dHJOYW1lKVxuXG4gICAgICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRlc2VyaWFsaXplVmFsdWUoZGF0YSkgOiB1bmRlZmluZWRcbiAgICB9LFxuICAgIHZhbDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgcmV0dXJuIDAgaW4gYXJndW1lbnRzID9cbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IGZ1bmNBcmcodGhpcywgdmFsdWUsIGlkeCwgdGhpcy52YWx1ZSlcbiAgICAgICAgfSkgOlxuICAgICAgICAodGhpc1swXSAmJiAodGhpc1swXS5tdWx0aXBsZSA/XG4gICAgICAgICAgICQodGhpc1swXSkuZmluZCgnb3B0aW9uJykuZmlsdGVyKGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnNlbGVjdGVkIH0pLnBsdWNrKCd2YWx1ZScpIDpcbiAgICAgICAgICAgdGhpc1swXS52YWx1ZSlcbiAgICAgICAgKVxuICAgIH0sXG4gICAgb2Zmc2V0OiBmdW5jdGlvbihjb29yZGluYXRlcyl7XG4gICAgICBpZiAoY29vcmRpbmF0ZXMpIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaW5kZXgpe1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgICAgICAgY29vcmRzID0gZnVuY0FyZyh0aGlzLCBjb29yZGluYXRlcywgaW5kZXgsICR0aGlzLm9mZnNldCgpKSxcbiAgICAgICAgICAgIHBhcmVudE9mZnNldCA9ICR0aGlzLm9mZnNldFBhcmVudCgpLm9mZnNldCgpLFxuICAgICAgICAgICAgcHJvcHMgPSB7XG4gICAgICAgICAgICAgIHRvcDogIGNvb3Jkcy50b3AgIC0gcGFyZW50T2Zmc2V0LnRvcCxcbiAgICAgICAgICAgICAgbGVmdDogY29vcmRzLmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdFxuICAgICAgICAgICAgfVxuXG4gICAgICAgIGlmICgkdGhpcy5jc3MoJ3Bvc2l0aW9uJykgPT0gJ3N0YXRpYycpIHByb3BzWydwb3NpdGlvbiddID0gJ3JlbGF0aXZlJ1xuICAgICAgICAkdGhpcy5jc3MocHJvcHMpXG4gICAgICB9KVxuICAgICAgaWYgKCF0aGlzLmxlbmd0aCkgcmV0dXJuIG51bGxcbiAgICAgIHZhciBvYmogPSB0aGlzWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBvYmoubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgICAgdG9wOiBvYmoudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgICB3aWR0aDogTWF0aC5yb3VuZChvYmoud2lkdGgpLFxuICAgICAgICBoZWlnaHQ6IE1hdGgucm91bmQob2JqLmhlaWdodClcbiAgICAgIH1cbiAgICB9LFxuICAgIGNzczogZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlKXtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZSwgZWxlbWVudCA9IHRoaXNbMF1cbiAgICAgICAgaWYoIWVsZW1lbnQpIHJldHVyblxuICAgICAgICBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCAnJylcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PSAnc3RyaW5nJylcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC5zdHlsZVtjYW1lbGl6ZShwcm9wZXJ0eSldIHx8IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSlcbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICB2YXIgcHJvcHMgPSB7fVxuICAgICAgICAgICQuZWFjaChwcm9wZXJ0eSwgZnVuY3Rpb24oXywgcHJvcCl7XG4gICAgICAgICAgICBwcm9wc1twcm9wXSA9IChlbGVtZW50LnN0eWxlW2NhbWVsaXplKHByb3ApXSB8fCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCkpXG4gICAgICAgICAgfSlcbiAgICAgICAgICByZXR1cm4gcHJvcHNcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY3NzID0gJydcbiAgICAgIGlmICh0eXBlKHByb3BlcnR5KSA9PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKVxuICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpeyB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KGRhc2hlcml6ZShwcm9wZXJ0eSkpIH0pXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBjc3MgPSBkYXNoZXJpemUocHJvcGVydHkpICsgXCI6XCIgKyBtYXliZUFkZFB4KHByb3BlcnR5LCB2YWx1ZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoa2V5IGluIHByb3BlcnR5KVxuICAgICAgICAgIGlmICghcHJvcGVydHlba2V5XSAmJiBwcm9wZXJ0eVtrZXldICE9PSAwKVxuICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7IHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkoZGFzaGVyaXplKGtleSkpIH0pXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgY3NzICs9IGRhc2hlcml6ZShrZXkpICsgJzonICsgbWF5YmVBZGRQeChrZXksIHByb3BlcnR5W2tleV0pICsgJzsnXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsgdGhpcy5zdHlsZS5jc3NUZXh0ICs9ICc7JyArIGNzcyB9KVxuICAgIH0sXG4gICAgaW5kZXg6IGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgcmV0dXJuIGVsZW1lbnQgPyB0aGlzLmluZGV4T2YoJChlbGVtZW50KVswXSkgOiB0aGlzLnBhcmVudCgpLmNoaWxkcmVuKCkuaW5kZXhPZih0aGlzWzBdKVxuICAgIH0sXG4gICAgaGFzQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgaWYgKCFuYW1lKSByZXR1cm4gZmFsc2VcbiAgICAgIHJldHVybiBlbXB0eUFycmF5LnNvbWUuY2FsbCh0aGlzLCBmdW5jdGlvbihlbCl7XG4gICAgICAgIHJldHVybiB0aGlzLnRlc3QoY2xhc3NOYW1lKGVsKSlcbiAgICAgIH0sIGNsYXNzUkUobmFtZSkpXG4gICAgfSxcbiAgICBhZGRDbGFzczogZnVuY3Rpb24obmFtZSl7XG4gICAgICBpZiAoIW5hbWUpIHJldHVybiB0aGlzXG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgIGlmICghKCdjbGFzc05hbWUnIGluIHRoaXMpKSByZXR1cm5cbiAgICAgICAgY2xhc3NMaXN0ID0gW11cbiAgICAgICAgdmFyIGNscyA9IGNsYXNzTmFtZSh0aGlzKSwgbmV3TmFtZSA9IGZ1bmNBcmcodGhpcywgbmFtZSwgaWR4LCBjbHMpXG4gICAgICAgIG5ld05hbWUuc3BsaXQoL1xccysvZykuZm9yRWFjaChmdW5jdGlvbihrbGFzcyl7XG4gICAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKGtsYXNzKSkgY2xhc3NMaXN0LnB1c2goa2xhc3MpXG4gICAgICAgIH0sIHRoaXMpXG4gICAgICAgIGNsYXNzTGlzdC5sZW5ndGggJiYgY2xhc3NOYW1lKHRoaXMsIGNscyArIChjbHMgPyBcIiBcIiA6IFwiXCIpICsgY2xhc3NMaXN0LmpvaW4oXCIgXCIpKVxuICAgICAgfSlcbiAgICB9LFxuICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihuYW1lKXtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXtcbiAgICAgICAgaWYgKCEoJ2NsYXNzTmFtZScgaW4gdGhpcykpIHJldHVyblxuICAgICAgICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gY2xhc3NOYW1lKHRoaXMsICcnKVxuICAgICAgICBjbGFzc0xpc3QgPSBjbGFzc05hbWUodGhpcylcbiAgICAgICAgZnVuY0FyZyh0aGlzLCBuYW1lLCBpZHgsIGNsYXNzTGlzdCkuc3BsaXQoL1xccysvZykuZm9yRWFjaChmdW5jdGlvbihrbGFzcyl7XG4gICAgICAgICAgY2xhc3NMaXN0ID0gY2xhc3NMaXN0LnJlcGxhY2UoY2xhc3NSRShrbGFzcyksIFwiIFwiKVxuICAgICAgICB9KVxuICAgICAgICBjbGFzc05hbWUodGhpcywgY2xhc3NMaXN0LnRyaW0oKSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICB0b2dnbGVDbGFzczogZnVuY3Rpb24obmFtZSwgd2hlbil7XG4gICAgICBpZiAoIW5hbWUpIHJldHVybiB0aGlzXG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksIG5hbWVzID0gZnVuY0FyZyh0aGlzLCBuYW1lLCBpZHgsIGNsYXNzTmFtZSh0aGlzKSlcbiAgICAgICAgbmFtZXMuc3BsaXQoL1xccysvZykuZm9yRWFjaChmdW5jdGlvbihrbGFzcyl7XG4gICAgICAgICAgKHdoZW4gPT09IHVuZGVmaW5lZCA/ICEkdGhpcy5oYXNDbGFzcyhrbGFzcykgOiB3aGVuKSA/XG4gICAgICAgICAgICAkdGhpcy5hZGRDbGFzcyhrbGFzcykgOiAkdGhpcy5yZW1vdmVDbGFzcyhrbGFzcylcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBzY3JvbGxUb3A6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVyblxuICAgICAgdmFyIGhhc1Njcm9sbFRvcCA9ICdzY3JvbGxUb3AnIGluIHRoaXNbMF1cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaGFzU2Nyb2xsVG9wID8gdGhpc1swXS5zY3JvbGxUb3AgOiB0aGlzWzBdLnBhZ2VZT2Zmc2V0XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGhhc1Njcm9sbFRvcCA/XG4gICAgICAgIGZ1bmN0aW9uKCl7IHRoaXMuc2Nyb2xsVG9wID0gdmFsdWUgfSA6XG4gICAgICAgIGZ1bmN0aW9uKCl7IHRoaXMuc2Nyb2xsVG8odGhpcy5zY3JvbGxYLCB2YWx1ZSkgfSlcbiAgICB9LFxuICAgIHNjcm9sbExlZnQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVyblxuICAgICAgdmFyIGhhc1Njcm9sbExlZnQgPSAnc2Nyb2xsTGVmdCcgaW4gdGhpc1swXVxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBoYXNTY3JvbGxMZWZ0ID8gdGhpc1swXS5zY3JvbGxMZWZ0IDogdGhpc1swXS5wYWdlWE9mZnNldFxuICAgICAgcmV0dXJuIHRoaXMuZWFjaChoYXNTY3JvbGxMZWZ0ID9cbiAgICAgICAgZnVuY3Rpb24oKXsgdGhpcy5zY3JvbGxMZWZ0ID0gdmFsdWUgfSA6XG4gICAgICAgIGZ1bmN0aW9uKCl7IHRoaXMuc2Nyb2xsVG8odmFsdWUsIHRoaXMuc2Nyb2xsWSkgfSlcbiAgICB9LFxuICAgIHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVyblxuXG4gICAgICB2YXIgZWxlbSA9IHRoaXNbMF0sXG4gICAgICAgIC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG4gICAgICAgIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCksXG4gICAgICAgIC8vIEdldCBjb3JyZWN0IG9mZnNldHNcbiAgICAgICAgb2Zmc2V0ICAgICAgID0gdGhpcy5vZmZzZXQoKSxcbiAgICAgICAgcGFyZW50T2Zmc2V0ID0gcm9vdE5vZGVSRS50ZXN0KG9mZnNldFBhcmVudFswXS5ub2RlTmFtZSkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogb2Zmc2V0UGFyZW50Lm9mZnNldCgpXG5cbiAgICAgIC8vIFN1YnRyYWN0IGVsZW1lbnQgbWFyZ2luc1xuICAgICAgLy8gbm90ZTogd2hlbiBhbiBlbGVtZW50IGhhcyBtYXJnaW46IGF1dG8gdGhlIG9mZnNldExlZnQgYW5kIG1hcmdpbkxlZnRcbiAgICAgIC8vIGFyZSB0aGUgc2FtZSBpbiBTYWZhcmkgY2F1c2luZyBvZmZzZXQubGVmdCB0byBpbmNvcnJlY3RseSBiZSAwXG4gICAgICBvZmZzZXQudG9wICAtPSBwYXJzZUZsb2F0KCAkKGVsZW0pLmNzcygnbWFyZ2luLXRvcCcpICkgfHwgMFxuICAgICAgb2Zmc2V0LmxlZnQgLT0gcGFyc2VGbG9hdCggJChlbGVtKS5jc3MoJ21hcmdpbi1sZWZ0JykgKSB8fCAwXG5cbiAgICAgIC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuICAgICAgcGFyZW50T2Zmc2V0LnRvcCAgKz0gcGFyc2VGbG9hdCggJChvZmZzZXRQYXJlbnRbMF0pLmNzcygnYm9yZGVyLXRvcC13aWR0aCcpICkgfHwgMFxuICAgICAgcGFyZW50T2Zmc2V0LmxlZnQgKz0gcGFyc2VGbG9hdCggJChvZmZzZXRQYXJlbnRbMF0pLmNzcygnYm9yZGVyLWxlZnQtd2lkdGgnKSApIHx8IDBcblxuICAgICAgLy8gU3VidHJhY3QgdGhlIHR3byBvZmZzZXRzXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6ICBvZmZzZXQudG9wICAtIHBhcmVudE9mZnNldC50b3AsXG4gICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnRcbiAgICAgIH1cbiAgICB9LFxuICAgIG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50LmJvZHlcbiAgICAgICAgd2hpbGUgKHBhcmVudCAmJiAhcm9vdE5vZGVSRS50ZXN0KHBhcmVudC5ub2RlTmFtZSkgJiYgJChwYXJlbnQpLmNzcyhcInBvc2l0aW9uXCIpID09IFwic3RhdGljXCIpXG4gICAgICAgICAgcGFyZW50ID0gcGFyZW50Lm9mZnNldFBhcmVudFxuICAgICAgICByZXR1cm4gcGFyZW50XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIGZvciBub3dcbiAgJC5mbi5kZXRhY2ggPSAkLmZuLnJlbW92ZVxuXG4gIC8vIEdlbmVyYXRlIHRoZSBgd2lkdGhgIGFuZCBgaGVpZ2h0YCBmdW5jdGlvbnNcbiAgO1snd2lkdGgnLCAnaGVpZ2h0J10uZm9yRWFjaChmdW5jdGlvbihkaW1lbnNpb24pe1xuICAgIHZhciBkaW1lbnNpb25Qcm9wZXJ0eSA9XG4gICAgICBkaW1lbnNpb24ucmVwbGFjZSgvLi8sIGZ1bmN0aW9uKG0peyByZXR1cm4gbVswXS50b1VwcGVyQ2FzZSgpIH0pXG5cbiAgICAkLmZuW2RpbWVuc2lvbl0gPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICB2YXIgb2Zmc2V0LCBlbCA9IHRoaXNbMF1cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaXNXaW5kb3coZWwpID8gZWxbJ2lubmVyJyArIGRpbWVuc2lvblByb3BlcnR5XSA6XG4gICAgICAgIGlzRG9jdW1lbnQoZWwpID8gZWwuZG9jdW1lbnRFbGVtZW50WydzY3JvbGwnICsgZGltZW5zaW9uUHJvcGVydHldIDpcbiAgICAgICAgKG9mZnNldCA9IHRoaXMub2Zmc2V0KCkpICYmIG9mZnNldFtkaW1lbnNpb25dXG4gICAgICBlbHNlIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXtcbiAgICAgICAgZWwgPSAkKHRoaXMpXG4gICAgICAgIGVsLmNzcyhkaW1lbnNpb24sIGZ1bmNBcmcodGhpcywgdmFsdWUsIGlkeCwgZWxbZGltZW5zaW9uXSgpKSlcbiAgICAgIH0pXG4gICAgfVxuICB9KVxuXG4gIGZ1bmN0aW9uIHRyYXZlcnNlTm9kZShub2RlLCBmdW4pIHtcbiAgICBmdW4obm9kZSlcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuICAgICAgdHJhdmVyc2VOb2RlKG5vZGUuY2hpbGROb2Rlc1tpXSwgZnVuKVxuICB9XG5cbiAgLy8gR2VuZXJhdGUgdGhlIGBhZnRlcmAsIGBwcmVwZW5kYCwgYGJlZm9yZWAsIGBhcHBlbmRgLFxuICAvLyBgaW5zZXJ0QWZ0ZXJgLCBgaW5zZXJ0QmVmb3JlYCwgYGFwcGVuZFRvYCwgYW5kIGBwcmVwZW5kVG9gIG1ldGhvZHMuXG4gIGFkamFjZW5jeU9wZXJhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKG9wZXJhdG9yLCBvcGVyYXRvckluZGV4KSB7XG4gICAgdmFyIGluc2lkZSA9IG9wZXJhdG9ySW5kZXggJSAyIC8vPT4gcHJlcGVuZCwgYXBwZW5kXG5cbiAgICAkLmZuW29wZXJhdG9yXSA9IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBhcmd1bWVudHMgY2FuIGJlIG5vZGVzLCBhcnJheXMgb2Ygbm9kZXMsIFplcHRvIG9iamVjdHMgYW5kIEhUTUwgc3RyaW5nc1xuICAgICAgdmFyIGFyZ1R5cGUsIG5vZGVzID0gJC5tYXAoYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIGFyZ1R5cGUgPSB0eXBlKGFyZylcbiAgICAgICAgICAgIHJldHVybiBhcmdUeXBlID09IFwib2JqZWN0XCIgfHwgYXJnVHlwZSA9PSBcImFycmF5XCIgfHwgYXJnID09IG51bGwgP1xuICAgICAgICAgICAgICBhcmcgOiB6ZXB0by5mcmFnbWVudChhcmcpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgcGFyZW50LCBjb3B5QnlDbG9uZSA9IHRoaXMubGVuZ3RoID4gMVxuICAgICAgaWYgKG5vZGVzLmxlbmd0aCA8IDEpIHJldHVybiB0aGlzXG5cbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oXywgdGFyZ2V0KXtcbiAgICAgICAgcGFyZW50ID0gaW5zaWRlID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGVcblxuICAgICAgICAvLyBjb252ZXJ0IGFsbCBtZXRob2RzIHRvIGEgXCJiZWZvcmVcIiBvcGVyYXRpb25cbiAgICAgICAgdGFyZ2V0ID0gb3BlcmF0b3JJbmRleCA9PSAwID8gdGFyZ2V0Lm5leHRTaWJsaW5nIDpcbiAgICAgICAgICAgICAgICAgb3BlcmF0b3JJbmRleCA9PSAxID8gdGFyZ2V0LmZpcnN0Q2hpbGQgOlxuICAgICAgICAgICAgICAgICBvcGVyYXRvckluZGV4ID09IDIgPyB0YXJnZXQgOlxuICAgICAgICAgICAgICAgICBudWxsXG5cbiAgICAgICAgdmFyIHBhcmVudEluRG9jdW1lbnQgPSAkLmNvbnRhaW5zKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgcGFyZW50KVxuXG4gICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSl7XG4gICAgICAgICAgaWYgKGNvcHlCeUNsb25lKSBub2RlID0gbm9kZS5jbG9uZU5vZGUodHJ1ZSlcbiAgICAgICAgICBlbHNlIGlmICghcGFyZW50KSByZXR1cm4gJChub2RlKS5yZW1vdmUoKVxuXG4gICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCB0YXJnZXQpXG4gICAgICAgICAgaWYgKHBhcmVudEluRG9jdW1lbnQpIHRyYXZlcnNlTm9kZShub2RlLCBmdW5jdGlvbihlbCl7XG4gICAgICAgICAgICBpZiAoZWwubm9kZU5hbWUgIT0gbnVsbCAmJiBlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJyAmJlxuICAgICAgICAgICAgICAgKCFlbC50eXBlIHx8IGVsLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnKSAmJiAhZWwuc3JjKVxuICAgICAgICAgICAgICB3aW5kb3dbJ2V2YWwnXS5jYWxsKHdpbmRvdywgZWwuaW5uZXJIVE1MKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIGFmdGVyICAgID0+IGluc2VydEFmdGVyXG4gICAgLy8gcHJlcGVuZCAgPT4gcHJlcGVuZFRvXG4gICAgLy8gYmVmb3JlICAgPT4gaW5zZXJ0QmVmb3JlXG4gICAgLy8gYXBwZW5kICAgPT4gYXBwZW5kVG9cbiAgICAkLmZuW2luc2lkZSA/IG9wZXJhdG9yKydUbycgOiAnaW5zZXJ0Jysob3BlcmF0b3JJbmRleCA/ICdCZWZvcmUnIDogJ0FmdGVyJyldID0gZnVuY3Rpb24oaHRtbCl7XG4gICAgICAkKGh0bWwpW29wZXJhdG9yXSh0aGlzKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH0pXG5cbiAgemVwdG8uWi5wcm90b3R5cGUgPSAkLmZuXG5cbiAgLy8gRXhwb3J0IGludGVybmFsIEFQSSBmdW5jdGlvbnMgaW4gdGhlIGAkLnplcHRvYCBuYW1lc3BhY2VcbiAgemVwdG8udW5pcSA9IHVuaXFcbiAgemVwdG8uZGVzZXJpYWxpemVWYWx1ZSA9IGRlc2VyaWFsaXplVmFsdWVcbiAgJC56ZXB0byA9IHplcHRvXG5cbiAgcmV0dXJuICRcbn0pKClcblxud2luZG93LlplcHRvID0gWmVwdG9cbndpbmRvdy4kID09PSB1bmRlZmluZWQgJiYgKHdpbmRvdy4kID0gWmVwdG8pXG5cbjsoZnVuY3Rpb24oJCl7XG4gIHZhciBfemlkID0gMSwgdW5kZWZpbmVkLFxuICAgICAgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsXG4gICAgICBpc0Z1bmN0aW9uID0gJC5pc0Z1bmN0aW9uLFxuICAgICAgaXNTdHJpbmcgPSBmdW5jdGlvbihvYmopeyByZXR1cm4gdHlwZW9mIG9iaiA9PSAnc3RyaW5nJyB9LFxuICAgICAgaGFuZGxlcnMgPSB7fSxcbiAgICAgIHNwZWNpYWxFdmVudHM9e30sXG4gICAgICBmb2N1c2luU3VwcG9ydGVkID0gJ29uZm9jdXNpbicgaW4gd2luZG93LFxuICAgICAgZm9jdXMgPSB7IGZvY3VzOiAnZm9jdXNpbicsIGJsdXI6ICdmb2N1c291dCcgfSxcbiAgICAgIGhvdmVyID0geyBtb3VzZWVudGVyOiAnbW91c2VvdmVyJywgbW91c2VsZWF2ZTogJ21vdXNlb3V0JyB9XG5cbiAgc3BlY2lhbEV2ZW50cy5jbGljayA9IHNwZWNpYWxFdmVudHMubW91c2Vkb3duID0gc3BlY2lhbEV2ZW50cy5tb3VzZXVwID0gc3BlY2lhbEV2ZW50cy5tb3VzZW1vdmUgPSAnTW91c2VFdmVudHMnXG5cbiAgZnVuY3Rpb24gemlkKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5femlkIHx8IChlbGVtZW50Ll96aWQgPSBfemlkKyspXG4gIH1cbiAgZnVuY3Rpb24gZmluZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50LCBmbiwgc2VsZWN0b3IpIHtcbiAgICBldmVudCA9IHBhcnNlKGV2ZW50KVxuICAgIGlmIChldmVudC5ucykgdmFyIG1hdGNoZXIgPSBtYXRjaGVyRm9yKGV2ZW50Lm5zKVxuICAgIHJldHVybiAoaGFuZGxlcnNbemlkKGVsZW1lbnQpXSB8fCBbXSkuZmlsdGVyKGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBoYW5kbGVyXG4gICAgICAgICYmICghZXZlbnQuZSAgfHwgaGFuZGxlci5lID09IGV2ZW50LmUpXG4gICAgICAgICYmICghZXZlbnQubnMgfHwgbWF0Y2hlci50ZXN0KGhhbmRsZXIubnMpKVxuICAgICAgICAmJiAoIWZuICAgICAgIHx8IHppZChoYW5kbGVyLmZuKSA9PT0gemlkKGZuKSlcbiAgICAgICAgJiYgKCFzZWxlY3RvciB8fCBoYW5kbGVyLnNlbCA9PSBzZWxlY3RvcilcbiAgICB9KVxuICB9XG4gIGZ1bmN0aW9uIHBhcnNlKGV2ZW50KSB7XG4gICAgdmFyIHBhcnRzID0gKCcnICsgZXZlbnQpLnNwbGl0KCcuJylcbiAgICByZXR1cm4ge2U6IHBhcnRzWzBdLCBuczogcGFydHMuc2xpY2UoMSkuc29ydCgpLmpvaW4oJyAnKX1cbiAgfVxuICBmdW5jdGlvbiBtYXRjaGVyRm9yKG5zKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJyg/Ol58ICknICsgbnMucmVwbGFjZSgnICcsICcgLiogPycpICsgJyg/OiB8JCknKVxuICB9XG5cbiAgZnVuY3Rpb24gZXZlbnRDYXB0dXJlKGhhbmRsZXIsIGNhcHR1cmVTZXR0aW5nKSB7XG4gICAgcmV0dXJuIGhhbmRsZXIuZGVsICYmXG4gICAgICAoIWZvY3VzaW5TdXBwb3J0ZWQgJiYgKGhhbmRsZXIuZSBpbiBmb2N1cykpIHx8XG4gICAgICAhIWNhcHR1cmVTZXR0aW5nXG4gIH1cblxuICBmdW5jdGlvbiByZWFsRXZlbnQodHlwZSkge1xuICAgIHJldHVybiBob3Zlclt0eXBlXSB8fCAoZm9jdXNpblN1cHBvcnRlZCAmJiBmb2N1c1t0eXBlXSkgfHwgdHlwZVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkKGVsZW1lbnQsIGV2ZW50cywgZm4sIGRhdGEsIHNlbGVjdG9yLCBkZWxlZ2F0b3IsIGNhcHR1cmUpe1xuICAgIHZhciBpZCA9IHppZChlbGVtZW50KSwgc2V0ID0gKGhhbmRsZXJzW2lkXSB8fCAoaGFuZGxlcnNbaWRdID0gW10pKVxuICAgIGV2ZW50cy5zcGxpdCgvXFxzLykuZm9yRWFjaChmdW5jdGlvbihldmVudCl7XG4gICAgICBpZiAoZXZlbnQgPT0gJ3JlYWR5JykgcmV0dXJuICQoZG9jdW1lbnQpLnJlYWR5KGZuKVxuICAgICAgdmFyIGhhbmRsZXIgICA9IHBhcnNlKGV2ZW50KVxuICAgICAgaGFuZGxlci5mbiAgICA9IGZuXG4gICAgICBoYW5kbGVyLnNlbCAgID0gc2VsZWN0b3JcbiAgICAgIC8vIGVtdWxhdGUgbW91c2VlbnRlciwgbW91c2VsZWF2ZVxuICAgICAgaWYgKGhhbmRsZXIuZSBpbiBob3ZlcikgZm4gPSBmdW5jdGlvbihlKXtcbiAgICAgICAgdmFyIHJlbGF0ZWQgPSBlLnJlbGF0ZWRUYXJnZXRcbiAgICAgICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEkLmNvbnRhaW5zKHRoaXMsIHJlbGF0ZWQpKSlcbiAgICAgICAgICByZXR1cm4gaGFuZGxlci5mbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgICBoYW5kbGVyLmRlbCAgID0gZGVsZWdhdG9yXG4gICAgICB2YXIgY2FsbGJhY2sgID0gZGVsZWdhdG9yIHx8IGZuXG4gICAgICBoYW5kbGVyLnByb3h5ID0gZnVuY3Rpb24oZSl7XG4gICAgICAgIGUgPSBjb21wYXRpYmxlKGUpXG4gICAgICAgIGlmIChlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHJldHVyblxuICAgICAgICBlLmRhdGEgPSBkYXRhXG4gICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjay5hcHBseShlbGVtZW50LCBlLl9hcmdzID09IHVuZGVmaW5lZCA/IFtlXSA6IFtlXS5jb25jYXQoZS5fYXJncykpXG4gICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSBlLnByZXZlbnREZWZhdWx0KCksIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuICAgICAgaGFuZGxlci5pID0gc2V0Lmxlbmd0aFxuICAgICAgc2V0LnB1c2goaGFuZGxlcilcbiAgICAgIGlmICgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gZWxlbWVudClcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHJlYWxFdmVudChoYW5kbGVyLmUpLCBoYW5kbGVyLnByb3h5LCBldmVudENhcHR1cmUoaGFuZGxlciwgY2FwdHVyZSkpXG4gICAgfSlcbiAgfVxuICBmdW5jdGlvbiByZW1vdmUoZWxlbWVudCwgZXZlbnRzLCBmbiwgc2VsZWN0b3IsIGNhcHR1cmUpe1xuICAgIHZhciBpZCA9IHppZChlbGVtZW50KVxuICAgIDsoZXZlbnRzIHx8ICcnKS5zcGxpdCgvXFxzLykuZm9yRWFjaChmdW5jdGlvbihldmVudCl7XG4gICAgICBmaW5kSGFuZGxlcnMoZWxlbWVudCwgZXZlbnQsIGZuLCBzZWxlY3RvcikuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKXtcbiAgICAgICAgZGVsZXRlIGhhbmRsZXJzW2lkXVtoYW5kbGVyLmldXG4gICAgICBpZiAoJ3JlbW92ZUV2ZW50TGlzdGVuZXInIGluIGVsZW1lbnQpXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihyZWFsRXZlbnQoaGFuZGxlci5lKSwgaGFuZGxlci5wcm94eSwgZXZlbnRDYXB0dXJlKGhhbmRsZXIsIGNhcHR1cmUpKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgJC5ldmVudCA9IHsgYWRkOiBhZGQsIHJlbW92ZTogcmVtb3ZlIH1cblxuICAkLnByb3h5ID0gZnVuY3Rpb24oZm4sIGNvbnRleHQpIHtcbiAgICB2YXIgYXJncyA9ICgyIGluIGFyZ3VtZW50cykgJiYgc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpXG4gICAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICB2YXIgcHJveHlGbiA9IGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmdzID8gYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSA6IGFyZ3VtZW50cykgfVxuICAgICAgcHJveHlGbi5femlkID0gemlkKGZuKVxuICAgICAgcmV0dXJuIHByb3h5Rm5cbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKGNvbnRleHQpKSB7XG4gICAgICBpZiAoYXJncykge1xuICAgICAgICBhcmdzLnVuc2hpZnQoZm5bY29udGV4dF0sIGZuKVxuICAgICAgICByZXR1cm4gJC5wcm94eS5hcHBseShudWxsLCBhcmdzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICQucHJveHkoZm5bY29udGV4dF0sIGZuKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZXhwZWN0ZWQgZnVuY3Rpb25cIilcbiAgICB9XG4gIH1cblxuICAkLmZuLmJpbmQgPSBmdW5jdGlvbihldmVudCwgZGF0YSwgY2FsbGJhY2spe1xuICAgIHJldHVybiB0aGlzLm9uKGV2ZW50LCBkYXRhLCBjYWxsYmFjaylcbiAgfVxuICAkLmZuLnVuYmluZCA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7XG4gICAgcmV0dXJuIHRoaXMub2ZmKGV2ZW50LCBjYWxsYmFjaylcbiAgfVxuICAkLmZuLm9uZSA9IGZ1bmN0aW9uKGV2ZW50LCBzZWxlY3RvciwgZGF0YSwgY2FsbGJhY2spe1xuICAgIHJldHVybiB0aGlzLm9uKGV2ZW50LCBzZWxlY3RvciwgZGF0YSwgY2FsbGJhY2ssIDEpXG4gIH1cblxuICB2YXIgcmV0dXJuVHJ1ZSA9IGZ1bmN0aW9uKCl7cmV0dXJuIHRydWV9LFxuICAgICAgcmV0dXJuRmFsc2UgPSBmdW5jdGlvbigpe3JldHVybiBmYWxzZX0sXG4gICAgICBpZ25vcmVQcm9wZXJ0aWVzID0gL14oW0EtWl18cmV0dXJuVmFsdWUkfGxheWVyW1hZXSQpLyxcbiAgICAgIGV2ZW50TWV0aG9kcyA9IHtcbiAgICAgICAgcHJldmVudERlZmF1bHQ6ICdpc0RlZmF1bHRQcmV2ZW50ZWQnLFxuICAgICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ICdpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCcsXG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbjogJ2lzUHJvcGFnYXRpb25TdG9wcGVkJ1xuICAgICAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhdGlibGUoZXZlbnQsIHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UgfHwgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgc291cmNlIHx8IChzb3VyY2UgPSBldmVudClcblxuICAgICAgJC5lYWNoKGV2ZW50TWV0aG9kcywgZnVuY3Rpb24obmFtZSwgcHJlZGljYXRlKSB7XG4gICAgICAgIHZhciBzb3VyY2VNZXRob2QgPSBzb3VyY2VbbmFtZV1cbiAgICAgICAgZXZlbnRbbmFtZV0gPSBmdW5jdGlvbigpe1xuICAgICAgICAgIHRoaXNbcHJlZGljYXRlXSA9IHJldHVyblRydWVcbiAgICAgICAgICByZXR1cm4gc291cmNlTWV0aG9kICYmIHNvdXJjZU1ldGhvZC5hcHBseShzb3VyY2UsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgICBldmVudFtwcmVkaWNhdGVdID0gcmV0dXJuRmFsc2VcbiAgICAgIH0pXG5cbiAgICAgIGlmIChzb3VyY2UuZGVmYXVsdFByZXZlbnRlZCAhPT0gdW5kZWZpbmVkID8gc291cmNlLmRlZmF1bHRQcmV2ZW50ZWQgOlxuICAgICAgICAgICdyZXR1cm5WYWx1ZScgaW4gc291cmNlID8gc291cmNlLnJldHVyblZhbHVlID09PSBmYWxzZSA6XG4gICAgICAgICAgc291cmNlLmdldFByZXZlbnREZWZhdWx0ICYmIHNvdXJjZS5nZXRQcmV2ZW50RGVmYXVsdCgpKVxuICAgICAgICBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlXG4gICAgfVxuICAgIHJldHVybiBldmVudFxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUHJveHkoZXZlbnQpIHtcbiAgICB2YXIga2V5LCBwcm94eSA9IHsgb3JpZ2luYWxFdmVudDogZXZlbnQgfVxuICAgIGZvciAoa2V5IGluIGV2ZW50KVxuICAgICAgaWYgKCFpZ25vcmVQcm9wZXJ0aWVzLnRlc3Qoa2V5KSAmJiBldmVudFtrZXldICE9PSB1bmRlZmluZWQpIHByb3h5W2tleV0gPSBldmVudFtrZXldXG5cbiAgICByZXR1cm4gY29tcGF0aWJsZShwcm94eSwgZXZlbnQpXG4gIH1cblxuICAkLmZuLmRlbGVnYXRlID0gZnVuY3Rpb24oc2VsZWN0b3IsIGV2ZW50LCBjYWxsYmFjayl7XG4gICAgcmV0dXJuIHRoaXMub24oZXZlbnQsIHNlbGVjdG9yLCBjYWxsYmFjaylcbiAgfVxuICAkLmZuLnVuZGVsZWdhdGUgPSBmdW5jdGlvbihzZWxlY3RvciwgZXZlbnQsIGNhbGxiYWNrKXtcbiAgICByZXR1cm4gdGhpcy5vZmYoZXZlbnQsIHNlbGVjdG9yLCBjYWxsYmFjaylcbiAgfVxuXG4gICQuZm4ubGl2ZSA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7XG4gICAgJChkb2N1bWVudC5ib2R5KS5kZWxlZ2F0ZSh0aGlzLnNlbGVjdG9yLCBldmVudCwgY2FsbGJhY2spXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICAkLmZuLmRpZSA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7XG4gICAgJChkb2N1bWVudC5ib2R5KS51bmRlbGVnYXRlKHRoaXMuc2VsZWN0b3IsIGV2ZW50LCBjYWxsYmFjaylcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgJC5mbi5vbiA9IGZ1bmN0aW9uKGV2ZW50LCBzZWxlY3RvciwgZGF0YSwgY2FsbGJhY2ssIG9uZSl7XG4gICAgdmFyIGF1dG9SZW1vdmUsIGRlbGVnYXRvciwgJHRoaXMgPSB0aGlzXG4gICAgaWYgKGV2ZW50ICYmICFpc1N0cmluZyhldmVudCkpIHtcbiAgICAgICQuZWFjaChldmVudCwgZnVuY3Rpb24odHlwZSwgZm4pe1xuICAgICAgICAkdGhpcy5vbih0eXBlLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSlcbiAgICAgIH0pXG4gICAgICByZXR1cm4gJHRoaXNcbiAgICB9XG5cbiAgICBpZiAoIWlzU3RyaW5nKHNlbGVjdG9yKSAmJiAhaXNGdW5jdGlvbihjYWxsYmFjaykgJiYgY2FsbGJhY2sgIT09IGZhbHNlKVxuICAgICAgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gc2VsZWN0b3IsIHNlbGVjdG9yID0gdW5kZWZpbmVkXG4gICAgaWYgKGlzRnVuY3Rpb24oZGF0YSkgfHwgZGF0YSA9PT0gZmFsc2UpXG4gICAgICBjYWxsYmFjayA9IGRhdGEsIGRhdGEgPSB1bmRlZmluZWRcblxuICAgIGlmIChjYWxsYmFjayA9PT0gZmFsc2UpIGNhbGxiYWNrID0gcmV0dXJuRmFsc2VcblxuICAgIHJldHVybiAkdGhpcy5lYWNoKGZ1bmN0aW9uKF8sIGVsZW1lbnQpe1xuICAgICAgaWYgKG9uZSkgYXV0b1JlbW92ZSA9IGZ1bmN0aW9uKGUpe1xuICAgICAgICByZW1vdmUoZWxlbWVudCwgZS50eXBlLCBjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGVjdG9yKSBkZWxlZ2F0b3IgPSBmdW5jdGlvbihlKXtcbiAgICAgICAgdmFyIGV2dCwgbWF0Y2ggPSAkKGUudGFyZ2V0KS5jbG9zZXN0KHNlbGVjdG9yLCBlbGVtZW50KS5nZXQoMClcbiAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoICE9PSBlbGVtZW50KSB7XG4gICAgICAgICAgZXZ0ID0gJC5leHRlbmQoY3JlYXRlUHJveHkoZSksIHtjdXJyZW50VGFyZ2V0OiBtYXRjaCwgbGl2ZUZpcmVkOiBlbGVtZW50fSlcbiAgICAgICAgICByZXR1cm4gKGF1dG9SZW1vdmUgfHwgY2FsbGJhY2spLmFwcGx5KG1hdGNoLCBbZXZ0XS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhZGQoZWxlbWVudCwgZXZlbnQsIGNhbGxiYWNrLCBkYXRhLCBzZWxlY3RvciwgZGVsZWdhdG9yIHx8IGF1dG9SZW1vdmUpXG4gICAgfSlcbiAgfVxuICAkLmZuLm9mZiA9IGZ1bmN0aW9uKGV2ZW50LCBzZWxlY3RvciwgY2FsbGJhY2spe1xuICAgIHZhciAkdGhpcyA9IHRoaXNcbiAgICBpZiAoZXZlbnQgJiYgIWlzU3RyaW5nKGV2ZW50KSkge1xuICAgICAgJC5lYWNoKGV2ZW50LCBmdW5jdGlvbih0eXBlLCBmbil7XG4gICAgICAgICR0aGlzLm9mZih0eXBlLCBzZWxlY3RvciwgZm4pXG4gICAgICB9KVxuICAgICAgcmV0dXJuICR0aGlzXG4gICAgfVxuXG4gICAgaWYgKCFpc1N0cmluZyhzZWxlY3RvcikgJiYgIWlzRnVuY3Rpb24oY2FsbGJhY2spICYmIGNhbGxiYWNrICE9PSBmYWxzZSlcbiAgICAgIGNhbGxiYWNrID0gc2VsZWN0b3IsIHNlbGVjdG9yID0gdW5kZWZpbmVkXG5cbiAgICBpZiAoY2FsbGJhY2sgPT09IGZhbHNlKSBjYWxsYmFjayA9IHJldHVybkZhbHNlXG5cbiAgICByZXR1cm4gJHRoaXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgcmVtb3ZlKHRoaXMsIGV2ZW50LCBjYWxsYmFjaywgc2VsZWN0b3IpXG4gICAgfSlcbiAgfVxuXG4gICQuZm4udHJpZ2dlciA9IGZ1bmN0aW9uKGV2ZW50LCBhcmdzKXtcbiAgICBldmVudCA9IChpc1N0cmluZyhldmVudCkgfHwgJC5pc1BsYWluT2JqZWN0KGV2ZW50KSkgPyAkLkV2ZW50KGV2ZW50KSA6IGNvbXBhdGlibGUoZXZlbnQpXG4gICAgZXZlbnQuX2FyZ3MgPSBhcmdzXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgLy8gaGFuZGxlIGZvY3VzKCksIGJsdXIoKSBieSBjYWxsaW5nIHRoZW0gZGlyZWN0bHlcbiAgICAgIGlmIChldmVudC50eXBlIGluIGZvY3VzICYmIHR5cGVvZiB0aGlzW2V2ZW50LnR5cGVdID09IFwiZnVuY3Rpb25cIikgdGhpc1tldmVudC50eXBlXSgpXG4gICAgICAvLyBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbiBtaWdodCBub3QgYmUgRE9NIGVsZW1lbnRzXG4gICAgICBlbHNlIGlmICgnZGlzcGF0Y2hFdmVudCcgaW4gdGhpcykgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICAgICAgZWxzZSAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKGV2ZW50LCBhcmdzKVxuICAgIH0pXG4gIH1cblxuICAvLyB0cmlnZ2VycyBldmVudCBoYW5kbGVycyBvbiBjdXJyZW50IGVsZW1lbnQganVzdCBhcyBpZiBhbiBldmVudCBvY2N1cnJlZCxcbiAgLy8gZG9lc24ndCB0cmlnZ2VyIGFuIGFjdHVhbCBldmVudCwgZG9lc24ndCBidWJibGVcbiAgJC5mbi50cmlnZ2VySGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50LCBhcmdzKXtcbiAgICB2YXIgZSwgcmVzdWx0XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGksIGVsZW1lbnQpe1xuICAgICAgZSA9IGNyZWF0ZVByb3h5KGlzU3RyaW5nKGV2ZW50KSA/ICQuRXZlbnQoZXZlbnQpIDogZXZlbnQpXG4gICAgICBlLl9hcmdzID0gYXJnc1xuICAgICAgZS50YXJnZXQgPSBlbGVtZW50XG4gICAgICAkLmVhY2goZmluZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50LnR5cGUgfHwgZXZlbnQpLCBmdW5jdGlvbihpLCBoYW5kbGVyKXtcbiAgICAgICAgcmVzdWx0ID0gaGFuZGxlci5wcm94eShlKVxuICAgICAgICBpZiAoZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSByZXR1cm4gZmFsc2VcbiAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvLyBzaG9ydGN1dCBtZXRob2RzIGZvciBgLmJpbmQoZXZlbnQsIGZuKWAgZm9yIGVhY2ggZXZlbnQgdHlwZVxuICA7KCdmb2N1c2luIGZvY3Vzb3V0IGZvY3VzIGJsdXIgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayAnK1xuICAnbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgJytcbiAgJ2NoYW5nZSBzZWxlY3Qga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvcicpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbihldmVudCkge1xuICAgICQuZm5bZXZlbnRdID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiAoMCBpbiBhcmd1bWVudHMpID9cbiAgICAgICAgdGhpcy5iaW5kKGV2ZW50LCBjYWxsYmFjaykgOlxuICAgICAgICB0aGlzLnRyaWdnZXIoZXZlbnQpXG4gICAgfVxuICB9KVxuXG4gICQuRXZlbnQgPSBmdW5jdGlvbih0eXBlLCBwcm9wcykge1xuICAgIGlmICghaXNTdHJpbmcodHlwZSkpIHByb3BzID0gdHlwZSwgdHlwZSA9IHByb3BzLnR5cGVcbiAgICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChzcGVjaWFsRXZlbnRzW3R5cGVdIHx8ICdFdmVudHMnKSwgYnViYmxlcyA9IHRydWVcbiAgICBpZiAocHJvcHMpIGZvciAodmFyIG5hbWUgaW4gcHJvcHMpIChuYW1lID09ICdidWJibGVzJykgPyAoYnViYmxlcyA9ICEhcHJvcHNbbmFtZV0pIDogKGV2ZW50W25hbWVdID0gcHJvcHNbbmFtZV0pXG4gICAgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGJ1YmJsZXMsIHRydWUpXG4gICAgcmV0dXJuIGNvbXBhdGlibGUoZXZlbnQpXG4gIH1cblxufSkoWmVwdG8pXG5cbjsoZnVuY3Rpb24oJCl7XG4gIHZhciBqc29ucElEID0gMCxcbiAgICAgIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LFxuICAgICAga2V5LFxuICAgICAgbmFtZSxcbiAgICAgIHJzY3JpcHQgPSAvPHNjcmlwdFxcYltePF0qKD86KD8hPFxcL3NjcmlwdD4pPFtePF0qKSo8XFwvc2NyaXB0Pi9naSxcbiAgICAgIHNjcmlwdFR5cGVSRSA9IC9eKD86dGV4dHxhcHBsaWNhdGlvbilcXC9qYXZhc2NyaXB0L2ksXG4gICAgICB4bWxUeXBlUkUgPSAvXig/OnRleHR8YXBwbGljYXRpb24pXFwveG1sL2ksXG4gICAgICBqc29uVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIGh0bWxUeXBlID0gJ3RleHQvaHRtbCcsXG4gICAgICBibGFua1JFID0gL15cXHMqJC8sXG4gICAgICBvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcblxuICBvcmlnaW5BbmNob3IuaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG5cbiAgLy8gdHJpZ2dlciBhIGN1c3RvbSBldmVudCBhbmQgcmV0dXJuIGZhbHNlIGlmIGl0IHdhcyBjYW5jZWxsZWRcbiAgZnVuY3Rpb24gdHJpZ2dlckFuZFJldHVybihjb250ZXh0LCBldmVudE5hbWUsIGRhdGEpIHtcbiAgICB2YXIgZXZlbnQgPSAkLkV2ZW50KGV2ZW50TmFtZSlcbiAgICAkKGNvbnRleHQpLnRyaWdnZXIoZXZlbnQsIGRhdGEpXG4gICAgcmV0dXJuICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKVxuICB9XG5cbiAgLy8gdHJpZ2dlciBhbiBBamF4IFwiZ2xvYmFsXCIgZXZlbnRcbiAgZnVuY3Rpb24gdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgY29udGV4dCwgZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgaWYgKHNldHRpbmdzLmdsb2JhbCkgcmV0dXJuIHRyaWdnZXJBbmRSZXR1cm4oY29udGV4dCB8fCBkb2N1bWVudCwgZXZlbnROYW1lLCBkYXRhKVxuICB9XG5cbiAgLy8gTnVtYmVyIG9mIGFjdGl2ZSBBamF4IHJlcXVlc3RzXG4gICQuYWN0aXZlID0gMFxuXG4gIGZ1bmN0aW9uIGFqYXhTdGFydChzZXR0aW5ncykge1xuICAgIGlmIChzZXR0aW5ncy5nbG9iYWwgJiYgJC5hY3RpdmUrKyA9PT0gMCkgdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgbnVsbCwgJ2FqYXhTdGFydCcpXG4gIH1cbiAgZnVuY3Rpb24gYWpheFN0b3Aoc2V0dGluZ3MpIHtcbiAgICBpZiAoc2V0dGluZ3MuZ2xvYmFsICYmICEoLS0kLmFjdGl2ZSkpIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIG51bGwsICdhamF4U3RvcCcpXG4gIH1cblxuICAvLyB0cmlnZ2VycyBhbiBleHRyYSBnbG9iYWwgZXZlbnQgXCJhamF4QmVmb3JlU2VuZFwiIHRoYXQncyBsaWtlIFwiYWpheFNlbmRcIiBidXQgY2FuY2VsYWJsZVxuICBmdW5jdGlvbiBhamF4QmVmb3JlU2VuZCh4aHIsIHNldHRpbmdzKSB7XG4gICAgdmFyIGNvbnRleHQgPSBzZXR0aW5ncy5jb250ZXh0XG4gICAgaWYgKHNldHRpbmdzLmJlZm9yZVNlbmQuY2FsbChjb250ZXh0LCB4aHIsIHNldHRpbmdzKSA9PT0gZmFsc2UgfHxcbiAgICAgICAgdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgY29udGV4dCwgJ2FqYXhCZWZvcmVTZW5kJywgW3hociwgc2V0dGluZ3NdKSA9PT0gZmFsc2UpXG4gICAgICByZXR1cm4gZmFsc2VcblxuICAgIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIGNvbnRleHQsICdhamF4U2VuZCcsIFt4aHIsIHNldHRpbmdzXSlcbiAgfVxuICBmdW5jdGlvbiBhamF4U3VjY2VzcyhkYXRhLCB4aHIsIHNldHRpbmdzLCBkZWZlcnJlZCkge1xuICAgIHZhciBjb250ZXh0ID0gc2V0dGluZ3MuY29udGV4dCwgc3RhdHVzID0gJ3N1Y2Nlc3MnXG4gICAgc2V0dGluZ3Muc3VjY2Vzcy5jYWxsKGNvbnRleHQsIGRhdGEsIHN0YXR1cywgeGhyKVxuICAgIGlmIChkZWZlcnJlZCkgZGVmZXJyZWQucmVzb2x2ZVdpdGgoY29udGV4dCwgW2RhdGEsIHN0YXR1cywgeGhyXSlcbiAgICB0cmlnZ2VyR2xvYmFsKHNldHRpbmdzLCBjb250ZXh0LCAnYWpheFN1Y2Nlc3MnLCBbeGhyLCBzZXR0aW5ncywgZGF0YV0pXG4gICAgYWpheENvbXBsZXRlKHN0YXR1cywgeGhyLCBzZXR0aW5ncylcbiAgfVxuICAvLyB0eXBlOiBcInRpbWVvdXRcIiwgXCJlcnJvclwiLCBcImFib3J0XCIsIFwicGFyc2VyZXJyb3JcIlxuICBmdW5jdGlvbiBhamF4RXJyb3IoZXJyb3IsIHR5cGUsIHhociwgc2V0dGluZ3MsIGRlZmVycmVkKSB7XG4gICAgdmFyIGNvbnRleHQgPSBzZXR0aW5ncy5jb250ZXh0XG4gICAgc2V0dGluZ3MuZXJyb3IuY2FsbChjb250ZXh0LCB4aHIsIHR5cGUsIGVycm9yKVxuICAgIGlmIChkZWZlcnJlZCkgZGVmZXJyZWQucmVqZWN0V2l0aChjb250ZXh0LCBbeGhyLCB0eXBlLCBlcnJvcl0pXG4gICAgdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgY29udGV4dCwgJ2FqYXhFcnJvcicsIFt4aHIsIHNldHRpbmdzLCBlcnJvciB8fCB0eXBlXSlcbiAgICBhamF4Q29tcGxldGUodHlwZSwgeGhyLCBzZXR0aW5ncylcbiAgfVxuICAvLyBzdGF0dXM6IFwic3VjY2Vzc1wiLCBcIm5vdG1vZGlmaWVkXCIsIFwiZXJyb3JcIiwgXCJ0aW1lb3V0XCIsIFwiYWJvcnRcIiwgXCJwYXJzZXJlcnJvclwiXG4gIGZ1bmN0aW9uIGFqYXhDb21wbGV0ZShzdGF0dXMsIHhociwgc2V0dGluZ3MpIHtcbiAgICB2YXIgY29udGV4dCA9IHNldHRpbmdzLmNvbnRleHRcbiAgICBzZXR0aW5ncy5jb21wbGV0ZS5jYWxsKGNvbnRleHQsIHhociwgc3RhdHVzKVxuICAgIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIGNvbnRleHQsICdhamF4Q29tcGxldGUnLCBbeGhyLCBzZXR0aW5nc10pXG4gICAgYWpheFN0b3Aoc2V0dGluZ3MpXG4gIH1cblxuICAvLyBFbXB0eSBmdW5jdGlvbiwgdXNlZCBhcyBkZWZhdWx0IGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGVtcHR5KCkge31cblxuICAkLmFqYXhKU09OUCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGRlZmVycmVkKXtcbiAgICBpZiAoISgndHlwZScgaW4gb3B0aW9ucykpIHJldHVybiAkLmFqYXgob3B0aW9ucylcblxuICAgIHZhciBfY2FsbGJhY2tOYW1lID0gb3B0aW9ucy5qc29ucENhbGxiYWNrLFxuICAgICAgY2FsbGJhY2tOYW1lID0gKCQuaXNGdW5jdGlvbihfY2FsbGJhY2tOYW1lKSA/XG4gICAgICAgIF9jYWxsYmFja05hbWUoKSA6IF9jYWxsYmFja05hbWUpIHx8ICgnanNvbnAnICsgKCsranNvbnBJRCkpLFxuICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksXG4gICAgICBvcmlnaW5hbENhbGxiYWNrID0gd2luZG93W2NhbGxiYWNrTmFtZV0sXG4gICAgICByZXNwb25zZURhdGEsXG4gICAgICBhYm9ydCA9IGZ1bmN0aW9uKGVycm9yVHlwZSkge1xuICAgICAgICAkKHNjcmlwdCkudHJpZ2dlckhhbmRsZXIoJ2Vycm9yJywgZXJyb3JUeXBlIHx8ICdhYm9ydCcpXG4gICAgICB9LFxuICAgICAgeGhyID0geyBhYm9ydDogYWJvcnQgfSwgYWJvcnRUaW1lb3V0XG5cbiAgICBpZiAoZGVmZXJyZWQpIGRlZmVycmVkLnByb21pc2UoeGhyKVxuXG4gICAgJChzY3JpcHQpLm9uKCdsb2FkIGVycm9yJywgZnVuY3Rpb24oZSwgZXJyb3JUeXBlKXtcbiAgICAgIGNsZWFyVGltZW91dChhYm9ydFRpbWVvdXQpXG4gICAgICAkKHNjcmlwdCkub2ZmKCkucmVtb3ZlKClcblxuICAgICAgaWYgKGUudHlwZSA9PSAnZXJyb3InIHx8ICFyZXNwb25zZURhdGEpIHtcbiAgICAgICAgYWpheEVycm9yKG51bGwsIGVycm9yVHlwZSB8fCAnZXJyb3InLCB4aHIsIG9wdGlvbnMsIGRlZmVycmVkKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWpheFN1Y2Nlc3MocmVzcG9uc2VEYXRhWzBdLCB4aHIsIG9wdGlvbnMsIGRlZmVycmVkKVxuICAgICAgfVxuXG4gICAgICB3aW5kb3dbY2FsbGJhY2tOYW1lXSA9IG9yaWdpbmFsQ2FsbGJhY2tcbiAgICAgIGlmIChyZXNwb25zZURhdGEgJiYgJC5pc0Z1bmN0aW9uKG9yaWdpbmFsQ2FsbGJhY2spKVxuICAgICAgICBvcmlnaW5hbENhbGxiYWNrKHJlc3BvbnNlRGF0YVswXSlcblxuICAgICAgb3JpZ2luYWxDYWxsYmFjayA9IHJlc3BvbnNlRGF0YSA9IHVuZGVmaW5lZFxuICAgIH0pXG5cbiAgICBpZiAoYWpheEJlZm9yZVNlbmQoeGhyLCBvcHRpb25zKSA9PT0gZmFsc2UpIHtcbiAgICAgIGFib3J0KCdhYm9ydCcpXG4gICAgICByZXR1cm4geGhyXG4gICAgfVxuXG4gICAgd2luZG93W2NhbGxiYWNrTmFtZV0gPSBmdW5jdGlvbigpe1xuICAgICAgcmVzcG9uc2VEYXRhID0gYXJndW1lbnRzXG4gICAgfVxuXG4gICAgc2NyaXB0LnNyYyA9IG9wdGlvbnMudXJsLnJlcGxhY2UoL1xcPyguKyk9XFw/LywgJz8kMT0nICsgY2FsbGJhY2tOYW1lKVxuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KVxuXG4gICAgaWYgKG9wdGlvbnMudGltZW91dCA+IDApIGFib3J0VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIGFib3J0KCd0aW1lb3V0JylcbiAgICB9LCBvcHRpb25zLnRpbWVvdXQpXG5cbiAgICByZXR1cm4geGhyXG4gIH1cblxuICAkLmFqYXhTZXR0aW5ncyA9IHtcbiAgICAvLyBEZWZhdWx0IHR5cGUgb2YgcmVxdWVzdFxuICAgIHR5cGU6ICdHRVQnLFxuICAgIC8vIENhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgYmVmb3JlIHJlcXVlc3RcbiAgICBiZWZvcmVTZW5kOiBlbXB0eSxcbiAgICAvLyBDYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzXG4gICAgc3VjY2VzczogZW1wdHksXG4gICAgLy8gQ2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCB0aGUgdGhlIHNlcnZlciBkcm9wcyBlcnJvclxuICAgIGVycm9yOiBlbXB0eSxcbiAgICAvLyBDYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIG9uIHJlcXVlc3QgY29tcGxldGUgKGJvdGg6IGVycm9yIGFuZCBzdWNjZXNzKVxuICAgIGNvbXBsZXRlOiBlbXB0eSxcbiAgICAvLyBUaGUgY29udGV4dCBmb3IgdGhlIGNhbGxiYWNrc1xuICAgIGNvbnRleHQ6IG51bGwsXG4gICAgLy8gV2hldGhlciB0byB0cmlnZ2VyIFwiZ2xvYmFsXCIgQWpheCBldmVudHNcbiAgICBnbG9iYWw6IHRydWUsXG4gICAgLy8gVHJhbnNwb3J0XG4gICAgeGhyOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpXG4gICAgfSxcbiAgICAvLyBNSU1FIHR5cGVzIG1hcHBpbmdcbiAgICAvLyBJSVMgcmV0dXJucyBKYXZhc2NyaXB0IGFzIFwiYXBwbGljYXRpb24veC1qYXZhc2NyaXB0XCJcbiAgICBhY2NlcHRzOiB7XG4gICAgICBzY3JpcHQ6ICd0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtamF2YXNjcmlwdCcsXG4gICAgICBqc29uOiAgIGpzb25UeXBlLFxuICAgICAgeG1sOiAgICAnYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCcsXG4gICAgICBodG1sOiAgIGh0bWxUeXBlLFxuICAgICAgdGV4dDogICAndGV4dC9wbGFpbidcbiAgICB9LFxuICAgIC8vIFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgdG8gYW5vdGhlciBkb21haW5cbiAgICBjcm9zc0RvbWFpbjogZmFsc2UsXG4gICAgLy8gRGVmYXVsdCB0aW1lb3V0XG4gICAgdGltZW91dDogMCxcbiAgICAvLyBXaGV0aGVyIGRhdGEgc2hvdWxkIGJlIHNlcmlhbGl6ZWQgdG8gc3RyaW5nXG4gICAgcHJvY2Vzc0RhdGE6IHRydWUsXG4gICAgLy8gV2hldGhlciB0aGUgYnJvd3NlciBzaG91bGQgYmUgYWxsb3dlZCB0byBjYWNoZSBHRVQgcmVzcG9uc2VzXG4gICAgY2FjaGU6IHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIG1pbWVUb0RhdGFUeXBlKG1pbWUpIHtcbiAgICBpZiAobWltZSkgbWltZSA9IG1pbWUuc3BsaXQoJzsnLCAyKVswXVxuICAgIHJldHVybiBtaW1lICYmICggbWltZSA9PSBodG1sVHlwZSA/ICdodG1sJyA6XG4gICAgICBtaW1lID09IGpzb25UeXBlID8gJ2pzb24nIDpcbiAgICAgIHNjcmlwdFR5cGVSRS50ZXN0KG1pbWUpID8gJ3NjcmlwdCcgOlxuICAgICAgeG1sVHlwZVJFLnRlc3QobWltZSkgJiYgJ3htbCcgKSB8fCAndGV4dCdcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGVuZFF1ZXJ5KHVybCwgcXVlcnkpIHtcbiAgICBpZiAocXVlcnkgPT0gJycpIHJldHVybiB1cmxcbiAgICByZXR1cm4gKHVybCArICcmJyArIHF1ZXJ5KS5yZXBsYWNlKC9bJj9dezEsMn0vLCAnPycpXG4gIH1cblxuICAvLyBzZXJpYWxpemUgcGF5bG9hZCBhbmQgYXBwZW5kIGl0IHRvIHRoZSBVUkwgZm9yIEdFVCByZXF1ZXN0c1xuICBmdW5jdGlvbiBzZXJpYWxpemVEYXRhKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wcm9jZXNzRGF0YSAmJiBvcHRpb25zLmRhdGEgJiYgJC50eXBlKG9wdGlvbnMuZGF0YSkgIT0gXCJzdHJpbmdcIilcbiAgICAgIG9wdGlvbnMuZGF0YSA9ICQucGFyYW0ob3B0aW9ucy5kYXRhLCBvcHRpb25zLnRyYWRpdGlvbmFsKVxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgKCFvcHRpb25zLnR5cGUgfHwgb3B0aW9ucy50eXBlLnRvVXBwZXJDYXNlKCkgPT0gJ0dFVCcpKVxuICAgICAgb3B0aW9ucy51cmwgPSBhcHBlbmRRdWVyeShvcHRpb25zLnVybCwgb3B0aW9ucy5kYXRhKSwgb3B0aW9ucy5kYXRhID0gdW5kZWZpbmVkXG4gIH1cblxuICAkLmFqYXggPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICB2YXIgc2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucyB8fCB7fSksXG4gICAgICAgIGRlZmVycmVkID0gJC5EZWZlcnJlZCAmJiAkLkRlZmVycmVkKCksXG4gICAgICAgIHVybEFuY2hvclxuICAgIGZvciAoa2V5IGluICQuYWpheFNldHRpbmdzKSBpZiAoc2V0dGluZ3Nba2V5XSA9PT0gdW5kZWZpbmVkKSBzZXR0aW5nc1trZXldID0gJC5hamF4U2V0dGluZ3Nba2V5XVxuXG4gICAgYWpheFN0YXJ0KHNldHRpbmdzKVxuXG4gICAgaWYgKCFzZXR0aW5ncy5jcm9zc0RvbWFpbikge1xuICAgICAgdXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXG4gICAgICB1cmxBbmNob3IuaHJlZiA9IHNldHRpbmdzLnVybFxuICAgICAgdXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZlxuICAgICAgc2V0dGluZ3MuY3Jvc3NEb21haW4gPSAob3JpZ2luQW5jaG9yLnByb3RvY29sICsgJy8vJyArIG9yaWdpbkFuY2hvci5ob3N0KSAhPT0gKHVybEFuY2hvci5wcm90b2NvbCArICcvLycgKyB1cmxBbmNob3IuaG9zdClcbiAgICB9XG5cbiAgICBpZiAoIXNldHRpbmdzLnVybCkgc2V0dGluZ3MudXJsID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKClcbiAgICBzZXJpYWxpemVEYXRhKHNldHRpbmdzKVxuXG4gICAgdmFyIGRhdGFUeXBlID0gc2V0dGluZ3MuZGF0YVR5cGUsIGhhc1BsYWNlaG9sZGVyID0gL1xcPy4rPVxcPy8udGVzdChzZXR0aW5ncy51cmwpXG4gICAgaWYgKGhhc1BsYWNlaG9sZGVyKSBkYXRhVHlwZSA9ICdqc29ucCdcblxuICAgIGlmIChzZXR0aW5ncy5jYWNoZSA9PT0gZmFsc2UgfHwgKFxuICAgICAgICAgKCFvcHRpb25zIHx8IG9wdGlvbnMuY2FjaGUgIT09IHRydWUpICYmXG4gICAgICAgICAoJ3NjcmlwdCcgPT0gZGF0YVR5cGUgfHwgJ2pzb25wJyA9PSBkYXRhVHlwZSlcbiAgICAgICAgKSlcbiAgICAgIHNldHRpbmdzLnVybCA9IGFwcGVuZFF1ZXJ5KHNldHRpbmdzLnVybCwgJ189JyArIERhdGUubm93KCkpXG5cbiAgICBpZiAoJ2pzb25wJyA9PSBkYXRhVHlwZSkge1xuICAgICAgaWYgKCFoYXNQbGFjZWhvbGRlcilcbiAgICAgICAgc2V0dGluZ3MudXJsID0gYXBwZW5kUXVlcnkoc2V0dGluZ3MudXJsLFxuICAgICAgICAgIHNldHRpbmdzLmpzb25wID8gKHNldHRpbmdzLmpzb25wICsgJz0/JykgOiBzZXR0aW5ncy5qc29ucCA9PT0gZmFsc2UgPyAnJyA6ICdjYWxsYmFjaz0/JylcbiAgICAgIHJldHVybiAkLmFqYXhKU09OUChzZXR0aW5ncywgZGVmZXJyZWQpXG4gICAgfVxuXG4gICAgdmFyIG1pbWUgPSBzZXR0aW5ncy5hY2NlcHRzW2RhdGFUeXBlXSxcbiAgICAgICAgaGVhZGVycyA9IHsgfSxcbiAgICAgICAgc2V0SGVhZGVyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsgaGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldID0gW25hbWUsIHZhbHVlXSB9LFxuICAgICAgICBwcm90b2NvbCA9IC9eKFtcXHctXSs6KVxcL1xcLy8udGVzdChzZXR0aW5ncy51cmwpID8gUmVnRXhwLiQxIDogd2luZG93LmxvY2F0aW9uLnByb3RvY29sLFxuICAgICAgICB4aHIgPSBzZXR0aW5ncy54aHIoKSxcbiAgICAgICAgbmF0aXZlU2V0SGVhZGVyID0geGhyLnNldFJlcXVlc3RIZWFkZXIsXG4gICAgICAgIGFib3J0VGltZW91dFxuXG4gICAgaWYgKGRlZmVycmVkKSBkZWZlcnJlZC5wcm9taXNlKHhocilcblxuICAgIGlmICghc2V0dGluZ3MuY3Jvc3NEb21haW4pIHNldEhlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsICdYTUxIdHRwUmVxdWVzdCcpXG4gICAgc2V0SGVhZGVyKCdBY2NlcHQnLCBtaW1lIHx8ICcqLyonKVxuICAgIGlmIChtaW1lID0gc2V0dGluZ3MubWltZVR5cGUgfHwgbWltZSkge1xuICAgICAgaWYgKG1pbWUuaW5kZXhPZignLCcpID4gLTEpIG1pbWUgPSBtaW1lLnNwbGl0KCcsJywgMilbMF1cbiAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlKG1pbWUpXG4gICAgfVxuICAgIGlmIChzZXR0aW5ncy5jb250ZW50VHlwZSB8fCAoc2V0dGluZ3MuY29udGVudFR5cGUgIT09IGZhbHNlICYmIHNldHRpbmdzLmRhdGEgJiYgc2V0dGluZ3MudHlwZS50b1VwcGVyQ2FzZSgpICE9ICdHRVQnKSlcbiAgICAgIHNldEhlYWRlcignQ29udGVudC1UeXBlJywgc2V0dGluZ3MuY29udGVudFR5cGUgfHwgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpXG5cbiAgICBpZiAoc2V0dGluZ3MuaGVhZGVycykgZm9yIChuYW1lIGluIHNldHRpbmdzLmhlYWRlcnMpIHNldEhlYWRlcihuYW1lLCBzZXR0aW5ncy5oZWFkZXJzW25hbWVdKVxuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyID0gc2V0SGVhZGVyXG5cbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKXtcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eVxuICAgICAgICBjbGVhclRpbWVvdXQoYWJvcnRUaW1lb3V0KVxuICAgICAgICB2YXIgcmVzdWx0LCBlcnJvciA9IGZhbHNlXG4gICAgICAgIGlmICgoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkgfHwgeGhyLnN0YXR1cyA9PSAzMDQgfHwgKHhoci5zdGF0dXMgPT0gMCAmJiBwcm90b2NvbCA9PSAnZmlsZTonKSkge1xuICAgICAgICAgIGRhdGFUeXBlID0gZGF0YVR5cGUgfHwgbWltZVRvRGF0YVR5cGUoc2V0dGluZ3MubWltZVR5cGUgfHwgeGhyLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXR5cGUnKSlcbiAgICAgICAgICByZXN1bHQgPSB4aHIucmVzcG9uc2VUZXh0XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gaHR0cDovL3BlcmZlY3Rpb25raWxscy5jb20vZ2xvYmFsLWV2YWwtd2hhdC1hcmUtdGhlLW9wdGlvbnMvXG4gICAgICAgICAgICBpZiAoZGF0YVR5cGUgPT0gJ3NjcmlwdCcpICAgICgxLGV2YWwpKHJlc3VsdClcbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGFUeXBlID09ICd4bWwnKSAgcmVzdWx0ID0geGhyLnJlc3BvbnNlWE1MXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhVHlwZSA9PSAnanNvbicpIHJlc3VsdCA9IGJsYW5rUkUudGVzdChyZXN1bHQpID8gbnVsbCA6ICQucGFyc2VKU09OKHJlc3VsdClcbiAgICAgICAgICB9IGNhdGNoIChlKSB7IGVycm9yID0gZSB9XG5cbiAgICAgICAgICBpZiAoZXJyb3IpIGFqYXhFcnJvcihlcnJvciwgJ3BhcnNlcmVycm9yJywgeGhyLCBzZXR0aW5ncywgZGVmZXJyZWQpXG4gICAgICAgICAgZWxzZSBhamF4U3VjY2VzcyhyZXN1bHQsIHhociwgc2V0dGluZ3MsIGRlZmVycmVkKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFqYXhFcnJvcih4aHIuc3RhdHVzVGV4dCB8fCBudWxsLCB4aHIuc3RhdHVzID8gJ2Vycm9yJyA6ICdhYm9ydCcsIHhociwgc2V0dGluZ3MsIGRlZmVycmVkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFqYXhCZWZvcmVTZW5kKHhociwgc2V0dGluZ3MpID09PSBmYWxzZSkge1xuICAgICAgeGhyLmFib3J0KClcbiAgICAgIGFqYXhFcnJvcihudWxsLCAnYWJvcnQnLCB4aHIsIHNldHRpbmdzLCBkZWZlcnJlZClcbiAgICAgIHJldHVybiB4aHJcbiAgICB9XG5cbiAgICBpZiAoc2V0dGluZ3MueGhyRmllbGRzKSBmb3IgKG5hbWUgaW4gc2V0dGluZ3MueGhyRmllbGRzKSB4aHJbbmFtZV0gPSBzZXR0aW5ncy54aHJGaWVsZHNbbmFtZV1cblxuICAgIHZhciBhc3luYyA9ICdhc3luYycgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncy5hc3luYyA6IHRydWVcbiAgICB4aHIub3BlbihzZXR0aW5ncy50eXBlLCBzZXR0aW5ncy51cmwsIGFzeW5jLCBzZXR0aW5ncy51c2VybmFtZSwgc2V0dGluZ3MucGFzc3dvcmQpXG5cbiAgICBmb3IgKG5hbWUgaW4gaGVhZGVycykgbmF0aXZlU2V0SGVhZGVyLmFwcGx5KHhociwgaGVhZGVyc1tuYW1lXSlcblxuICAgIGlmIChzZXR0aW5ncy50aW1lb3V0ID4gMCkgYWJvcnRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHlcbiAgICAgICAgeGhyLmFib3J0KClcbiAgICAgICAgYWpheEVycm9yKG51bGwsICd0aW1lb3V0JywgeGhyLCBzZXR0aW5ncywgZGVmZXJyZWQpXG4gICAgICB9LCBzZXR0aW5ncy50aW1lb3V0KVxuXG4gICAgLy8gYXZvaWQgc2VuZGluZyBlbXB0eSBzdHJpbmcgKCMzMTkpXG4gICAgeGhyLnNlbmQoc2V0dGluZ3MuZGF0YSA/IHNldHRpbmdzLmRhdGEgOiBudWxsKVxuICAgIHJldHVybiB4aHJcbiAgfVxuXG4gIC8vIGhhbmRsZSBvcHRpb25hbCBkYXRhL3N1Y2Nlc3MgYXJndW1lbnRzXG4gIGZ1bmN0aW9uIHBhcnNlQXJndW1lbnRzKHVybCwgZGF0YSwgc3VjY2VzcywgZGF0YVR5cGUpIHtcbiAgICBpZiAoJC5pc0Z1bmN0aW9uKGRhdGEpKSBkYXRhVHlwZSA9IHN1Y2Nlc3MsIHN1Y2Nlc3MgPSBkYXRhLCBkYXRhID0gdW5kZWZpbmVkXG4gICAgaWYgKCEkLmlzRnVuY3Rpb24oc3VjY2VzcykpIGRhdGFUeXBlID0gc3VjY2Vzcywgc3VjY2VzcyA9IHVuZGVmaW5lZFxuICAgIHJldHVybiB7XG4gICAgICB1cmw6IHVybFxuICAgICwgZGF0YTogZGF0YVxuICAgICwgc3VjY2Vzczogc3VjY2Vzc1xuICAgICwgZGF0YVR5cGU6IGRhdGFUeXBlXG4gICAgfVxuICB9XG5cbiAgJC5nZXQgPSBmdW5jdGlvbigvKiB1cmwsIGRhdGEsIHN1Y2Nlc3MsIGRhdGFUeXBlICovKXtcbiAgICByZXR1cm4gJC5hamF4KHBhcnNlQXJndW1lbnRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpXG4gIH1cblxuICAkLnBvc3QgPSBmdW5jdGlvbigvKiB1cmwsIGRhdGEsIHN1Y2Nlc3MsIGRhdGFUeXBlICovKXtcbiAgICB2YXIgb3B0aW9ucyA9IHBhcnNlQXJndW1lbnRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICBvcHRpb25zLnR5cGUgPSAnUE9TVCdcbiAgICByZXR1cm4gJC5hamF4KG9wdGlvbnMpXG4gIH1cblxuICAkLmdldEpTT04gPSBmdW5jdGlvbigvKiB1cmwsIGRhdGEsIHN1Y2Nlc3MgKi8pe1xuICAgIHZhciBvcHRpb25zID0gcGFyc2VBcmd1bWVudHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICAgIG9wdGlvbnMuZGF0YVR5cGUgPSAnanNvbidcbiAgICByZXR1cm4gJC5hamF4KG9wdGlvbnMpXG4gIH1cblxuICAkLmZuLmxvYWQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIHN1Y2Nlc3Mpe1xuICAgIGlmICghdGhpcy5sZW5ndGgpIHJldHVybiB0aGlzXG4gICAgdmFyIHNlbGYgPSB0aGlzLCBwYXJ0cyA9IHVybC5zcGxpdCgvXFxzLyksIHNlbGVjdG9yLFxuICAgICAgICBvcHRpb25zID0gcGFyc2VBcmd1bWVudHModXJsLCBkYXRhLCBzdWNjZXNzKSxcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zLnN1Y2Nlc3NcbiAgICBpZiAocGFydHMubGVuZ3RoID4gMSkgb3B0aW9ucy51cmwgPSBwYXJ0c1swXSwgc2VsZWN0b3IgPSBwYXJ0c1sxXVxuICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgIHNlbGYuaHRtbChzZWxlY3RvciA/XG4gICAgICAgICQoJzxkaXY+JykuaHRtbChyZXNwb25zZS5yZXBsYWNlKHJzY3JpcHQsIFwiXCIpKS5maW5kKHNlbGVjdG9yKVxuICAgICAgICA6IHJlc3BvbnNlKVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suYXBwbHkoc2VsZiwgYXJndW1lbnRzKVxuICAgIH1cbiAgICAkLmFqYXgob3B0aW9ucylcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgdmFyIGVzY2FwZSA9IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZShwYXJhbXMsIG9iaiwgdHJhZGl0aW9uYWwsIHNjb3BlKXtcbiAgICB2YXIgdHlwZSwgYXJyYXkgPSAkLmlzQXJyYXkob2JqKSwgaGFzaCA9ICQuaXNQbGFpbk9iamVjdChvYmopXG4gICAgJC5lYWNoKG9iaiwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdHlwZSA9ICQudHlwZSh2YWx1ZSlcbiAgICAgIGlmIChzY29wZSkga2V5ID0gdHJhZGl0aW9uYWwgPyBzY29wZSA6XG4gICAgICAgIHNjb3BlICsgJ1snICsgKGhhc2ggfHwgdHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdhcnJheScgPyBrZXkgOiAnJykgKyAnXSdcbiAgICAgIC8vIGhhbmRsZSBkYXRhIGluIHNlcmlhbGl6ZUFycmF5KCkgZm9ybWF0XG4gICAgICBpZiAoIXNjb3BlICYmIGFycmF5KSBwYXJhbXMuYWRkKHZhbHVlLm5hbWUsIHZhbHVlLnZhbHVlKVxuICAgICAgLy8gcmVjdXJzZSBpbnRvIG5lc3RlZCBvYmplY3RzXG4gICAgICBlbHNlIGlmICh0eXBlID09IFwiYXJyYXlcIiB8fCAoIXRyYWRpdGlvbmFsICYmIHR5cGUgPT0gXCJvYmplY3RcIikpXG4gICAgICAgIHNlcmlhbGl6ZShwYXJhbXMsIHZhbHVlLCB0cmFkaXRpb25hbCwga2V5KVxuICAgICAgZWxzZSBwYXJhbXMuYWRkKGtleSwgdmFsdWUpXG4gICAgfSlcbiAgfVxuXG4gICQucGFyYW0gPSBmdW5jdGlvbihvYmosIHRyYWRpdGlvbmFsKXtcbiAgICB2YXIgcGFyYW1zID0gW11cbiAgICBwYXJhbXMuYWRkID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCQuaXNGdW5jdGlvbih2YWx1ZSkpIHZhbHVlID0gdmFsdWUoKVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHZhbHVlID0gXCJcIlxuICAgICAgdGhpcy5wdXNoKGVzY2FwZShrZXkpICsgJz0nICsgZXNjYXBlKHZhbHVlKSlcbiAgICB9XG4gICAgc2VyaWFsaXplKHBhcmFtcywgb2JqLCB0cmFkaXRpb25hbClcbiAgICByZXR1cm4gcGFyYW1zLmpvaW4oJyYnKS5yZXBsYWNlKC8lMjAvZywgJysnKVxuICB9XG59KShaZXB0bylcblxuOyhmdW5jdGlvbigkKXtcbiAgJC5mbi5zZXJpYWxpemVBcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuYW1lLCB0eXBlLCByZXN1bHQgPSBbXSxcbiAgICAgIGFkZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZS5mb3JFYWNoKSByZXR1cm4gdmFsdWUuZm9yRWFjaChhZGQpXG4gICAgICAgIHJlc3VsdC5wdXNoKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0pXG4gICAgICB9XG4gICAgaWYgKHRoaXNbMF0pICQuZWFjaCh0aGlzWzBdLmVsZW1lbnRzLCBmdW5jdGlvbihfLCBmaWVsZCl7XG4gICAgICB0eXBlID0gZmllbGQudHlwZSwgbmFtZSA9IGZpZWxkLm5hbWVcbiAgICAgIGlmIChuYW1lICYmIGZpZWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT0gJ2ZpZWxkc2V0JyAmJlxuICAgICAgICAhZmllbGQuZGlzYWJsZWQgJiYgdHlwZSAhPSAnc3VibWl0JyAmJiB0eXBlICE9ICdyZXNldCcgJiYgdHlwZSAhPSAnYnV0dG9uJyAmJiB0eXBlICE9ICdmaWxlJyAmJlxuICAgICAgICAoKHR5cGUgIT0gJ3JhZGlvJyAmJiB0eXBlICE9ICdjaGVja2JveCcpIHx8IGZpZWxkLmNoZWNrZWQpKVxuICAgICAgICAgIGFkZCgkKGZpZWxkKS52YWwoKSlcbiAgICB9KVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gICQuZm4uc2VyaWFsaXplID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgcmVzdWx0ID0gW11cbiAgICB0aGlzLnNlcmlhbGl6ZUFycmF5KCkuZm9yRWFjaChmdW5jdGlvbihlbG0pe1xuICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGVsbS5uYW1lKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChlbG0udmFsdWUpKVxuICAgIH0pXG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCcmJylcbiAgfVxuXG4gICQuZm4uc3VibWl0ID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZiAoMCBpbiBhcmd1bWVudHMpIHRoaXMuYmluZCgnc3VibWl0JywgY2FsbGJhY2spXG4gICAgZWxzZSBpZiAodGhpcy5sZW5ndGgpIHtcbiAgICAgIHZhciBldmVudCA9ICQuRXZlbnQoJ3N1Ym1pdCcpXG4gICAgICB0aGlzLmVxKDApLnRyaWdnZXIoZXZlbnQpXG4gICAgICBpZiAoIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB0aGlzLmdldCgwKS5zdWJtaXQoKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0pKFplcHRvKVxuXG47KGZ1bmN0aW9uKCQpe1xuICAvLyBfX3Byb3RvX18gZG9lc24ndCBleGlzdCBvbiBJRTwxMSwgc28gcmVkZWZpbmVcbiAgLy8gdGhlIFogZnVuY3Rpb24gdG8gdXNlIG9iamVjdCBleHRlbnNpb24gaW5zdGVhZFxuICBpZiAoISgnX19wcm90b19fJyBpbiB7fSkpIHtcbiAgICAkLmV4dGVuZCgkLnplcHRvLCB7XG4gICAgICBaOiBmdW5jdGlvbihkb20sIHNlbGVjdG9yKXtcbiAgICAgICAgZG9tID0gZG9tIHx8IFtdXG4gICAgICAgICQuZXh0ZW5kKGRvbSwgJC5mbilcbiAgICAgICAgZG9tLnNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJydcbiAgICAgICAgZG9tLl9fWiA9IHRydWVcbiAgICAgICAgcmV0dXJuIGRvbVxuICAgICAgfSxcbiAgICAgIC8vIHRoaXMgaXMgYSBrbHVkZ2UgYnV0IHdvcmtzXG4gICAgICBpc1o6IGZ1bmN0aW9uKG9iamVjdCl7XG4gICAgICAgIHJldHVybiAkLnR5cGUob2JqZWN0KSA9PT0gJ2FycmF5JyAmJiAnX19aJyBpbiBvYmplY3RcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gZ2V0Q29tcHV0ZWRTdHlsZSBzaG91bGRuJ3QgZnJlYWsgb3V0IHdoZW4gY2FsbGVkXG4gIC8vIHdpdGhvdXQgYSB2YWxpZCBlbGVtZW50IGFzIGFyZ3VtZW50XG4gIHRyeSB7XG4gICAgZ2V0Q29tcHV0ZWRTdHlsZSh1bmRlZmluZWQpXG4gIH0gY2F0Y2goZSkge1xuICAgIHZhciBuYXRpdmVHZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZTtcbiAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgfVxufSkoWmVwdG8pXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qcy9saWIvemVwdG8uanNcbiAqKi8iLCIvKiBodHRwOi8vcHJpc21qcy5jb20vZG93bmxvYWQuaHRtbD90aGVtZXM9cHJpc20mbGFuZ3VhZ2VzPW1hcmt1cCtjc3MrY2xpa2UramF2YXNjcmlwdCthc3BuZXQrYmFzaCtjK2NzaGFycCtjcHArcnVieStjc3MtZXh0cmFzK2dpdCtnbytqYXZhK2pzb24rbGVzcyttYXJrZG93bitwZXJsK3BocCtwaHAtZXh0cmFzK3B5dGhvbitqc3grc2NzcytzcWwrc3dpZnQmcGx1Z2lucz1saW5lLW51bWJlcnMgKi9cbnZhciBfc2VsZj1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUmJnNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZT9zZWxmOnt9LFByaXNtPWZ1bmN0aW9uKCl7dmFyIGU9L1xcYmxhbmcoPzp1YWdlKT8tKFxcdyspXFxiL2ksdD0wLG49X3NlbGYuUHJpc209e3V0aWw6e2VuY29kZTpmdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIGE/bmV3IGEoZS50eXBlLG4udXRpbC5lbmNvZGUoZS5jb250ZW50KSxlLmFsaWFzKTpcIkFycmF5XCI9PT1uLnV0aWwudHlwZShlKT9lLm1hcChuLnV0aWwuZW5jb2RlKTplLnJlcGxhY2UoLyYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZyxcIiZsdDtcIikucmVwbGFjZSgvXFx1MDBhMC9nLFwiIFwiKX0sdHlwZTpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLm1hdGNoKC9cXFtvYmplY3QgKFxcdyspXFxdLylbMV19LG9iaklkOmZ1bmN0aW9uKGUpe3JldHVybiBlLl9faWR8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19pZFwiLHt2YWx1ZTorK3R9KSxlLl9faWR9LGNsb25lOmZ1bmN0aW9uKGUpe3ZhciB0PW4udXRpbC50eXBlKGUpO3N3aXRjaCh0KXtjYXNlXCJPYmplY3RcIjp2YXIgYT17fTtmb3IodmFyIHIgaW4gZSllLmhhc093blByb3BlcnR5KHIpJiYoYVtyXT1uLnV0aWwuY2xvbmUoZVtyXSkpO3JldHVybiBhO2Nhc2VcIkFycmF5XCI6cmV0dXJuIGUubWFwJiZlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gbi51dGlsLmNsb25lKGUpfSl9cmV0dXJuIGV9fSxsYW5ndWFnZXM6e2V4dGVuZDpmdW5jdGlvbihlLHQpe3ZhciBhPW4udXRpbC5jbG9uZShuLmxhbmd1YWdlc1tlXSk7Zm9yKHZhciByIGluIHQpYVtyXT10W3JdO3JldHVybiBhfSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24oZSx0LGEscil7cj1yfHxuLmxhbmd1YWdlczt2YXIgbD1yW2VdO2lmKDI9PWFyZ3VtZW50cy5sZW5ndGgpe2E9YXJndW1lbnRzWzFdO2Zvcih2YXIgaSBpbiBhKWEuaGFzT3duUHJvcGVydHkoaSkmJihsW2ldPWFbaV0pO3JldHVybiBsfXZhciBvPXt9O2Zvcih2YXIgcyBpbiBsKWlmKGwuaGFzT3duUHJvcGVydHkocykpe2lmKHM9PXQpZm9yKHZhciBpIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShpKSYmKG9baV09YVtpXSk7b1tzXT1sW3NdfXJldHVybiBuLmxhbmd1YWdlcy5ERlMobi5sYW5ndWFnZXMsZnVuY3Rpb24odCxuKXtuPT09cltlXSYmdCE9ZSYmKHRoaXNbdF09byl9KSxyW2VdPW99LERGUzpmdW5jdGlvbihlLHQsYSxyKXtyPXJ8fHt9O2Zvcih2YXIgbCBpbiBlKWUuaGFzT3duUHJvcGVydHkobCkmJih0LmNhbGwoZSxsLGVbbF0sYXx8bCksXCJPYmplY3RcIiE9PW4udXRpbC50eXBlKGVbbF0pfHxyW24udXRpbC5vYmpJZChlW2xdKV0/XCJBcnJheVwiIT09bi51dGlsLnR5cGUoZVtsXSl8fHJbbi51dGlsLm9iaklkKGVbbF0pXXx8KHJbbi51dGlsLm9iaklkKGVbbF0pXT0hMCxuLmxhbmd1YWdlcy5ERlMoZVtsXSx0LGwscikpOihyW24udXRpbC5vYmpJZChlW2xdKV09ITAsbi5sYW5ndWFnZXMuREZTKGVbbF0sdCxudWxsLHIpKSl9fSxwbHVnaW5zOnt9LGhpZ2hsaWdodEFsbDpmdW5jdGlvbihlLHQpe3ZhciBhPXtjYWxsYmFjazp0LHNlbGVjdG9yOidjb2RlW2NsYXNzKj1cImxhbmd1YWdlLVwiXSwgW2NsYXNzKj1cImxhbmd1YWdlLVwiXSBjb2RlLCBjb2RlW2NsYXNzKj1cImxhbmctXCJdLCBbY2xhc3MqPVwibGFuZy1cIl0gY29kZSd9O24uaG9va3MucnVuKFwiYmVmb3JlLWhpZ2hsaWdodGFsbFwiLGEpO2Zvcih2YXIgcixsPWEuZWxlbWVudHN8fGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYS5zZWxlY3RvciksaT0wO3I9bFtpKytdOyluLmhpZ2hsaWdodEVsZW1lbnQocixlPT09ITAsYS5jYWxsYmFjayl9LGhpZ2hsaWdodEVsZW1lbnQ6ZnVuY3Rpb24odCxhLHIpe2Zvcih2YXIgbCxpLG89dDtvJiYhZS50ZXN0KG8uY2xhc3NOYW1lKTspbz1vLnBhcmVudE5vZGU7byYmKGw9KG8uY2xhc3NOYW1lLm1hdGNoKGUpfHxbLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpLGk9bi5sYW5ndWFnZXNbbF0pLHQuY2xhc3NOYW1lPXQuY2xhc3NOYW1lLnJlcGxhY2UoZSxcIlwiKS5yZXBsYWNlKC9cXHMrL2csXCIgXCIpK1wiIGxhbmd1YWdlLVwiK2wsbz10LnBhcmVudE5vZGUsL3ByZS9pLnRlc3Qoby5ub2RlTmFtZSkmJihvLmNsYXNzTmFtZT1vLmNsYXNzTmFtZS5yZXBsYWNlKGUsXCJcIikucmVwbGFjZSgvXFxzKy9nLFwiIFwiKStcIiBsYW5ndWFnZS1cIitsKTt2YXIgcz10LnRleHRDb250ZW50LHU9e2VsZW1lbnQ6dCxsYW5ndWFnZTpsLGdyYW1tYXI6aSxjb2RlOnN9O2lmKG4uaG9va3MucnVuKFwiYmVmb3JlLXNhbml0eS1jaGVja1wiLHUpLCF1LmNvZGV8fCF1LmdyYW1tYXIpcmV0dXJuIG4uaG9va3MucnVuKFwiY29tcGxldGVcIix1KSx2b2lkIDA7aWYobi5ob29rcy5ydW4oXCJiZWZvcmUtaGlnaGxpZ2h0XCIsdSksYSYmX3NlbGYuV29ya2VyKXt2YXIgYz1uZXcgV29ya2VyKG4uZmlsZW5hbWUpO2Mub25tZXNzYWdlPWZ1bmN0aW9uKGUpe3UuaGlnaGxpZ2h0ZWRDb2RlPWUuZGF0YSxuLmhvb2tzLnJ1bihcImJlZm9yZS1pbnNlcnRcIix1KSx1LmVsZW1lbnQuaW5uZXJIVE1MPXUuaGlnaGxpZ2h0ZWRDb2RlLHImJnIuY2FsbCh1LmVsZW1lbnQpLG4uaG9va3MucnVuKFwiYWZ0ZXItaGlnaGxpZ2h0XCIsdSksbi5ob29rcy5ydW4oXCJjb21wbGV0ZVwiLHUpfSxjLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtsYW5ndWFnZTp1Lmxhbmd1YWdlLGNvZGU6dS5jb2RlLGltbWVkaWF0ZUNsb3NlOiEwfSkpfWVsc2UgdS5oaWdobGlnaHRlZENvZGU9bi5oaWdobGlnaHQodS5jb2RlLHUuZ3JhbW1hcix1Lmxhbmd1YWdlKSxuLmhvb2tzLnJ1bihcImJlZm9yZS1pbnNlcnRcIix1KSx1LmVsZW1lbnQuaW5uZXJIVE1MPXUuaGlnaGxpZ2h0ZWRDb2RlLHImJnIuY2FsbCh0KSxuLmhvb2tzLnJ1bihcImFmdGVyLWhpZ2hsaWdodFwiLHUpLG4uaG9va3MucnVuKFwiY29tcGxldGVcIix1KX0saGlnaGxpZ2h0OmZ1bmN0aW9uKGUsdCxyKXt2YXIgbD1uLnRva2VuaXplKGUsdCk7cmV0dXJuIGEuc3RyaW5naWZ5KG4udXRpbC5lbmNvZGUobCkscil9LHRva2VuaXplOmZ1bmN0aW9uKGUsdCl7dmFyIGE9bi5Ub2tlbixyPVtlXSxsPXQucmVzdDtpZihsKXtmb3IodmFyIGkgaW4gbCl0W2ldPWxbaV07ZGVsZXRlIHQucmVzdH1lOmZvcih2YXIgaSBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkoaSkmJnRbaV0pe3ZhciBvPXRbaV07bz1cIkFycmF5XCI9PT1uLnV0aWwudHlwZShvKT9vOltvXTtmb3IodmFyIHM9MDtzPG8ubGVuZ3RoOysrcyl7dmFyIHU9b1tzXSxjPXUuaW5zaWRlLGc9ISF1Lmxvb2tiZWhpbmQsaD0hIXUuZ3JlZWR5LGY9MCxkPXUuYWxpYXM7dT11LnBhdHRlcm58fHU7Zm9yKHZhciBwPTA7cDxyLmxlbmd0aDtwKyspe3ZhciBtPXJbcF07aWYoci5sZW5ndGg+ZS5sZW5ndGgpYnJlYWsgZTtpZighKG0gaW5zdGFuY2VvZiBhKSl7dS5sYXN0SW5kZXg9MDt2YXIgeT11LmV4ZWMobSksdj0xO2lmKCF5JiZoJiZwIT1yLmxlbmd0aC0xKXt2YXIgYj1yW3ArMV0ubWF0Y2hlZFN0cnx8cltwKzFdLGs9bStiO2lmKHA8ci5sZW5ndGgtMiYmKGsrPXJbcCsyXS5tYXRjaGVkU3RyfHxyW3ArMl0pLHUubGFzdEluZGV4PTAseT11LmV4ZWMoayksIXkpY29udGludWU7dmFyIHc9eS5pbmRleCsoZz95WzFdLmxlbmd0aDowKTtpZih3Pj1tLmxlbmd0aCljb250aW51ZTt2YXIgXz15LmluZGV4K3lbMF0ubGVuZ3RoLFA9bS5sZW5ndGgrYi5sZW5ndGg7aWYodj0zLFA+PV8pe2lmKHJbcCsxXS5ncmVlZHkpY29udGludWU7dj0yLGs9ay5zbGljZSgwLFApfW09a31pZih5KXtnJiYoZj15WzFdLmxlbmd0aCk7dmFyIHc9eS5pbmRleCtmLHk9eVswXS5zbGljZShmKSxfPXcreS5sZW5ndGgsUz1tLnNsaWNlKDAsdyksTz1tLnNsaWNlKF8pLGo9W3Asdl07UyYmai5wdXNoKFMpO3ZhciBBPW5ldyBhKGksYz9uLnRva2VuaXplKHksYyk6eSxkLHksaCk7ai5wdXNoKEEpLE8mJmoucHVzaChPKSxBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KHIsail9fX19fXJldHVybiByfSxob29rczp7YWxsOnt9LGFkZDpmdW5jdGlvbihlLHQpe3ZhciBhPW4uaG9va3MuYWxsO2FbZV09YVtlXXx8W10sYVtlXS5wdXNoKHQpfSxydW46ZnVuY3Rpb24oZSx0KXt2YXIgYT1uLmhvb2tzLmFsbFtlXTtpZihhJiZhLmxlbmd0aClmb3IodmFyIHIsbD0wO3I9YVtsKytdOylyKHQpfX19LGE9bi5Ub2tlbj1mdW5jdGlvbihlLHQsbixhLHIpe3RoaXMudHlwZT1lLHRoaXMuY29udGVudD10LHRoaXMuYWxpYXM9bix0aGlzLm1hdGNoZWRTdHI9YXx8bnVsbCx0aGlzLmdyZWVkeT0hIXJ9O2lmKGEuc3RyaW5naWZ5PWZ1bmN0aW9uKGUsdCxyKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gZTtpZihcIkFycmF5XCI9PT1uLnV0aWwudHlwZShlKSlyZXR1cm4gZS5tYXAoZnVuY3Rpb24obil7cmV0dXJuIGEuc3RyaW5naWZ5KG4sdCxlKX0pLmpvaW4oXCJcIik7dmFyIGw9e3R5cGU6ZS50eXBlLGNvbnRlbnQ6YS5zdHJpbmdpZnkoZS5jb250ZW50LHQsciksdGFnOlwic3BhblwiLGNsYXNzZXM6W1widG9rZW5cIixlLnR5cGVdLGF0dHJpYnV0ZXM6e30sbGFuZ3VhZ2U6dCxwYXJlbnQ6cn07aWYoXCJjb21tZW50XCI9PWwudHlwZSYmKGwuYXR0cmlidXRlcy5zcGVsbGNoZWNrPVwidHJ1ZVwiKSxlLmFsaWFzKXt2YXIgaT1cIkFycmF5XCI9PT1uLnV0aWwudHlwZShlLmFsaWFzKT9lLmFsaWFzOltlLmFsaWFzXTtBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShsLmNsYXNzZXMsaSl9bi5ob29rcy5ydW4oXCJ3cmFwXCIsbCk7dmFyIG89XCJcIjtmb3IodmFyIHMgaW4gbC5hdHRyaWJ1dGVzKW8rPShvP1wiIFwiOlwiXCIpK3MrJz1cIicrKGwuYXR0cmlidXRlc1tzXXx8XCJcIikrJ1wiJztyZXR1cm5cIjxcIitsLnRhZysnIGNsYXNzPVwiJytsLmNsYXNzZXMuam9pbihcIiBcIikrJ1wiICcrbytcIj5cIitsLmNvbnRlbnQrXCI8L1wiK2wudGFnK1wiPlwifSwhX3NlbGYuZG9jdW1lbnQpcmV0dXJuIF9zZWxmLmFkZEV2ZW50TGlzdGVuZXI/KF9zZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oZSl7dmFyIHQ9SlNPTi5wYXJzZShlLmRhdGEpLGE9dC5sYW5ndWFnZSxyPXQuY29kZSxsPXQuaW1tZWRpYXRlQ2xvc2U7X3NlbGYucG9zdE1lc3NhZ2Uobi5oaWdobGlnaHQocixuLmxhbmd1YWdlc1thXSxhKSksbCYmX3NlbGYuY2xvc2UoKX0sITEpLF9zZWxmLlByaXNtKTpfc2VsZi5QcmlzbTt2YXIgcj1kb2N1bWVudC5jdXJyZW50U2NyaXB0fHxbXS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpKS5wb3AoKTtyZXR1cm4gciYmKG4uZmlsZW5hbWU9ci5zcmMsZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciYmIXIuaGFzQXR0cmlidXRlKFwiZGF0YS1tYW51YWxcIikmJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsbi5oaWdobGlnaHRBbGwpKSxfc2VsZi5QcmlzbX0oKTtcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cyYmKG1vZHVsZS5leHBvcnRzPVByaXNtKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiYoZ2xvYmFsLlByaXNtPVByaXNtKTtcblByaXNtLmxhbmd1YWdlcy5tYXJrdXA9e2NvbW1lbnQ6LzwhLS1bXFx3XFxXXSo/LS0+Lyxwcm9sb2c6LzxcXD9bXFx3XFxXXSs/XFw/Pi8sZG9jdHlwZTovPCFET0NUWVBFW1xcd1xcV10rPz4vLGNkYXRhOi88IVxcW0NEQVRBXFxbW1xcd1xcV10qP11dPi9pLHRhZzp7cGF0dGVybjovPFxcLz8oPyFcXGQpW15cXHM+XFwvPS4kPF0rKD86XFxzK1teXFxzPlxcLz1dKyg/Oj0oPzooXCJ8JykoPzpcXFxcXFwxfFxcXFw/KD8hXFwxKVtcXHdcXFddKSpcXDF8W15cXHMnXCI+PV0rKSk/KSpcXHMqXFwvPz4vaSxpbnNpZGU6e3RhZzp7cGF0dGVybjovXjxcXC8/W15cXHM+XFwvXSsvaSxpbnNpZGU6e3B1bmN0dWF0aW9uOi9ePFxcLz8vLG5hbWVzcGFjZTovXlteXFxzPlxcLzpdKzovfX0sXCJhdHRyLXZhbHVlXCI6e3BhdHRlcm46Lz0oPzooJ3xcIilbXFx3XFxXXSo/KFxcMSl8W15cXHM+XSspL2ksaW5zaWRlOntwdW5jdHVhdGlvbjovWz0+XCInXS99fSxwdW5jdHVhdGlvbjovXFwvPz4vLFwiYXR0ci1uYW1lXCI6e3BhdHRlcm46L1teXFxzPlxcL10rLyxpbnNpZGU6e25hbWVzcGFjZTovXlteXFxzPlxcLzpdKzovfX19fSxlbnRpdHk6LyYjP1tcXGRhLXpdezEsOH07L2l9LFByaXNtLmhvb2tzLmFkZChcIndyYXBcIixmdW5jdGlvbihhKXtcImVudGl0eVwiPT09YS50eXBlJiYoYS5hdHRyaWJ1dGVzLnRpdGxlPWEuY29udGVudC5yZXBsYWNlKC8mYW1wOy8sXCImXCIpKX0pLFByaXNtLmxhbmd1YWdlcy54bWw9UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCxQcmlzbS5sYW5ndWFnZXMuaHRtbD1QcmlzbS5sYW5ndWFnZXMubWFya3VwLFByaXNtLmxhbmd1YWdlcy5tYXRobWw9UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCxQcmlzbS5sYW5ndWFnZXMuc3ZnPVByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5QcmlzbS5sYW5ndWFnZXMuY3NzPXtjb21tZW50Oi9cXC9cXCpbXFx3XFxXXSo/XFwqXFwvLyxhdHJ1bGU6e3BhdHRlcm46L0BbXFx3LV0rPy4qPyg7fCg/PVxccypcXHspKS9pLGluc2lkZTp7cnVsZTovQFtcXHctXSsvfX0sdXJsOi91cmxcXCgoPzooW1wiJ10pKFxcXFwoPzpcXHJcXG58W1xcd1xcV10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDF8Lio/KVxcKS9pLHNlbGVjdG9yOi9bXlxce1xcfVxcc11bXlxce1xcfTtdKj8oPz1cXHMqXFx7KS8sc3RyaW5nOi8oXCJ8JykoXFxcXCg/OlxcclxcbnxbXFx3XFxXXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8scHJvcGVydHk6LyhcXGJ8XFxCKVtcXHctXSsoPz1cXHMqOikvaSxpbXBvcnRhbnQ6L1xcQiFpbXBvcnRhbnRcXGIvaSxcImZ1bmN0aW9uXCI6L1stYS16MC05XSsoPz1cXCgpL2kscHVuY3R1YXRpb246L1soKXt9OzpdL30sUHJpc20ubGFuZ3VhZ2VzLmNzcy5hdHJ1bGUuaW5zaWRlLnJlc3Q9UHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMuY3NzKSxQcmlzbS5sYW5ndWFnZXMubWFya3VwJiYoUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcIm1hcmt1cFwiLFwidGFnXCIse3N0eWxlOntwYXR0ZXJuOi8oPHN0eWxlW1xcd1xcV10qPz4pW1xcd1xcV10qPyg/PTxcXC9zdHlsZT4pL2ksbG9va2JlaGluZDohMCxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLmNzcyxhbGlhczpcImxhbmd1YWdlLWNzc1wifX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJpbnNpZGVcIixcImF0dHItdmFsdWVcIix7XCJzdHlsZS1hdHRyXCI6e3BhdHRlcm46L1xccypzdHlsZT0oXCJ8JykuKj9cXDEvaSxpbnNpZGU6e1wiYXR0ci1uYW1lXCI6e3BhdHRlcm46L15cXHMqc3R5bGUvaSxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuaW5zaWRlfSxwdW5jdHVhdGlvbjovXlxccyo9XFxzKlsnXCJdfFsnXCJdXFxzKiQvLFwiYXR0ci12YWx1ZVwiOntwYXR0ZXJuOi8uKy9pLGluc2lkZTpQcmlzbS5sYW5ndWFnZXMuY3NzfX0sYWxpYXM6XCJsYW5ndWFnZS1jc3NcIn19LFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnKSk7XG5QcmlzbS5sYW5ndWFnZXMuY2xpa2U9e2NvbW1lbnQ6W3twYXR0ZXJuOi8oXnxbXlxcXFxdKVxcL1xcKltcXHdcXFddKj9cXCpcXC8vLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sbG9va2JlaGluZDohMH1dLHN0cmluZzp7cGF0dGVybjovKFtcIiddKShcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxncmVlZHk6ITB9LFwiY2xhc3MtbmFtZVwiOntwYXR0ZXJuOi8oKD86XFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3x0cmFpdHxpbnN0YW5jZW9mfG5ldylcXHMrKXwoPzpjYXRjaFxccytcXCgpKVthLXowLTlfXFwuXFxcXF0rL2ksbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi8oXFwufFxcXFwpL319LGtleXdvcmQ6L1xcYihpZnxlbHNlfHdoaWxlfGRvfGZvcnxyZXR1cm58aW58aW5zdGFuY2VvZnxmdW5jdGlvbnxuZXd8dHJ5fHRocm93fGNhdGNofGZpbmFsbHl8bnVsbHxicmVha3xjb250aW51ZSlcXGIvLFwiYm9vbGVhblwiOi9cXGIodHJ1ZXxmYWxzZSlcXGIvLFwiZnVuY3Rpb25cIjovW2EtejAtOV9dKyg/PVxcKCkvaSxudW1iZXI6L1xcYi0/KD86MHhbXFxkYS1mXSt8XFxkKlxcLj9cXGQrKD86ZVsrLV0/XFxkKyk/KVxcYi9pLG9wZXJhdG9yOi8tLT98XFwrXFwrP3whPT89P3w8PT98Pj0/fD09Pz0/fCYmP3xcXHxcXHw/fFxcP3xcXCp8XFwvfH58XFxefCUvLHB1bmN0dWF0aW9uOi9be31bXFxdOygpLC46XS99O1xuUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse2tleXdvcmQ6L1xcYihhc3xhc3luY3xhd2FpdHxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5fGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKVxcYi8sbnVtYmVyOi9cXGItPygweFtcXGRBLUZhLWZdK3wwYlswMV0rfDBvWzAtN10rfFxcZCpcXC4/XFxkKyhbRWVdWystXT9cXGQrKT98TmFOfEluZmluaXR5KVxcYi8sXCJmdW5jdGlvblwiOi9bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVtfJGEtekEtWjAtOVxceEEwLVxcdUZGRkZdKig/PVxcKCkvaX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJqYXZhc2NyaXB0XCIsXCJrZXl3b3JkXCIse3JlZ2V4OntwYXR0ZXJuOi8oXnxbXlxcL10pXFwvKD8hXFwvKShcXFsuKz9dfFxcXFwufFteXFwvXFxcXFxcclxcbl0pK1xcL1tnaW15dV17MCw1fSg/PVxccyooJHxbXFxyXFxuLC47fSldKSkvLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwfX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJqYXZhc2NyaXB0XCIsXCJjbGFzcy1uYW1lXCIse1widGVtcGxhdGUtc3RyaW5nXCI6e3BhdHRlcm46L2AoPzpcXFxcXFxcXHxcXFxcP1teXFxcXF0pKj9gLyxncmVlZHk6ITAsaW5zaWRlOntpbnRlcnBvbGF0aW9uOntwYXR0ZXJuOi9cXCRcXHtbXn1dK1xcfS8saW5zaWRlOntcImludGVycG9sYXRpb24tcHVuY3R1YXRpb25cIjp7cGF0dGVybjovXlxcJFxce3xcXH0kLyxhbGlhczpcInB1bmN0dWF0aW9uXCJ9LHJlc3Q6UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHR9fSxzdHJpbmc6L1tcXHNcXFNdKy99fX0pLFByaXNtLmxhbmd1YWdlcy5tYXJrdXAmJlByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJtYXJrdXBcIixcInRhZ1wiLHtzY3JpcHQ6e3BhdHRlcm46Lyg8c2NyaXB0W1xcd1xcV10qPz4pW1xcd1xcV10qPyg/PTxcXC9zY3JpcHQ+KS9pLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0LGFsaWFzOlwibGFuZ3VhZ2UtamF2YXNjcmlwdFwifX0pLFByaXNtLmxhbmd1YWdlcy5qcz1QcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdDtcblByaXNtLmxhbmd1YWdlcy5hc3BuZXQ9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcIm1hcmt1cFwiLHtcInBhZ2UtZGlyZWN0aXZlIHRhZ1wiOntwYXR0ZXJuOi88JVxccypALiolPi9pLGluc2lkZTp7XCJwYWdlLWRpcmVjdGl2ZSB0YWdcIjovPCVcXHMqQFxccyooPzpBc3NlbWJseXxDb250cm9sfEltcGxlbWVudHN8SW1wb3J0fE1hc3Rlcig/OlR5cGUpP3xPdXRwdXRDYWNoZXxQYWdlfFByZXZpb3VzUGFnZVR5cGV8UmVmZXJlbmNlfFJlZ2lzdGVyKT98JT4vaSxyZXN0OlByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLmluc2lkZX19LFwiZGlyZWN0aXZlIHRhZ1wiOntwYXR0ZXJuOi88JS4qJT4vaSxpbnNpZGU6e1wiZGlyZWN0aXZlIHRhZ1wiOi88JVxccyo/WyQ9JSM6XXswLDJ9fCU+L2kscmVzdDpQcmlzbS5sYW5ndWFnZXMuY3NoYXJwfX19KSxQcmlzbS5sYW5ndWFnZXMuYXNwbmV0LnRhZy5wYXR0ZXJuPS88KD8hJSlcXC8/W15cXHM+XFwvXSsoPzpcXHMrW15cXHM+XFwvPV0rKD86PSg/OihcInwnKSg/OlxcXFxcXDF8XFxcXD8oPyFcXDEpW1xcd1xcV10pKlxcMXxbXlxccydcIj49XSspKT8pKlxccypcXC8/Pi9pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJpbnNpZGVcIixcInB1bmN0dWF0aW9uXCIse1wiZGlyZWN0aXZlIHRhZ1wiOlByaXNtLmxhbmd1YWdlcy5hc3BuZXRbXCJkaXJlY3RpdmUgdGFnXCJdfSxQcmlzbS5sYW5ndWFnZXMuYXNwbmV0LnRhZy5pbnNpZGVbXCJhdHRyLXZhbHVlXCJdKSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiYXNwbmV0XCIsXCJjb21tZW50XCIse1wiYXNwIGNvbW1lbnRcIjovPCUtLVtcXHdcXFddKj8tLSU+L30pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJhc3BuZXRcIixQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdD9cInNjcmlwdFwiOlwidGFnXCIse1wiYXNwIHNjcmlwdFwiOntwYXR0ZXJuOi8oPHNjcmlwdCg/PS4qcnVuYXQ9WydcIl0/c2VydmVyWydcIl0/KVtcXHdcXFddKj8+KVtcXHdcXFddKj8oPz08XFwvc2NyaXB0PikvaSxsb29rYmVoaW5kOiEwLGluc2lkZTpQcmlzbS5sYW5ndWFnZXMuY3NoYXJwfHx7fX19KTtcbiFmdW5jdGlvbihlKXt2YXIgdD17dmFyaWFibGU6W3twYXR0ZXJuOi9cXCQ/XFwoXFwoW1xcd1xcV10rP1xcKVxcKS8saW5zaWRlOnt2YXJpYWJsZTpbe3BhdHRlcm46LyheXFwkXFwoXFwoW1xcd1xcV10rKVxcKVxcKS8sbG9va2JlaGluZDohMH0sL15cXCRcXChcXCgvXSxudW1iZXI6L1xcYi0/KD86MHhbXFxkQS1GYS1mXSt8XFxkKlxcLj9cXGQrKD86W0VlXS0/XFxkKyk/KVxcYi8sb3BlcmF0b3I6Ly0tP3wtPXxcXCtcXCs/fFxcKz18IT0/fH58XFwqXFwqP3xcXCo9fFxcLz0/fCU9P3w8PD0/fD4+PT98PD0/fD49P3w9PT98JiY/fCY9fFxcXj0/fFxcfFxcfD98XFx8PXxcXD98Oi8scHVuY3R1YXRpb246L1xcKFxcKD98XFwpXFwpP3wsfDsvfX0se3BhdHRlcm46L1xcJFxcKFteKV0rXFwpfGBbXmBdK2AvLGluc2lkZTp7dmFyaWFibGU6L15cXCRcXCh8XmB8XFwpJHxgJC99fSwvXFwkKD86W2EtejAtOV8jXFw/XFwqIUBdK3xcXHtbXn1dK1xcfSkvaV19O2UubGFuZ3VhZ2VzLmJhc2g9e3NoZWJhbmc6e3BhdHRlcm46L14jIVxccypcXC9iaW5cXC9iYXNofF4jIVxccypcXC9iaW5cXC9zaC8sYWxpYXM6XCJpbXBvcnRhbnRcIn0sY29tbWVudDp7cGF0dGVybjovKF58W15cIntcXFxcXSkjLiovLGxvb2tiZWhpbmQ6ITB9LHN0cmluZzpbe3BhdHRlcm46LygoPzpefFtePF0pPDxcXHMqKSg/OlwifCcpPyhcXHcrPykoPzpcInwnKT9cXHMqXFxyP1xcbig/OltcXHNcXFNdKSo/XFxyP1xcblxcMi9nLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwLGluc2lkZTp0fSx7cGF0dGVybjovKFtcIiddKSg/OlxcXFxcXFxcfFxcXFw/W15cXFxcXSkqP1xcMS9nLGdyZWVkeTohMCxpbnNpZGU6dH1dLHZhcmlhYmxlOnQudmFyaWFibGUsXCJmdW5jdGlvblwiOntwYXR0ZXJuOi8oXnxcXHN8O3xcXHx8JikoPzphbGlhc3xhcHJvcG9zfGFwdC1nZXR8YXB0aXR1ZGV8YXNwZWxsfGF3a3xiYXNlbmFtZXxiYXNofGJjfGJnfGJ1aWx0aW58YnppcDJ8Y2FsfGNhdHxjZHxjZmRpc2t8Y2hncnB8Y2htb2R8Y2hvd258Y2hyb290fGNoa2NvbmZpZ3xja3N1bXxjbGVhcnxjbXB8Y29tbXxjb21tYW5kfGNwfGNyb258Y3JvbnRhYnxjc3BsaXR8Y3V0fGRhdGV8ZGN8ZGR8ZGRyZXNjdWV8ZGZ8ZGlmZnxkaWZmM3xkaWd8ZGlyfGRpcmNvbG9yc3xkaXJuYW1lfGRpcnN8ZG1lc2d8ZHV8ZWdyZXB8ZWplY3R8ZW5hYmxlfGVudnxldGh0b29sfGV2YWx8ZXhlY3xleHBhbmR8ZXhwZWN0fGV4cG9ydHxleHByfGZkZm9ybWF0fGZkaXNrfGZnfGZncmVwfGZpbGV8ZmluZHxmbXR8Zm9sZHxmb3JtYXR8ZnJlZXxmc2NrfGZ0cHxmdXNlcnxnYXdrfGdldG9wdHN8Z2l0fGdyZXB8Z3JvdXBhZGR8Z3JvdXBkZWx8Z3JvdXBtb2R8Z3JvdXBzfGd6aXB8aGFzaHxoZWFkfGhlbHB8aGd8aGlzdG9yeXxob3N0bmFtZXxodG9wfGljb252fGlkfGlmY29uZmlnfGlmZG93bnxpZnVwfGltcG9ydHxpbnN0YWxsfGpvYnN8am9pbnxraWxsfGtpbGxhbGx8bGVzc3xsaW5rfGxufGxvY2F0ZXxsb2duYW1lfGxvZ291dHxsb29rfGxwY3xscHJ8bHByaW50fGxwcmludGR8bHByaW50cXxscHJtfGxzfGxzb2Z8bWFrZXxtYW58bWtkaXJ8bWtmaWZvfG1raXNvZnN8bWtub2R8bW9yZXxtb3N0fG1vdW50fG10b29sc3xtdHJ8bXZ8bW12fG5hbm98bmV0c3RhdHxuaWNlfG5sfG5vaHVwfG5vdGlmeS1zZW5kfG5zbG9va3VwfG9wZW58b3B8cGFzc3dkfHBhc3RlfHBhdGhjaGt8cGluZ3xwa2lsbHxwb3BkfHByfHByaW50Y2FwfHByaW50ZW52fHByaW50Znxwc3xwdXNoZHxwdnxwd2R8cXVvdGF8cXVvdGFjaGVja3xxdW90YWN0bHxyYW18cmFyfHJjcHxyZWFkfHJlYWRhcnJheXxyZWFkb25seXxyZWJvb3R8cmVuYW1lfHJlbmljZXxyZW1zeW5jfHJldnxybXxybWRpcnxyc3luY3xzY3JlZW58c2NwfHNkaWZmfHNlZHxzZXF8c2VydmljZXxzZnRwfHNoaWZ0fHNob3B0fHNodXRkb3dufHNsZWVwfHNsb2NhdGV8c29ydHxzb3VyY2V8c3BsaXR8c3NofHN0YXR8c3RyYWNlfHN1fHN1ZG98c3VtfHN1c3BlbmR8c3luY3x0YWlsfHRhcnx0ZWV8dGVzdHx0aW1lfHRpbWVvdXR8dGltZXN8dG91Y2h8dG9wfHRyYWNlcm91dGV8dHJhcHx0cnx0c29ydHx0dHl8dHlwZXx1bGltaXR8dW1hc2t8dW1vdW50fHVuYWxpYXN8dW5hbWV8dW5leHBhbmR8dW5pcXx1bml0c3x1bnJhcnx1bnNoYXJ8dXB0aW1lfHVzZXJhZGR8dXNlcmRlbHx1c2VybW9kfHVzZXJzfHV1ZW5jb2RlfHV1ZGVjb2RlfHZ8dmRpcnx2aXx2bXN0YXR8d2FpdHx3YXRjaHx3Y3x3Z2V0fHdoZXJlaXN8d2hpY2h8d2hvfHdob2FtaXx3cml0ZXx4YXJnc3x4ZGctb3Blbnx5ZXN8emlwKSg/PSR8XFxzfDt8XFx8fCYpLyxsb29rYmVoaW5kOiEwfSxrZXl3b3JkOntwYXR0ZXJuOi8oXnxcXHN8O3xcXHx8JikoPzpsZXR8OnxcXC58aWZ8dGhlbnxlbHNlfGVsaWZ8Zml8Zm9yfGJyZWFrfGNvbnRpbnVlfHdoaWxlfGlufGNhc2V8ZnVuY3Rpb258c2VsZWN0fGRvfGRvbmV8dW50aWx8ZWNob3xleGl0fHJldHVybnxzZXR8ZGVjbGFyZSkoPz0kfFxcc3w7fFxcfHwmKS8sbG9va2JlaGluZDohMH0sXCJib29sZWFuXCI6e3BhdHRlcm46LyhefFxcc3w7fFxcfHwmKSg/OnRydWV8ZmFsc2UpKD89JHxcXHN8O3xcXHx8JikvLGxvb2tiZWhpbmQ6ITB9LG9wZXJhdG9yOi8mJj98XFx8XFx8P3w9PT98IT0/fDw8PD98Pj58PD0/fD49P3w9fi8scHVuY3R1YXRpb246L1xcJD9cXChcXCg/fFxcKVxcKT98XFwuXFwufFt7fVtcXF07XS99O3ZhciBhPXQudmFyaWFibGVbMV0uaW5zaWRlO2FbXCJmdW5jdGlvblwiXT1lLmxhbmd1YWdlcy5iYXNoW1wiZnVuY3Rpb25cIl0sYS5rZXl3b3JkPWUubGFuZ3VhZ2VzLmJhc2gua2V5d29yZCxhLmJvb2xlYW49ZS5sYW5ndWFnZXMuYmFzaC5ib29sZWFuLGEub3BlcmF0b3I9ZS5sYW5ndWFnZXMuYmFzaC5vcGVyYXRvcixhLnB1bmN0dWF0aW9uPWUubGFuZ3VhZ2VzLmJhc2gucHVuY3R1YXRpb259KFByaXNtKTtcblByaXNtLmxhbmd1YWdlcy5jPVByaXNtLmxhbmd1YWdlcy5leHRlbmQoXCJjbGlrZVwiLHtrZXl3b3JkOi9cXGIoYXNtfHR5cGVvZnxpbmxpbmV8YXV0b3xicmVha3xjYXNlfGNoYXJ8Y29uc3R8Y29udGludWV8ZGVmYXVsdHxkb3xkb3VibGV8ZWxzZXxlbnVtfGV4dGVybnxmbG9hdHxmb3J8Z290b3xpZnxpbnR8bG9uZ3xyZWdpc3RlcnxyZXR1cm58c2hvcnR8c2lnbmVkfHNpemVvZnxzdGF0aWN8c3RydWN0fHN3aXRjaHx0eXBlZGVmfHVuaW9ufHVuc2lnbmVkfHZvaWR8dm9sYXRpbGV8d2hpbGUpXFxiLyxvcGVyYXRvcjovXFwtWz4tXT98XFwrXFwrP3whPT98PDw/PT98Pj4/PT98PT0/fCYmP3xcXHw/XFx8fFt+XiU/KlxcL10vLG51bWJlcjovXFxiLT8oPzoweFtcXGRhLWZdK3xcXGQqXFwuP1xcZCsoPzplWystXT9cXGQrKT8pW2Z1bF0qXFxiL2l9KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiY1wiLFwic3RyaW5nXCIse21hY3JvOntwYXR0ZXJuOi8oXlxccyopI1xccypbYS16XSsoW15cXHJcXG5cXFxcXXxcXFxcLnxcXFxcKD86XFxyXFxuP3xcXG4pKSovaW0sbG9va2JlaGluZDohMCxhbGlhczpcInByb3BlcnR5XCIsaW5zaWRlOntzdHJpbmc6e3BhdHRlcm46LygjXFxzKmluY2x1ZGVcXHMqKSg8Lis/PnwoXCJ8JykoXFxcXD8uKSs/XFwzKS8sbG9va2JlaGluZDohMH0sZGlyZWN0aXZlOntwYXR0ZXJuOi8oI1xccyopXFxiKGRlZmluZXxlbGlmfGVsc2V8ZW5kaWZ8ZXJyb3J8aWZkZWZ8aWZuZGVmfGlmfGltcG9ydHxpbmNsdWRlfGxpbmV8cHJhZ21hfHVuZGVmfHVzaW5nKVxcYi8sbG9va2JlaGluZDohMCxhbGlhczpcImtleXdvcmRcIn19fSxjb25zdGFudDovXFxiKF9fRklMRV9ffF9fTElORV9ffF9fREFURV9ffF9fVElNRV9ffF9fVElNRVNUQU1QX198X19mdW5jX198RU9GfE5VTEx8c3RkaW58c3Rkb3V0fHN0ZGVycilcXGIvfSksZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5jW1wiY2xhc3MtbmFtZVwiXSxkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLmNbXCJib29sZWFuXCJdO1xuUHJpc20ubGFuZ3VhZ2VzLmNzaGFycD1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY2xpa2VcIix7a2V5d29yZDovXFxiKGFic3RyYWN0fGFzfGFzeW5jfGF3YWl0fGJhc2V8Ym9vbHxicmVha3xieXRlfGNhc2V8Y2F0Y2h8Y2hhcnxjaGVja2VkfGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlY2ltYWx8ZGVmYXVsdHxkZWxlZ2F0ZXxkb3xkb3VibGV8ZWxzZXxlbnVtfGV2ZW50fGV4cGxpY2l0fGV4dGVybnxmYWxzZXxmaW5hbGx5fGZpeGVkfGZsb2F0fGZvcnxmb3JlYWNofGdvdG98aWZ8aW1wbGljaXR8aW58aW50fGludGVyZmFjZXxpbnRlcm5hbHxpc3xsb2NrfGxvbmd8bmFtZXNwYWNlfG5ld3xudWxsfG9iamVjdHxvcGVyYXRvcnxvdXR8b3ZlcnJpZGV8cGFyYW1zfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZWFkb25seXxyZWZ8cmV0dXJufHNieXRlfHNlYWxlZHxzaG9ydHxzaXplb2Z8c3RhY2thbGxvY3xzdGF0aWN8c3RyaW5nfHN0cnVjdHxzd2l0Y2h8dGhpc3x0aHJvd3x0cnVlfHRyeXx0eXBlb2Z8dWludHx1bG9uZ3x1bmNoZWNrZWR8dW5zYWZlfHVzaG9ydHx1c2luZ3x2aXJ0dWFsfHZvaWR8dm9sYXRpbGV8d2hpbGV8YWRkfGFsaWFzfGFzY2VuZGluZ3xhc3luY3xhd2FpdHxkZXNjZW5kaW5nfGR5bmFtaWN8ZnJvbXxnZXR8Z2xvYmFsfGdyb3VwfGludG98am9pbnxsZXR8b3JkZXJieXxwYXJ0aWFsfHJlbW92ZXxzZWxlY3R8c2V0fHZhbHVlfHZhcnx3aGVyZXx5aWVsZClcXGIvLHN0cmluZzpbL0AoXCJ8JykoXFwxXFwxfFxcXFxcXDF8XFxcXD8oPyFcXDEpW1xcc1xcU10pKlxcMS8sLyhcInwnKShcXFxcPy4pKj9cXDEvXSxudW1iZXI6L1xcYi0/KDB4W1xcZGEtZl0rfFxcZCpcXC4/XFxkK2Y/KVxcYi9pfSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImNzaGFycFwiLFwia2V5d29yZFwiLHtcImdlbmVyaWMtbWV0aG9kXCI6e3BhdHRlcm46L1thLXowLTlfXStcXHMqPFtePlxcclxcbl0rPz5cXHMqKD89XFwoKS9pLGFsaWFzOlwiZnVuY3Rpb25cIixpbnNpZGU6e2tleXdvcmQ6UHJpc20ubGFuZ3VhZ2VzLmNzaGFycC5rZXl3b3JkLHB1bmN0dWF0aW9uOi9bPD4oKSwuOl0vfX0scHJlcHJvY2Vzc29yOntwYXR0ZXJuOi8oXlxccyopIy4qL20sbG9va2JlaGluZDohMCxhbGlhczpcInByb3BlcnR5XCIsaW5zaWRlOntkaXJlY3RpdmU6e3BhdHRlcm46LyhcXHMqIylcXGIoZGVmaW5lfGVsaWZ8ZWxzZXxlbmRpZnxlbmRyZWdpb258ZXJyb3J8aWZ8bGluZXxwcmFnbWF8cmVnaW9ufHVuZGVmfHdhcm5pbmcpXFxiLyxsb29rYmVoaW5kOiEwLGFsaWFzOlwia2V5d29yZFwifX19fSk7XG5QcmlzbS5sYW5ndWFnZXMuY3BwPVByaXNtLmxhbmd1YWdlcy5leHRlbmQoXCJjXCIse2tleXdvcmQ6L1xcYihhbGlnbmFzfGFsaWdub2Z8YXNtfGF1dG98Ym9vbHxicmVha3xjYXNlfGNhdGNofGNoYXJ8Y2hhcjE2X3R8Y2hhcjMyX3R8Y2xhc3N8Y29tcGx8Y29uc3R8Y29uc3RleHByfGNvbnN0X2Nhc3R8Y29udGludWV8ZGVjbHR5cGV8ZGVmYXVsdHxkZWxldGV8ZG98ZG91YmxlfGR5bmFtaWNfY2FzdHxlbHNlfGVudW18ZXhwbGljaXR8ZXhwb3J0fGV4dGVybnxmbG9hdHxmb3J8ZnJpZW5kfGdvdG98aWZ8aW5saW5lfGludHxsb25nfG11dGFibGV8bmFtZXNwYWNlfG5ld3xub2V4Y2VwdHxudWxscHRyfG9wZXJhdG9yfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZWdpc3RlcnxyZWludGVycHJldF9jYXN0fHJldHVybnxzaG9ydHxzaWduZWR8c2l6ZW9mfHN0YXRpY3xzdGF0aWNfYXNzZXJ0fHN0YXRpY19jYXN0fHN0cnVjdHxzd2l0Y2h8dGVtcGxhdGV8dGhpc3x0aHJlYWRfbG9jYWx8dGhyb3d8dHJ5fHR5cGVkZWZ8dHlwZWlkfHR5cGVuYW1lfHVuaW9ufHVuc2lnbmVkfHVzaW5nfHZpcnR1YWx8dm9pZHx2b2xhdGlsZXx3Y2hhcl90fHdoaWxlKVxcYi8sXCJib29sZWFuXCI6L1xcYih0cnVlfGZhbHNlKVxcYi8sb3BlcmF0b3I6L1stK117MSwyfXwhPT98PHsxLDJ9PT98PnsxLDJ9PT98XFwtPnw6ezEsMn18PXsxLDJ9fFxcXnx+fCV8JnsxLDJ9fFxcfD9cXHx8XFw/fFxcKnxcXC98XFxiKGFuZHxhbmRfZXF8Yml0YW5kfGJpdG9yfG5vdHxub3RfZXF8b3J8b3JfZXF8eG9yfHhvcl9lcSlcXGIvfSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImNwcFwiLFwia2V5d29yZFwiLHtcImNsYXNzLW5hbWVcIjp7cGF0dGVybjovKGNsYXNzXFxzKylbYS16MC05X10rL2ksbG9va2JlaGluZDohMH19KTtcbiFmdW5jdGlvbihlKXtlLmxhbmd1YWdlcy5ydWJ5PWUubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse2NvbW1lbnQ6LyMoPyFcXHtbXlxcclxcbl0qP1xcfSkuKi8sa2V5d29yZDovXFxiKGFsaWFzfGFuZHxCRUdJTnxiZWdpbnxicmVha3xjYXNlfGNsYXNzfGRlZnxkZWZpbmVfbWV0aG9kfGRlZmluZWR8ZG98ZWFjaHxlbHNlfGVsc2lmfEVORHxlbmR8ZW5zdXJlfGZhbHNlfGZvcnxpZnxpbnxtb2R1bGV8bmV3fG5leHR8bmlsfG5vdHxvcnxyYWlzZXxyZWRvfHJlcXVpcmV8cmVzY3VlfHJldHJ5fHJldHVybnxzZWxmfHN1cGVyfHRoZW58dGhyb3d8dHJ1ZXx1bmRlZnx1bmxlc3N8dW50aWx8d2hlbnx3aGlsZXx5aWVsZClcXGIvfSk7dmFyIG49e3BhdHRlcm46LyNcXHtbXn1dK1xcfS8saW5zaWRlOntkZWxpbWl0ZXI6e3BhdHRlcm46L14jXFx7fFxcfSQvLGFsaWFzOlwidGFnXCJ9LHJlc3Q6ZS51dGlsLmNsb25lKGUubGFuZ3VhZ2VzLnJ1YnkpfX07ZS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwicnVieVwiLFwia2V5d29yZFwiLHtyZWdleDpbe3BhdHRlcm46LyVyKFteYS16QS1aMC05XFxzXFx7XFwoXFxbPF0pKD86W15cXFxcXXxcXFxcW1xcc1xcU10pKj9cXDFbZ2ltXXswLDN9LyxpbnNpZGU6e2ludGVycG9sYXRpb246bn19LHtwYXR0ZXJuOi8lclxcKCg/OlteKClcXFxcXXxcXFxcW1xcc1xcU10pKlxcKVtnaW1dezAsM30vLGluc2lkZTp7aW50ZXJwb2xhdGlvbjpufX0se3BhdHRlcm46LyVyXFx7KD86W14je31cXFxcXXwjKD86XFx7W159XStcXH0pP3xcXFxcW1xcc1xcU10pKlxcfVtnaW1dezAsM30vLGluc2lkZTp7aW50ZXJwb2xhdGlvbjpufX0se3BhdHRlcm46LyVyXFxbKD86W15cXFtcXF1cXFxcXXxcXFxcW1xcc1xcU10pKlxcXVtnaW1dezAsM30vLGluc2lkZTp7aW50ZXJwb2xhdGlvbjpufX0se3BhdHRlcm46LyVyPCg/OltePD5cXFxcXXxcXFxcW1xcc1xcU10pKj5bZ2ltXXswLDN9LyxpbnNpZGU6e2ludGVycG9sYXRpb246bn19LHtwYXR0ZXJuOi8oXnxbXlxcL10pXFwvKD8hXFwvKShcXFsuKz9dfFxcXFwufFteXFwvXFxyXFxuXSkrXFwvW2dpbV17MCwzfSg/PVxccyooJHxbXFxyXFxuLC47fSldKSkvLGxvb2tiZWhpbmQ6ITB9XSx2YXJpYWJsZTovW0AkXStbYS16QS1aX11bYS16QS1aXzAtOV0qKD86Wz8hXXxcXGIpLyxzeW1ib2w6LzpbYS16QS1aX11bYS16QS1aXzAtOV0qKD86Wz8hXXxcXGIpL30pLGUubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcInJ1YnlcIixcIm51bWJlclwiLHtidWlsdGluOi9cXGIoQXJyYXl8QmlnbnVtfEJpbmRpbmd8Q2xhc3N8Q29udGludWF0aW9ufERpcnxFeGNlcHRpb258RmFsc2VDbGFzc3xGaWxlfFN0YXR8RmlsZXxGaXhudW18RmxvYWR8SGFzaHxJbnRlZ2VyfElPfE1hdGNoRGF0YXxNZXRob2R8TW9kdWxlfE5pbENsYXNzfE51bWVyaWN8T2JqZWN0fFByb2N8UmFuZ2V8UmVnZXhwfFN0cmluZ3xTdHJ1Y3R8VE1TfFN5bWJvbHxUaHJlYWRHcm91cHxUaHJlYWR8VGltZXxUcnVlQ2xhc3MpXFxiLyxjb25zdGFudDovXFxiW0EtWl1bYS16QS1aXzAtOV0qKD86Wz8hXXxcXGIpL30pLGUubGFuZ3VhZ2VzLnJ1Ynkuc3RyaW5nPVt7cGF0dGVybjovJVtxUWlJd1d4c10/KFteYS16QS1aMC05XFxzXFx7XFwoXFxbPF0pKD86W15cXFxcXXxcXFxcW1xcc1xcU10pKj9cXDEvLGluc2lkZTp7aW50ZXJwb2xhdGlvbjpufX0se3BhdHRlcm46LyVbcVFpSXdXeHNdP1xcKCg/OlteKClcXFxcXXxcXFxcW1xcc1xcU10pKlxcKS8saW5zaWRlOntpbnRlcnBvbGF0aW9uOm59fSx7cGF0dGVybjovJVtxUWlJd1d4c10/XFx7KD86W14je31cXFxcXXwjKD86XFx7W159XStcXH0pP3xcXFxcW1xcc1xcU10pKlxcfS8saW5zaWRlOntpbnRlcnBvbGF0aW9uOm59fSx7cGF0dGVybjovJVtxUWlJd1d4c10/XFxbKD86W15cXFtcXF1cXFxcXXxcXFxcW1xcc1xcU10pKlxcXS8saW5zaWRlOntpbnRlcnBvbGF0aW9uOm59fSx7cGF0dGVybjovJVtxUWlJd1d4c10/PCg/OltePD5cXFxcXXxcXFxcW1xcc1xcU10pKj4vLGluc2lkZTp7aW50ZXJwb2xhdGlvbjpufX0se3BhdHRlcm46LyhcInwnKSgjXFx7W159XStcXH18XFxcXCg/Olxccj9cXG58XFxyKXxcXFxcPy4pKj9cXDEvLGluc2lkZTp7aW50ZXJwb2xhdGlvbjpufX1dfShQcmlzbSk7XG5QcmlzbS5sYW5ndWFnZXMuY3NzLnNlbGVjdG9yPXtwYXR0ZXJuOi9bXlxce1xcfVxcc11bXlxce1xcfV0qKD89XFxzKlxceykvLGluc2lkZTp7XCJwc2V1ZG8tZWxlbWVudFwiOi86KD86YWZ0ZXJ8YmVmb3JlfGZpcnN0LWxldHRlcnxmaXJzdC1saW5lfHNlbGVjdGlvbil8OjpbLVxcd10rLyxcInBzZXVkby1jbGFzc1wiOi86Wy1cXHddKyg/OlxcKC4qXFwpKT8vLFwiY2xhc3NcIjovXFwuWy06XFwuXFx3XSsvLGlkOi8jWy06XFwuXFx3XSsvfX0sUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImNzc1wiLFwiZnVuY3Rpb25cIix7aGV4Y29kZTovI1tcXGRhLWZdezMsNn0vaSxlbnRpdHk6L1xcXFxbXFxkYS1mXXsxLDh9L2ksbnVtYmVyOi9bXFxkJVxcLl0rL30pO1xuUHJpc20ubGFuZ3VhZ2VzLmdpdD17Y29tbWVudDovXiMuKi9tLGRlbGV0ZWQ6L15bLeKAk10uKi9tLGluc2VydGVkOi9eXFwrLiovbSxzdHJpbmc6LyhcInwnKShcXFxcPy4pKj9cXDEvbSxjb21tYW5kOntwYXR0ZXJuOi9eLipcXCQgZ2l0IC4qJC9tLGluc2lkZTp7cGFyYW1ldGVyOi9cXHMoLS18LSlcXHcrL219fSxjb29yZDovXkBALipAQCQvbSxjb21taXRfc2hhMTovXmNvbW1pdCBcXHd7NDB9JC9tfTtcblByaXNtLmxhbmd1YWdlcy5nbz1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY2xpa2VcIix7a2V5d29yZDovXFxiKGJyZWFrfGNhc2V8Y2hhbnxjb25zdHxjb250aW51ZXxkZWZhdWx0fGRlZmVyfGVsc2V8ZmFsbHRocm91Z2h8Zm9yfGZ1bmN8Z28odG8pP3xpZnxpbXBvcnR8aW50ZXJmYWNlfG1hcHxwYWNrYWdlfHJhbmdlfHJldHVybnxzZWxlY3R8c3RydWN0fHN3aXRjaHx0eXBlfHZhcilcXGIvLGJ1aWx0aW46L1xcYihib29sfGJ5dGV8Y29tcGxleCg2NHwxMjgpfGVycm9yfGZsb2F0KDMyfDY0KXxydW5lfHN0cmluZ3x1P2ludCg4fDE2fDMyfDY0fCl8dWludHB0cnxhcHBlbmR8Y2FwfGNsb3NlfGNvbXBsZXh8Y29weXxkZWxldGV8aW1hZ3xsZW58bWFrZXxuZXd8cGFuaWN8cHJpbnQobG4pP3xyZWFsfHJlY292ZXIpXFxiLyxcImJvb2xlYW5cIjovXFxiKF98aW90YXxuaWx8dHJ1ZXxmYWxzZSlcXGIvLG9wZXJhdG9yOi9bKlxcLyVeIT1dPT98XFwrWz0rXT98LVs9LV0/fFxcfFs9fF0/fCYoPzo9fCZ8XFxePT8pP3w+KD86Pj0/fD0pP3w8KD86PD0/fD18LSk/fDo9fFxcLlxcLlxcLi8sbnVtYmVyOi9cXGIoLT8oMHhbYS1mXFxkXSt8KFxcZCtcXC4/XFxkKnxcXC5cXGQrKShlWy0rXT9cXGQrKT8paT8pXFxiL2ksc3RyaW5nOi8oXCJ8J3xgKShcXFxcPy58XFxyfFxcbikqP1xcMS99KSxkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLmdvW1wiY2xhc3MtbmFtZVwiXTtcblByaXNtLmxhbmd1YWdlcy5qYXZhPVByaXNtLmxhbmd1YWdlcy5leHRlbmQoXCJjbGlrZVwiLHtrZXl3b3JkOi9cXGIoYWJzdHJhY3R8Y29udGludWV8Zm9yfG5ld3xzd2l0Y2h8YXNzZXJ0fGRlZmF1bHR8Z290b3xwYWNrYWdlfHN5bmNocm9uaXplZHxib29sZWFufGRvfGlmfHByaXZhdGV8dGhpc3xicmVha3xkb3VibGV8aW1wbGVtZW50c3xwcm90ZWN0ZWR8dGhyb3d8Ynl0ZXxlbHNlfGltcG9ydHxwdWJsaWN8dGhyb3dzfGNhc2V8ZW51bXxpbnN0YW5jZW9mfHJldHVybnx0cmFuc2llbnR8Y2F0Y2h8ZXh0ZW5kc3xpbnR8c2hvcnR8dHJ5fGNoYXJ8ZmluYWx8aW50ZXJmYWNlfHN0YXRpY3x2b2lkfGNsYXNzfGZpbmFsbHl8bG9uZ3xzdHJpY3RmcHx2b2xhdGlsZXxjb25zdHxmbG9hdHxuYXRpdmV8c3VwZXJ8d2hpbGUpXFxiLyxudW1iZXI6L1xcYjBiWzAxXStcXGJ8XFxiMHhbXFxkYS1mXSpcXC4/W1xcZGEtZnBcXC1dK1xcYnxcXGJcXGQqXFwuP1xcZCsoPzplWystXT9cXGQrKT9bZGZdP1xcYi9pLG9wZXJhdG9yOntwYXR0ZXJuOi8oXnxbXi5dKSg/OlxcK1srPV0/fC1bLT1dP3whPT98PDw/PT98Pj4/Pj89P3w9PT98JlsmPV0/fFxcfFt8PV0/fFxcKj0/fFxcLz0/fCU9P3xcXF49P3xbPzp+XSkvbSxsb29rYmVoaW5kOiEwfX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJqYXZhXCIsXCJmdW5jdGlvblwiLHthbm5vdGF0aW9uOnthbGlhczpcInB1bmN0dWF0aW9uXCIscGF0dGVybjovKF58W14uXSlAXFx3Ky8sbG9va2JlaGluZDohMH19KTtcblByaXNtLmxhbmd1YWdlcy5qc29uPXtwcm9wZXJ0eTovXCIuKj9cIig/PVxccyo6KS9naSxzdHJpbmc6L1wiKD8hOikoXFxcXD9bXlwiXSkqP1wiKD8hOikvZyxudW1iZXI6L1xcYi0/KDB4W1xcZEEtRmEtZl0rfFxcZCpcXC4/XFxkKyhbRWVdLT9cXGQrKT8pXFxiL2cscHVuY3R1YXRpb246L1t7fVtcXF0pOyxdL2csb3BlcmF0b3I6LzovZyxcImJvb2xlYW5cIjovXFxiKHRydWV8ZmFsc2UpXFxiL2dpLFwibnVsbFwiOi9cXGJudWxsXFxiL2dpfSxQcmlzbS5sYW5ndWFnZXMuanNvbnA9UHJpc20ubGFuZ3VhZ2VzLmpzb247XG5QcmlzbS5sYW5ndWFnZXMubGVzcz1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY3NzXCIse2NvbW1lbnQ6Wy9cXC9cXCpbXFx3XFxXXSo/XFwqXFwvLyx7cGF0dGVybjovKF58W15cXFxcXSlcXC9cXC8uKi8sbG9va2JlaGluZDohMH1dLGF0cnVsZTp7cGF0dGVybjovQFtcXHctXSs/KD86XFwoW157fV0rXFwpfFteKCl7fTtdKSo/KD89XFxzKlxceykvaSxpbnNpZGU6e3B1bmN0dWF0aW9uOi9bOigpXS99fSxzZWxlY3Rvcjp7cGF0dGVybjovKD86QFxce1tcXHctXStcXH18W157fTtcXHNAXSkoPzpAXFx7W1xcdy1dK1xcfXxcXChbXnt9XSpcXCl8W157fTtAXSkqPyg/PVxccypcXHspLyxpbnNpZGU6e3ZhcmlhYmxlOi9AK1tcXHctXSsvfX0scHJvcGVydHk6Lyg/OkBcXHtbXFx3LV0rXFx9fFtcXHctXSkrKD86XFwrXz8pPyg/PVxccyo6KS9pLHB1bmN0dWF0aW9uOi9be30oKTs6LF0vLG9wZXJhdG9yOi9bK1xcLSpcXC9dL30pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJsZXNzXCIsXCJwdW5jdHVhdGlvblwiLHtcImZ1bmN0aW9uXCI6UHJpc20ubGFuZ3VhZ2VzLmxlc3MuZnVuY3Rpb259KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwibGVzc1wiLFwicHJvcGVydHlcIix7dmFyaWFibGU6W3twYXR0ZXJuOi9AW1xcdy1dK1xccyo6LyxpbnNpZGU6e3B1bmN0dWF0aW9uOi86L319LC9AQD9bXFx3LV0rL10sXCJtaXhpbi11c2FnZVwiOntwYXR0ZXJuOi8oW3s7XVxccyopWy4jXSg/IVxcZClbXFx3LV0rLio/KD89Wyg7XSkvLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJmdW5jdGlvblwifX0pO1xuUHJpc20ubGFuZ3VhZ2VzLm1hcmtkb3duPVByaXNtLmxhbmd1YWdlcy5leHRlbmQoXCJtYXJrdXBcIix7fSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcIm1hcmtkb3duXCIsXCJwcm9sb2dcIix7YmxvY2txdW90ZTp7cGF0dGVybjovXj4oPzpbXFx0IF0qPikqL20sYWxpYXM6XCJwdW5jdHVhdGlvblwifSxjb2RlOlt7cGF0dGVybjovXig/OiB7NH18XFx0KS4rL20sYWxpYXM6XCJrZXl3b3JkXCJ9LHtwYXR0ZXJuOi9gYC4rP2BgfGBbXmBcXG5dK2AvLGFsaWFzOlwia2V5d29yZFwifV0sdGl0bGU6W3twYXR0ZXJuOi9cXHcrLiooPzpcXHI/XFxufFxccikoPzo9PSt8LS0rKS8sYWxpYXM6XCJpbXBvcnRhbnRcIixpbnNpZGU6e3B1bmN0dWF0aW9uOi89PSskfC0tKyQvfX0se3BhdHRlcm46LyheXFxzKikjKy4rL20sbG9va2JlaGluZDohMCxhbGlhczpcImltcG9ydGFudFwiLGluc2lkZTp7cHVuY3R1YXRpb246L14jK3wjKyQvfX1dLGhyOntwYXR0ZXJuOi8oXlxccyopKFsqLV0pKFtcXHQgXSpcXDIpezIsfSg/PVxccyokKS9tLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJwdW5jdHVhdGlvblwifSxsaXN0OntwYXR0ZXJuOi8oXlxccyopKD86WyorLV18XFxkK1xcLikoPz1bXFx0IF0uKS9tLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJwdW5jdHVhdGlvblwifSxcInVybC1yZWZlcmVuY2VcIjp7cGF0dGVybjovIT9cXFtbXlxcXV0rXFxdOltcXHQgXSsoPzpcXFMrfDwoPzpcXFxcLnxbXj5cXFxcXSkrPikoPzpbXFx0IF0rKD86XCIoPzpcXFxcLnxbXlwiXFxcXF0pKlwifCcoPzpcXFxcLnxbXidcXFxcXSkqJ3xcXCgoPzpcXFxcLnxbXilcXFxcXSkqXFwpKSk/LyxpbnNpZGU6e3ZhcmlhYmxlOntwYXR0ZXJuOi9eKCE/XFxbKVteXFxdXSsvLGxvb2tiZWhpbmQ6ITB9LHN0cmluZzovKD86XCIoPzpcXFxcLnxbXlwiXFxcXF0pKlwifCcoPzpcXFxcLnxbXidcXFxcXSkqJ3xcXCgoPzpcXFxcLnxbXilcXFxcXSkqXFwpKSQvLHB1bmN0dWF0aW9uOi9eW1xcW1xcXSE6XXxbPD5dL30sYWxpYXM6XCJ1cmxcIn0sYm9sZDp7cGF0dGVybjovKF58W15cXFxcXSkoXFwqXFwqfF9fKSg/Oig/Olxccj9cXG58XFxyKSg/IVxccj9cXG58XFxyKXwuKSs/XFwyLyxsb29rYmVoaW5kOiEwLGluc2lkZTp7cHVuY3R1YXRpb246L15cXCpcXCp8Xl9ffFxcKlxcKiR8X18kL319LGl0YWxpYzp7cGF0dGVybjovKF58W15cXFxcXSkoWypfXSkoPzooPzpcXHI/XFxufFxccikoPyFcXHI/XFxufFxccil8LikrP1xcMi8sbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi9eWypfXXxbKl9dJC99fSx1cmw6e3BhdHRlcm46LyE/XFxbW15cXF1dK1xcXSg/OlxcKFteXFxzKV0rKD86W1xcdCBdK1wiKD86XFxcXC58W15cIlxcXFxdKSpcIik/XFwpfCA/XFxbW15cXF1cXG5dKlxcXSkvLGluc2lkZTp7dmFyaWFibGU6e3BhdHRlcm46LyghP1xcWylbXlxcXV0rKD89XFxdJCkvLGxvb2tiZWhpbmQ6ITB9LHN0cmluZzp7cGF0dGVybjovXCIoPzpcXFxcLnxbXlwiXFxcXF0pKlwiKD89XFwpJCkvfX19fSksUHJpc20ubGFuZ3VhZ2VzLm1hcmtkb3duLmJvbGQuaW5zaWRlLnVybD1QcmlzbS51dGlsLmNsb25lKFByaXNtLmxhbmd1YWdlcy5tYXJrZG93bi51cmwpLFByaXNtLmxhbmd1YWdlcy5tYXJrZG93bi5pdGFsaWMuaW5zaWRlLnVybD1QcmlzbS51dGlsLmNsb25lKFByaXNtLmxhbmd1YWdlcy5tYXJrZG93bi51cmwpLFByaXNtLmxhbmd1YWdlcy5tYXJrZG93bi5ib2xkLmluc2lkZS5pdGFsaWM9UHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMubWFya2Rvd24uaXRhbGljKSxQcmlzbS5sYW5ndWFnZXMubWFya2Rvd24uaXRhbGljLmluc2lkZS5ib2xkPVByaXNtLnV0aWwuY2xvbmUoUHJpc20ubGFuZ3VhZ2VzLm1hcmtkb3duLmJvbGQpO1xuUHJpc20ubGFuZ3VhZ2VzLnBlcmw9e2NvbW1lbnQ6W3twYXR0ZXJuOi8oXlxccyopPVxcdytbXFxzXFxTXSo/PWN1dC4qL20sbG9va2JlaGluZDohMH0se3BhdHRlcm46LyhefFteXFxcXCRdKSMuKi8sbG9va2JlaGluZDohMH1dLHN0cmluZzpbL1xcYig/OnF8cXF8cXh8cXcpXFxzKihbXmEtekEtWjAtOVxcc1xce1xcKFxcWzxdKSg/OlteXFxcXF18XFxcXFtcXHNcXFNdKSo/XFwxLywvXFxiKD86cXxxcXxxeHxxdylcXHMrKFthLXpBLVowLTldKSg/OlteXFxcXF18XFxcXFtcXHNcXFNdKSo/XFwxLywvXFxiKD86cXxxcXxxeHxxdylcXHMqXFwoKD86W14oKVxcXFxdfFxcXFxbXFxzXFxTXSkqXFwpLywvXFxiKD86cXxxcXxxeHxxdylcXHMqXFx7KD86W157fVxcXFxdfFxcXFxbXFxzXFxTXSkqXFx9LywvXFxiKD86cXxxcXxxeHxxdylcXHMqXFxbKD86W15bXFxdXFxcXF18XFxcXFtcXHNcXFNdKSpcXF0vLC9cXGIoPzpxfHFxfHF4fHF3KVxccyo8KD86W148PlxcXFxdfFxcXFxbXFxzXFxTXSkqPi8sLyhcInxgKSg/OlteXFxcXF18XFxcXFtcXHNcXFNdKSo/XFwxLywvJyg/OlteJ1xcXFxcXHJcXG5dfFxcXFwuKSonL10scmVnZXg6Wy9cXGIoPzptfHFyKVxccyooW15hLXpBLVowLTlcXHNcXHtcXChcXFs8XSkoPzpbXlxcXFxdfFxcXFxbXFxzXFxTXSkqP1xcMVttc2l4cG9kdWFsbmdjXSovLC9cXGIoPzptfHFyKVxccysoW2EtekEtWjAtOV0pKD86W15cXFxcXXxcXFxcLikqP1xcMVttc2l4cG9kdWFsbmdjXSovLC9cXGIoPzptfHFyKVxccypcXCgoPzpbXigpXFxcXF18XFxcXFtcXHNcXFNdKSpcXClbbXNpeHBvZHVhbG5nY10qLywvXFxiKD86bXxxcilcXHMqXFx7KD86W157fVxcXFxdfFxcXFxbXFxzXFxTXSkqXFx9W21zaXhwb2R1YWxuZ2NdKi8sL1xcYig/Om18cXIpXFxzKlxcWyg/OlteW1xcXVxcXFxdfFxcXFxbXFxzXFxTXSkqXFxdW21zaXhwb2R1YWxuZ2NdKi8sL1xcYig/Om18cXIpXFxzKjwoPzpbXjw+XFxcXF18XFxcXFtcXHNcXFNdKSo+W21zaXhwb2R1YWxuZ2NdKi8se3BhdHRlcm46LyhefFteLV1cXGIpKD86c3x0cnx5KVxccyooW15hLXpBLVowLTlcXHNcXHtcXChcXFs8XSkoPzpbXlxcXFxdfFxcXFxbXFxzXFxTXSkqP1xcMig/OlteXFxcXF18XFxcXFtcXHNcXFNdKSo/XFwyW21zaXhwb2R1YWxuZ2Nlcl0qLyxsb29rYmVoaW5kOiEwfSx7cGF0dGVybjovKF58W14tXVxcYikoPzpzfHRyfHkpXFxzKyhbYS16QS1aMC05XSkoPzpbXlxcXFxdfFxcXFxbXFxzXFxTXSkqP1xcMig/OlteXFxcXF18XFxcXFtcXHNcXFNdKSo/XFwyW21zaXhwb2R1YWxuZ2Nlcl0qLyxsb29rYmVoaW5kOiEwfSx7cGF0dGVybjovKF58W14tXVxcYikoPzpzfHRyfHkpXFxzKlxcKCg/OlteKClcXFxcXXxcXFxcW1xcc1xcU10pKlxcKVxccypcXCgoPzpbXigpXFxcXF18XFxcXFtcXHNcXFNdKSpcXClbbXNpeHBvZHVhbG5nY2VyXSovLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXi1dXFxiKSg/OnN8dHJ8eSlcXHMqXFx7KD86W157fVxcXFxdfFxcXFxbXFxzXFxTXSkqXFx9XFxzKlxceyg/Oltee31cXFxcXXxcXFxcW1xcc1xcU10pKlxcfVttc2l4cG9kdWFsbmdjZXJdKi8sbG9va2JlaGluZDohMH0se3BhdHRlcm46LyhefFteLV1cXGIpKD86c3x0cnx5KVxccypcXFsoPzpbXltcXF1cXFxcXXxcXFxcW1xcc1xcU10pKlxcXVxccypcXFsoPzpbXltcXF1cXFxcXXxcXFxcW1xcc1xcU10pKlxcXVttc2l4cG9kdWFsbmdjZXJdKi8sbG9va2JlaGluZDohMH0se3BhdHRlcm46LyhefFteLV1cXGIpKD86c3x0cnx5KVxccyo8KD86W148PlxcXFxdfFxcXFxbXFxzXFxTXSkqPlxccyo8KD86W148PlxcXFxdfFxcXFxbXFxzXFxTXSkqPlttc2l4cG9kdWFsbmdjZXJdKi8sbG9va2JlaGluZDohMH0sL1xcLyg/OlteXFwvXFxcXFxcclxcbl18XFxcXC4pKlxcL1ttc2l4cG9kdWFsbmdjXSooPz1cXHMqKD86JHxbXFxyXFxuLC47fSkmfFxcLSsqfjw+IT9eXXwobHR8Z3R8bGV8Z2V8ZXF8bmV8Y21wfG5vdHxhbmR8b3J8eG9yfHgpXFxiKSkvXSx2YXJpYWJsZTpbL1smKiRAJV1cXHtcXF5bQS1aXStcXH0vLC9bJiokQCVdXFxeW0EtWl9dLywvWyYqJEAlXSM/KD89XFx7KS8sL1smKiRAJV0jPygoOjopKic/KD8hXFxkKVtcXHckXSspKyg6OikqL2ksL1smKiRAJV1cXGQrLywvKD8hJT0pWyRAJV1bIVwiIyQlJicoKSorLFxcLS5cXC86Ozw9Pj9AW1xcXFxcXF1eX2B7fH1+XS9dLGZpbGVoYW5kbGU6e3BhdHRlcm46LzwoPyFbPD1dKVxcUyo+fFxcYl9cXGIvLGFsaWFzOlwic3ltYm9sXCJ9LHZzdHJpbmc6e3BhdHRlcm46L3ZcXGQrKFxcLlxcZCspKnxcXGQrKFxcLlxcZCspezIsfS8sYWxpYXM6XCJzdHJpbmdcIn0sXCJmdW5jdGlvblwiOntwYXR0ZXJuOi9zdWIgW2EtejAtOV9dKy9pLGluc2lkZTp7a2V5d29yZDovc3ViL319LGtleXdvcmQ6L1xcYihhbnl8YnJlYWt8Y29udGludWV8ZGVmYXVsdHxkZWxldGV8ZGllfGRvfGVsc2V8ZWxzaWZ8ZXZhbHxmb3J8Zm9yZWFjaHxnaXZlbnxnb3RvfGlmfGxhc3R8bG9jYWx8bXl8bmV4dHxvdXJ8cGFja2FnZXxwcmludHxyZWRvfHJlcXVpcmV8c2F5fHN0YXRlfHN1Ynxzd2l0Y2h8dW5kZWZ8dW5sZXNzfHVudGlsfHVzZXx3aGVufHdoaWxlKVxcYi8sbnVtYmVyOi9cXGItPygweFtcXGRBLUZhLWZdKF8/W1xcZEEtRmEtZl0pKnwwYlswMV0oXz9bMDFdKSp8KFxcZChfP1xcZCkqKT9cXC4/XFxkKF8/XFxkKSooW0VlXVsrLV0/XFxkKyk/KVxcYi8sb3BlcmF0b3I6Ly1bcnd4b1JXWE9lenNmZGxwU2JjdHVna1RCTUFDXVxcYnxcXCtbKz1dP3wtWy09Pl0/fFxcKlxcKj89P3xcXC9cXC8/PT98PVs9fj5dP3x+W349XT98XFx8XFx8Pz0/fCYmPz0/fDwoPzo9Pj98PD0/KT98Pj4/PT98IVt+PV0/fFslXl09P3xcXC4oPzo9fFxcLlxcLj8pP3xbXFxcXD9dfFxcYngoPzo9fFxcYil8XFxiKGx0fGd0fGxlfGdlfGVxfG5lfGNtcHxub3R8YW5kfG9yfHhvcilcXGIvLHB1bmN0dWF0aW9uOi9be31bXFxdOygpLDpdL307XG5QcmlzbS5sYW5ndWFnZXMucGhwPVByaXNtLmxhbmd1YWdlcy5leHRlbmQoXCJjbGlrZVwiLHtrZXl3b3JkOi9cXGIoYW5kfG9yfHhvcnxhcnJheXxhc3xicmVha3xjYXNlfGNmdW5jdGlvbnxjbGFzc3xjb25zdHxjb250aW51ZXxkZWNsYXJlfGRlZmF1bHR8ZGllfGRvfGVsc2V8ZWxzZWlmfGVuZGRlY2xhcmV8ZW5kZm9yfGVuZGZvcmVhY2h8ZW5kaWZ8ZW5kc3dpdGNofGVuZHdoaWxlfGV4dGVuZHN8Zm9yfGZvcmVhY2h8ZnVuY3Rpb258aW5jbHVkZXxpbmNsdWRlX29uY2V8Z2xvYmFsfGlmfG5ld3xyZXR1cm58c3RhdGljfHN3aXRjaHx1c2V8cmVxdWlyZXxyZXF1aXJlX29uY2V8dmFyfHdoaWxlfGFic3RyYWN0fGludGVyZmFjZXxwdWJsaWN8aW1wbGVtZW50c3xwcml2YXRlfHByb3RlY3RlZHxwYXJlbnR8dGhyb3d8bnVsbHxlY2hvfHByaW50fHRyYWl0fG5hbWVzcGFjZXxmaW5hbHx5aWVsZHxnb3RvfGluc3RhbmNlb2Z8ZmluYWxseXx0cnl8Y2F0Y2gpXFxiL2ksY29uc3RhbnQ6L1xcYltBLVowLTlfXXsyLH1cXGIvLGNvbW1lbnQ6e3BhdHRlcm46LyhefFteXFxcXF0pKD86XFwvXFwqW1xcd1xcV10qP1xcKlxcL3xcXC9cXC8uKikvLGxvb2tiZWhpbmQ6ITB9fSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcInBocFwiLFwiY2xhc3MtbmFtZVwiLHtcInNoZWxsLWNvbW1lbnRcIjp7cGF0dGVybjovKF58W15cXFxcXSkjLiovLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJjb21tZW50XCJ9fSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcInBocFwiLFwia2V5d29yZFwiLHtkZWxpbWl0ZXI6L1xcPz58PFxcPyg/OnBocCk/L2ksdmFyaWFibGU6L1xcJFxcdytcXGIvaSxcInBhY2thZ2VcIjp7cGF0dGVybjovKFxcXFx8bmFtZXNwYWNlXFxzK3x1c2VcXHMrKVtcXHdcXFxcXSsvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOntwdW5jdHVhdGlvbjovXFxcXC99fX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJwaHBcIixcIm9wZXJhdG9yXCIse3Byb3BlcnR5OntwYXR0ZXJuOi8oLT4pW1xcd10rLyxsb29rYmVoaW5kOiEwfX0pLFByaXNtLmxhbmd1YWdlcy5tYXJrdXAmJihQcmlzbS5ob29rcy5hZGQoXCJiZWZvcmUtaGlnaGxpZ2h0XCIsZnVuY3Rpb24oZSl7XCJwaHBcIj09PWUubGFuZ3VhZ2UmJihlLnRva2VuU3RhY2s9W10sZS5iYWNrdXBDb2RlPWUuY29kZSxlLmNvZGU9ZS5jb2RlLnJlcGxhY2UoLyg/OjxcXD9waHB8PFxcPylbXFx3XFxXXSo/KD86XFw/PikvZ2ksZnVuY3Rpb24oYSl7cmV0dXJuIGUudG9rZW5TdGFjay5wdXNoKGEpLFwie3t7UEhQXCIrZS50b2tlblN0YWNrLmxlbmd0aCtcIn19fVwifSkpfSksUHJpc20uaG9va3MuYWRkKFwiYmVmb3JlLWluc2VydFwiLGZ1bmN0aW9uKGUpe1wicGhwXCI9PT1lLmxhbmd1YWdlJiYoZS5jb2RlPWUuYmFja3VwQ29kZSxkZWxldGUgZS5iYWNrdXBDb2RlKX0pLFByaXNtLmhvb2tzLmFkZChcImFmdGVyLWhpZ2hsaWdodFwiLGZ1bmN0aW9uKGUpe2lmKFwicGhwXCI9PT1lLmxhbmd1YWdlKXtmb3IodmFyIGEsbj0wO2E9ZS50b2tlblN0YWNrW25dO24rKyllLmhpZ2hsaWdodGVkQ29kZT1lLmhpZ2hsaWdodGVkQ29kZS5yZXBsYWNlKFwie3t7UEhQXCIrKG4rMSkrXCJ9fX1cIixQcmlzbS5oaWdobGlnaHQoYSxlLmdyYW1tYXIsXCJwaHBcIikucmVwbGFjZSgvXFwkL2csXCIkJCQkXCIpKTtlLmVsZW1lbnQuaW5uZXJIVE1MPWUuaGlnaGxpZ2h0ZWRDb2RlfX0pLFByaXNtLmhvb2tzLmFkZChcIndyYXBcIixmdW5jdGlvbihlKXtcInBocFwiPT09ZS5sYW5ndWFnZSYmXCJtYXJrdXBcIj09PWUudHlwZSYmKGUuY29udGVudD1lLmNvbnRlbnQucmVwbGFjZSgvKFxce1xce1xce1BIUFswLTldK1xcfVxcfVxcfSkvZywnPHNwYW4gY2xhc3M9XCJ0b2tlbiBwaHBcIj4kMTwvc3Bhbj4nKSl9KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwicGhwXCIsXCJjb21tZW50XCIse21hcmt1cDp7cGF0dGVybjovPFteP11cXC8/KC4qPyk+LyxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cH0scGhwOi9cXHtcXHtcXHtQSFBbMC05XStcXH1cXH1cXH0vfSkpO1xuUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcInBocFwiLFwidmFyaWFibGVcIix7XCJ0aGlzXCI6L1xcJHRoaXNcXGIvLGdsb2JhbDovXFwkKD86Xyg/OlNFUlZFUnxHRVR8UE9TVHxGSUxFU3xSRVFVRVNUfFNFU1NJT058RU5WfENPT0tJRSl8R0xPQkFMU3xIVFRQX1JBV19QT1NUX0RBVEF8YXJnY3xhcmd2fHBocF9lcnJvcm1zZ3xodHRwX3Jlc3BvbnNlX2hlYWRlcikvLHNjb3BlOntwYXR0ZXJuOi9cXGJbXFx3XFxcXF0rOjovLGluc2lkZTp7a2V5d29yZDovKHN0YXRpY3xzZWxmfHBhcmVudCkvLHB1bmN0dWF0aW9uOi8oOjp8XFxcXCkvfX19KTtcblByaXNtLmxhbmd1YWdlcy5weXRob249e1widHJpcGxlLXF1b3RlZC1zdHJpbmdcIjp7cGF0dGVybjovXCJcIlwiW1xcc1xcU10rP1wiXCJcInwnJydbXFxzXFxTXSs/JycnLyxhbGlhczpcInN0cmluZ1wifSxjb21tZW50OntwYXR0ZXJuOi8oXnxbXlxcXFxdKSMuKi8sbG9va2JlaGluZDohMH0sc3RyaW5nOntwYXR0ZXJuOi8oXCJ8JykoPzpcXFxcXFxcXHxcXFxcP1teXFxcXFxcclxcbl0pKj9cXDEvLGdyZWVkeTohMH0sXCJmdW5jdGlvblwiOntwYXR0ZXJuOi8oKD86XnxcXHMpZGVmWyBcXHRdKylbYS16QS1aX11bYS16QS1aMC05X10qKD89XFwoKS9nLGxvb2tiZWhpbmQ6ITB9LFwiY2xhc3MtbmFtZVwiOntwYXR0ZXJuOi8oXFxiY2xhc3NcXHMrKVthLXowLTlfXSsvaSxsb29rYmVoaW5kOiEwfSxrZXl3b3JkOi9cXGIoPzphc3xhc3NlcnR8YXN5bmN8YXdhaXR8YnJlYWt8Y2xhc3N8Y29udGludWV8ZGVmfGRlbHxlbGlmfGVsc2V8ZXhjZXB0fGV4ZWN8ZmluYWxseXxmb3J8ZnJvbXxnbG9iYWx8aWZ8aW1wb3J0fGlufGlzfGxhbWJkYXxwYXNzfHByaW50fHJhaXNlfHJldHVybnx0cnl8d2hpbGV8d2l0aHx5aWVsZClcXGIvLFwiYm9vbGVhblwiOi9cXGIoPzpUcnVlfEZhbHNlKVxcYi8sbnVtYmVyOi9cXGItPyg/OjBbYm9dKT8oPzooPzpcXGR8MHhbXFxkYS1mXSlbXFxkYS1mXSpcXC4/XFxkKnxcXC5cXGQrKSg/OmVbKy1dP1xcZCspP2o/XFxiL2ksb3BlcmF0b3I6L1stKyU9XT0/fCE9fFxcKlxcKj89P3xcXC9cXC8/PT98PFs8PT5dP3w+Wz0+XT98WyZ8Xn5dfFxcYig/Om9yfGFuZHxub3QpXFxiLyxwdW5jdHVhdGlvbjovW3t9W1xcXTsoKSwuOl0vfTtcbiFmdW5jdGlvbihhKXt2YXIgZT1hLnV0aWwuY2xvbmUoYS5sYW5ndWFnZXMuamF2YXNjcmlwdCk7YS5sYW5ndWFnZXMuanN4PWEubGFuZ3VhZ2VzLmV4dGVuZChcIm1hcmt1cFwiLGUpLGEubGFuZ3VhZ2VzLmpzeC50YWcucGF0dGVybj0vPFxcLz9bXFx3XFwuOi1dK1xccyooPzpcXHMrW1xcd1xcLjotXSsoPzo9KD86KFwifCcpKFxcXFw/W1xcd1xcV10pKj9cXDF8W15cXHMnXCI+PV0rfChcXHtbXFx3XFxXXSo/XFx9KSkpP1xccyopKlxcLz8+L2ksYS5sYW5ndWFnZXMuanN4LnRhZy5pbnNpZGVbXCJhdHRyLXZhbHVlXCJdLnBhdHRlcm49Lz1bXlxce10oPzooJ3xcIilbXFx3XFxXXSo/KFxcMSl8W15cXHM+XSspL2k7dmFyIHM9YS51dGlsLmNsb25lKGEubGFuZ3VhZ2VzLmpzeCk7ZGVsZXRlIHMucHVuY3R1YXRpb24scz1hLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJqc3hcIixcIm9wZXJhdG9yXCIse3B1bmN0dWF0aW9uOi89KD89eyl8W3t9W1xcXTsoKSwuOl0vfSx7anN4OnN9KSxhLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJpbnNpZGVcIixcImF0dHItdmFsdWVcIix7c2NyaXB0OntwYXR0ZXJuOi89KFxceyg/Olxce1tefV0qXFx9fFtefV0pK1xcfSkvaSxpbnNpZGU6cyxhbGlhczpcImxhbmd1YWdlLWphdmFzY3JpcHRcIn19LGEubGFuZ3VhZ2VzLmpzeC50YWcpfShQcmlzbSk7XG5QcmlzbS5sYW5ndWFnZXMuc2Nzcz1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY3NzXCIse2NvbW1lbnQ6e3BhdHRlcm46LyhefFteXFxcXF0pKD86XFwvXFwqW1xcd1xcV10qP1xcKlxcL3xcXC9cXC8uKikvLGxvb2tiZWhpbmQ6ITB9LGF0cnVsZTp7cGF0dGVybjovQFtcXHctXSsoPzpcXChbXigpXStcXCl8W14oXSkqPyg/PVxccytbeztdKS8saW5zaWRlOntydWxlOi9AW1xcdy1dKy99fSx1cmw6Lyg/OlstYS16XSstKSp1cmwoPz1cXCgpL2ksc2VsZWN0b3I6e3BhdHRlcm46Lyg/PVxcUylbXkA7XFx7XFx9XFwoXFwpXT8oW15AO1xce1xcfVxcKFxcKV18JnwjXFx7XFwkWy1fXFx3XStcXH0pKyg/PVxccypcXHsoXFx9fFxcc3xbXlxcfV0rKDp8XFx7KVteXFx9XSspKS9tLGluc2lkZTp7cGxhY2Vob2xkZXI6LyVbLV9cXHddKy99fX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJzY3NzXCIsXCJhdHJ1bGVcIix7a2V5d29yZDpbL0AoPzppZnxlbHNlKD86IGlmKT98Zm9yfGVhY2h8d2hpbGV8aW1wb3J0fGV4dGVuZHxkZWJ1Z3x3YXJufG1peGlufGluY2x1ZGV8ZnVuY3Rpb258cmV0dXJufGNvbnRlbnQpL2kse3BhdHRlcm46LyggKykoPzpmcm9tfHRocm91Z2gpKD89ICkvLGxvb2tiZWhpbmQ6ITB9XX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJzY3NzXCIsXCJwcm9wZXJ0eVwiLHt2YXJpYWJsZTovXFwkWy1fXFx3XSt8I1xce1xcJFstX1xcd10rXFx9L30pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJzY3NzXCIsXCJmdW5jdGlvblwiLHtwbGFjZWhvbGRlcjp7cGF0dGVybjovJVstX1xcd10rLyxhbGlhczpcInNlbGVjdG9yXCJ9LHN0YXRlbWVudDovXFxCISg/OmRlZmF1bHR8b3B0aW9uYWwpXFxiL2ksXCJib29sZWFuXCI6L1xcYig/OnRydWV8ZmFsc2UpXFxiLyxcIm51bGxcIjovXFxibnVsbFxcYi8sb3BlcmF0b3I6e3BhdHRlcm46LyhcXHMpKD86Wy0rKlxcLyVdfFs9IV09fDw9P3w+PT98YW5kfG9yfG5vdCkoPz1cXHMpLyxsb29rYmVoaW5kOiEwfX0pLFByaXNtLmxhbmd1YWdlcy5zY3NzLmF0cnVsZS5pbnNpZGUucmVzdD1QcmlzbS51dGlsLmNsb25lKFByaXNtLmxhbmd1YWdlcy5zY3NzKTtcblByaXNtLmxhbmd1YWdlcy5zcWw9e2NvbW1lbnQ6e3BhdHRlcm46LyhefFteXFxcXF0pKD86XFwvXFwqW1xcd1xcV10qP1xcKlxcL3woPzotLXxcXC9cXC98IykuKikvLGxvb2tiZWhpbmQ6ITB9LHN0cmluZzp7cGF0dGVybjovKF58W15AXFxcXF0pKFwifCcpKD86XFxcXD9bXFxzXFxTXSkqP1xcMi8sbG9va2JlaGluZDohMH0sdmFyaWFibGU6L0BbXFx3LiRdK3xAKFwifCd8YCkoPzpcXFxcP1tcXHNcXFNdKSs/XFwxLyxcImZ1bmN0aW9uXCI6L1xcYig/OkNPVU5UfFNVTXxBVkd8TUlOfE1BWHxGSVJTVHxMQVNUfFVDQVNFfExDQVNFfE1JRHxMRU58Uk9VTkR8Tk9XfEZPUk1BVCkoPz1cXHMqXFwoKS9pLGtleXdvcmQ6L1xcYig/OkFDVElPTnxBRER8QUZURVJ8QUxHT1JJVEhNfEFMTHxBTFRFUnxBTkFMWVpFfEFOWXxBUFBMWXxBU3xBU0N8QVVUSE9SSVpBVElPTnxCQUNLVVB8QkRCfEJFR0lOfEJFUktFTEVZREJ8QklHSU5UfEJJTkFSWXxCSVR8QkxPQnxCT09MfEJPT0xFQU58QlJFQUt8QlJPV1NFfEJUUkVFfEJVTEt8Qll8Q0FMTHxDQVNDQURFRD98Q0FTRXxDSEFJTnxDSEFSIFZBUllJTkd8Q0hBUkFDVEVSICg/OlNFVHxWQVJZSU5HKXxDSEFSU0VUfENIRUNLfENIRUNLUE9JTlR8Q0xPU0V8Q0xVU1RFUkVEfENPQUxFU0NFfENPTExBVEV8Q09MVU1OfENPTFVNTlN8Q09NTUVOVHxDT01NSVR8Q09NTUlUVEVEfENPTVBVVEV8Q09OTkVDVHxDT05TSVNURU5UfENPTlNUUkFJTlR8Q09OVEFJTlN8Q09OVEFJTlNUQUJMRXxDT05USU5VRXxDT05WRVJUfENSRUFURXxDUk9TU3xDVVJSRU5UKD86X0RBVEV8X1RJTUV8X1RJTUVTVEFNUHxfVVNFUik/fENVUlNPUnxEQVRBKD86QkFTRVM/KT98REFURVRJTUV8REJDQ3xERUFMTE9DQVRFfERFQ3xERUNJTUFMfERFQ0xBUkV8REVGQVVMVHxERUZJTkVSfERFTEFZRUR8REVMRVRFfERFTll8REVTQ3xERVNDUklCRXxERVRFUk1JTklTVElDfERJU0FCTEV8RElTQ0FSRHxESVNLfERJU1RJTkNUfERJU1RJTkNUUk9XfERJU1RSSUJVVEVEfERPfERPVUJMRSg/OiBQUkVDSVNJT04pP3xEUk9QfERVTU1ZfERVTVAoPzpGSUxFKT98RFVQTElDQVRFIEtFWXxFTFNFfEVOQUJMRXxFTkNMT1NFRCBCWXxFTkR8RU5HSU5FfEVOVU18RVJSTFZMfEVSUk9SU3xFU0NBUEUoPzpEIEJZKT98RVhDRVBUfEVYRUMoPzpVVEUpP3xFWElTVFN8RVhJVHxFWFBMQUlOfEVYVEVOREVEfEZFVENIfEZJRUxEU3xGSUxFfEZJTExGQUNUT1J8RklSU1R8RklYRUR8RkxPQVR8Rk9MTE9XSU5HfEZPUig/OiBFQUNIIFJPVyk/fEZPUkNFfEZPUkVJR058RlJFRVRFWFQoPzpUQUJMRSk/fEZST018RlVMTHxGVU5DVElPTnxHRU9NRVRSWSg/OkNPTExFQ1RJT04pP3xHTE9CQUx8R09UT3xHUkFOVHxHUk9VUHxIQU5ETEVSfEhBU0h8SEFWSU5HfEhPTERMT0NLfElERU5USVRZKD86X0lOU0VSVHxDT0wpP3xJRnxJR05PUkV8SU1QT1JUfElOREVYfElORklMRXxJTk5FUnxJTk5PREJ8SU5PVVR8SU5TRVJUfElOVHxJTlRFR0VSfElOVEVSU0VDVHxJTlRPfElOVk9LRVJ8SVNPTEFUSU9OIExFVkVMfEpPSU58S0VZUz98S0lMTHxMQU5HVUFHRSBTUUx8TEFTVHxMRUZUfExJTUlUfExJTkVOT3xMSU5FU3xMSU5FU1RSSU5HfExPQUR8TE9DQUx8TE9DS3xMT05HKD86QkxPQnxURVhUKXxNQVRDSCg/OkVEKT98TUVESVVNKD86QkxPQnxJTlR8VEVYVCl8TUVSR0V8TUlERExFSU5UfE1PRElGSUVTIFNRTCBEQVRBfE1PRElGWXxNVUxUSSg/OkxJTkVTVFJJTkd8UE9JTlR8UE9MWUdPTil8TkFUSU9OQUwoPzogQ0hBUiBWQVJZSU5HfCBDSEFSQUNURVIoPzogVkFSWUlORyk/fCBWQVJDSEFSKT98TkFUVVJBTHxOQ0hBUig/OiBWQVJDSEFSKT98TkVYVHxOTyg/OiBTUUx8Q0hFQ0t8Q1lDTEUpP3xOT05DTFVTVEVSRUR8TlVMTElGfE5VTUVSSUN8T0ZGP3xPRkZTRVRTP3xPTnxPUEVOKD86REFUQVNPVVJDRXxRVUVSWXxST1dTRVQpP3xPUFRJTUlaRXxPUFRJT04oPzpBTExZKT98T1JERVJ8T1VUKD86RVJ8RklMRSk/fE9WRVJ8UEFSVElBTHxQQVJUSVRJT058UEVSQ0VOVHxQSVZPVHxQTEFOfFBPSU5UfFBPTFlHT058UFJFQ0VESU5HfFBSRUNJU0lPTnxQUkVWfFBSSU1BUll8UFJJTlR8UFJJVklMRUdFU3xQUk9DKD86RURVUkUpP3xQVUJMSUN8UFVSR0V8UVVJQ0t8UkFJU0VSUk9SfFJFQUQoPzpTIFNRTCBEQVRBfFRFWFQpP3xSRUFMfFJFQ09ORklHVVJFfFJFRkVSRU5DRVN8UkVMRUFTRXxSRU5BTUV8UkVQRUFUQUJMRXxSRVBMSUNBVElPTnxSRVFVSVJFfFJFU1RPUkV8UkVTVFJJQ1R8UkVUVVJOUz98UkVWT0tFfFJJR0hUfFJPTExCQUNLfFJPVVRJTkV8Uk9XKD86Q09VTlR8R1VJRENPTHxTKT98UlRSRUV8UlVMRXxTQVZFKD86UE9JTlQpP3xTQ0hFTUF8U0VMRUNUfFNFUklBTCg/OklaQUJMRSk/fFNFU1NJT04oPzpfVVNFUik/fFNFVCg/OlVTRVIpP3xTSEFSRSBNT0RFfFNIT1d8U0hVVERPV058U0lNUExFfFNNQUxMSU5UfFNOQVBTSE9UfFNPTUV8U09OQU1FfFNUQVJUKD86SU5HIEJZKT98U1RBVElTVElDU3xTVEFUVVN8U1RSSVBFRHxTWVNURU1fVVNFUnxUQUJMRVM/fFRBQkxFU1BBQ0V8VEVNUCg/Ok9SQVJZfFRBQkxFKT98VEVSTUlOQVRFRCBCWXxURVhUKD86U0laRSk/fFRIRU58VElNRVNUQU1QfFRJTlkoPzpCTE9CfElOVHxURVhUKXxUT1A/fFRSQU4oPzpTQUNUSU9OUz8pP3xUUklHR0VSfFRSVU5DQVRFfFRTRVFVQUx8VFlQRVM/fFVOQk9VTkRFRHxVTkNPTU1JVFRFRHxVTkRFRklORUR8VU5JT058VU5JUVVFfFVOUElWT1R8VVBEQVRFKD86VEVYVCk/fFVTQUdFfFVTRXxVU0VSfFVTSU5HfFZBTFVFUz98VkFSKD86QklOQVJZfENIQVJ8Q0hBUkFDVEVSfFlJTkcpfFZJRVd8V0FJVEZPUnxXQVJOSU5HU3xXSEVOfFdIRVJFfFdISUxFfFdJVEgoPzogUk9MTFVQfElOKT98V09SS3xXUklURSg/OlRFWFQpPylcXGIvaSxcImJvb2xlYW5cIjovXFxiKD86VFJVRXxGQUxTRXxOVUxMKVxcYi9pLG51bWJlcjovXFxiLT8oPzoweCk/XFxkKlxcLj9bXFxkYS1mXStcXGIvLG9wZXJhdG9yOi9bLSsqXFwvPSVefl18JiY/fFxcfD9cXHx8IT0/fDwoPzo9Pj98PHw+KT98Pls+PV0/fFxcYig/OkFORHxCRVRXRUVOfElOfExJS0V8Tk9UfE9SfElTfERJVnxSRUdFWFB8UkxJS0V8U09VTkRTIExJS0V8WE9SKVxcYi9pLHB1bmN0dWF0aW9uOi9bO1tcXF0oKWAsLl0vfTtcblByaXNtLmxhbmd1YWdlcy5zd2lmdD1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY2xpa2VcIix7c3RyaW5nOntwYXR0ZXJuOi8oXCJ8JykoXFxcXCg/OlxcKCg/OlteKCldfFxcKFteKV0rXFwpKStcXCl8XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxncmVlZHk6ITAsaW5zaWRlOntpbnRlcnBvbGF0aW9uOntwYXR0ZXJuOi9cXFxcXFwoKD86W14oKV18XFwoW14pXStcXCkpK1xcKS8saW5zaWRlOntkZWxpbWl0ZXI6e3BhdHRlcm46L15cXFxcXFwofFxcKSQvLGFsaWFzOlwidmFyaWFibGVcIn19fX19LGtleXdvcmQ6L1xcYihhc3xhc3NvY2lhdGl2aXR5fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29udGludWV8Y29udmVuaWVuY2V8ZGVmYXVsdHxkZWZlcnxkZWluaXR8ZGlkU2V0fGRvfGR5bmFtaWMoPzpUeXBlKT98ZWxzZXxlbnVtfGV4dGVuc2lvbnxmYWxsdGhyb3VnaHxmaW5hbHxmb3J8ZnVuY3xnZXR8Z3VhcmR8aWZ8aW1wb3J0fGlufGluZml4fGluaXR8aW5vdXR8aW50ZXJuYWx8aXN8bGF6eXxsZWZ0fGxldHxtdXRhdGluZ3xuZXd8bm9uZXxub25tdXRhdGluZ3xvcGVyYXRvcnxvcHRpb25hbHxvdmVycmlkZXxwb3N0Zml4fHByZWNlZGVuY2V8cHJlZml4fHByaXZhdGV8UHJvdG9jb2x8cHVibGljfHJlcGVhdHxyZXF1aXJlZHxyZXRocm93c3xyZXR1cm58cmlnaHR8c2FmZXxzZWxmfFNlbGZ8c2V0fHN0YXRpY3xzdHJ1Y3R8c3Vic2NyaXB0fHN1cGVyfHN3aXRjaHx0aHJvd3M/fHRyeXxUeXBlfHR5cGVhbGlhc3x1bm93bmVkfHVuc2FmZXx2YXJ8d2Vha3x3aGVyZXx3aGlsZXx3aWxsU2V0fF9fKD86Q09MVU1OX198RklMRV9ffEZVTkNUSU9OX198TElORV9fKSlcXGIvLG51bWJlcjovXFxiKFtcXGRfXSsoXFwuW1xcZGVfXSspP3wweFthLWYwLTlfXSsoXFwuW2EtZjAtOXBfXSspP3wwYlswMV9dK3wwb1swLTdfXSspXFxiL2ksY29uc3RhbnQ6L1xcYihuaWx8W0EtWl9dezIsfXxrW0EtWl1bQS1aYS16X10rKVxcYi8sYXRydWxlOi9AXFxiKElCKD86T3V0bGV0fERlc2lnbmFibGV8QWN0aW9ufEluc3BlY3RhYmxlKXxjbGFzc19wcm90b2NvbHxleHBvcnRlZHxub3JldHVybnxOUyg/OkNvcHlpbmd8TWFuYWdlZCl8b2JqY3xVSUFwcGxpY2F0aW9uTWFpbnxhdXRvX2Nsb3N1cmUpXFxiLyxidWlsdGluOi9cXGIoW0EtWl1cXFMrfGFic3xhZHZhbmNlfGFsaWdub2YoPzpWYWx1ZSk/fGFzc2VydHxjb250YWluc3xjb3VudCg/OkVsZW1lbnRzKT98ZGVidWdQcmludCg/OmxuKT98ZGlzdGFuY2V8ZHJvcCg/OkZpcnN0fExhc3QpfGR1bXB8ZW51bWVyYXRlfGVxdWFsfGZpbHRlcnxmaW5kfGZpcnN0fGdldFZhTGlzdHxpbmRpY2VzfGlzRW1wdHl8am9pbnxsYXN0fGxleGljb2dyYXBoaWNhbENvbXBhcmV8bWFwfG1heCg/OkVsZW1lbnQpP3xtaW4oPzpFbGVtZW50KT98bnVtZXJpY0Nhc3R8b3ZlcmxhcHN8cGFydGl0aW9ufHByaW50KD86bG4pP3xyZWR1Y2V8cmVmbGVjdHxyZXZlcnNlfHNpemVvZig/OlZhbHVlKT98c29ydCg/OmVkKT98c3BsaXR8c3RhcnRzV2l0aHxzdHJpZGUoPzpvZig/OlZhbHVlKT8pP3xzdWZmaXh8c3dhcHx0b0RlYnVnU3RyaW5nfHRvU3RyaW5nfHRyYW5zY29kZXx1bmRlcmVzdGltYXRlQ291bnR8dW5zYWZlQml0Q2FzdHx3aXRoKD86RXh0ZW5kZWRMaWZldGltZXxVbnNhZmUoPzpNdXRhYmxlUG9pbnRlcnM/fFBvaW50ZXJzPyl8VmFMaXN0KSlcXGIvfSksUHJpc20ubGFuZ3VhZ2VzLnN3aWZ0LnN0cmluZy5pbnNpZGUuaW50ZXJwb2xhdGlvbi5pbnNpZGUucmVzdD1QcmlzbS51dGlsLmNsb25lKFByaXNtLmxhbmd1YWdlcy5zd2lmdCk7XG4hZnVuY3Rpb24oKXtcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5QcmlzbSYmc2VsZi5kb2N1bWVudCYmUHJpc20uaG9va3MuYWRkKFwiY29tcGxldGVcIixmdW5jdGlvbihlKXtpZihlLmNvZGUpe3ZhciB0PWUuZWxlbWVudC5wYXJlbnROb2RlLHM9L1xccypcXGJsaW5lLW51bWJlcnNcXGJcXHMqLztpZih0JiYvcHJlL2kudGVzdCh0Lm5vZGVOYW1lKSYmKHMudGVzdCh0LmNsYXNzTmFtZSl8fHMudGVzdChlLmVsZW1lbnQuY2xhc3NOYW1lKSkmJiFlLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5saW5lLW51bWJlcnMtcm93c1wiKSl7cy50ZXN0KGUuZWxlbWVudC5jbGFzc05hbWUpJiYoZS5lbGVtZW50LmNsYXNzTmFtZT1lLmVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UocyxcIlwiKSkscy50ZXN0KHQuY2xhc3NOYW1lKXx8KHQuY2xhc3NOYW1lKz1cIiBsaW5lLW51bWJlcnNcIik7dmFyIG4sYT1lLmNvZGUubWF0Y2goL1xcbig/ISQpL2cpLGw9YT9hLmxlbmd0aCsxOjEsbT1uZXcgQXJyYXkobCsxKTttPW0uam9pbihcIjxzcGFuPjwvc3Bhbj5cIiksbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxuLmNsYXNzTmFtZT1cImxpbmUtbnVtYmVycy1yb3dzXCIsbi5pbm5lckhUTUw9bSx0Lmhhc0F0dHJpYnV0ZShcImRhdGEtc3RhcnRcIikmJih0LnN0eWxlLmNvdW50ZXJSZXNldD1cImxpbmVudW1iZXIgXCIrKHBhcnNlSW50KHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdGFydFwiKSwxMCktMSkpLGUuZWxlbWVudC5hcHBlbmRDaGlsZChuKX19fSl9KCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qcy9saWIvcHJpc20uanNcbiAqKi8iLCIvKlxyXG4qIEBwYWNrYWdlIGdvZG9mcmVkb25pbmphXHJcbiogU2hhcmUgc29jaWFsIG1lZGlhXHJcbiovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5jbGFzcyBHb2RvU2hhcmUge1xyXG5cdGNvbnN0cnVjdG9yKGVsZW0pIHtcclxuXHRcdHRoaXMuZWxlbSA9IGVsZW07XHJcblx0fVxyXG5cdFxyXG5cdCAvKipcclxuICAgICAqICBAZnVuY3Rpb24gZ29kb1ZhbHVlXHJcbiAgICAgKiAgQGRlc2NyaXB0aW9uIEhlbHBlciB0byBnZXQgdGhlIGF0dHJpYnV0ZSBvZiBhIERPTSBlbGVtZW50XHJcbiAgICAgKiAgQHBhcmFtIHtTdHJpbmd9IGF0dHIgRE9NIGVsZW1lbnQgYXR0cmlidXRlXHJcbiAgICAgKiAgQHJldHVybnMge1N0cmluZ3xFbXB0eX0gcmV0dXJucyB0aGUgYXR0ciB2YWx1ZSBvciBlbXB0eSBzdHJpbmdcclxuICAgICAqL1xyXG5cdGdvZG9WYWx1ZShhKSB7XHJcbiAgICAgICAgbGV0IHZhbCA9IHRoaXMuZWxlbS5hdHRyKCdnb2RvLScgKyBhKTtcclxuICAgICAgICByZXR1cm4gKHZhbCA9PT0gdW5kZWZpbmVkIHx8IHZhbCA9PT0gbnVsbCkgPyBmYWxzZSA6IHZhbDtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcbiAgICAgKiBAZXZlbnQgZ29kb1NoYXJlXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gTWFpbiBzaGFyZSBldmVudC4gV2lsbCBwb3AgYSB3aW5kb3cgb3IgcmVkaXJlY3QgdG8gYSBsaW5rXHJcbiAgICAgKi9cclxuXHRnb2RvU2hhcmUoKXtcclxuXHRcdGxldCBzaGFyZV9uYW1lID0gdGhpcy5nb2RvVmFsdWUoJ3NoYXJlJykudG9Mb3dlckNhc2UoKSxcclxuXHJcblx0XHRzaGFyZV9zb2NpYWwgPSB7XHJcblx0XHRcdGZhY2Vib29rOiB7XHJcblx0XHRcdFx0c2hhcmVVcmw6ICdodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHAnLFxyXG5cdFx0XHRcdHBhcmFtczoge3U6IHRoaXMuZ29kb1ZhbHVlKCd1cmwnKX1cclxuXHRcdFx0fSxcclxuXHRcdFx0dHdpdHRlcjoge1xyXG4gICAgICAgICAgICAgICAgc2hhcmVVcmw6ICdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldC8nLFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5nb2RvVmFsdWUoJ3RpdGxlJyksXHJcbiAgICAgICAgICAgICAgICBcdHVybDogdGhpcy5nb2RvVmFsdWUoJ3VybCcpLFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRyZWRkaXQ6IHtcclxuXHRcdFx0XHRzaGFyZVVybDogJ2h0dHBzOi8vd3d3LnJlZGRpdC5jb20vc3VibWl0JyxcclxuXHRcdFx0XHRwYXJhbXM6IHsndXJsJzogdGhpcy5nb2RvVmFsdWUoJ3VybCcpfVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRwaW50ZXJlc3Q6IHtcclxuICAgICAgICAgICAgXHRzaGFyZVVybDogJ2h0dHBzOi8vd3d3LnBpbnRlcmVzdC5jb20vcGluL2NyZWF0ZS9idXR0b24vJyxcclxuXHRcdFx0XHRwYXJhbXM6IHtcclxuXHRcdFx0XHRcdHVybDogdGhpcy5nb2RvVmFsdWUoJ3VybCcpLFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiB0aGlzLmdvZG9WYWx1ZSgndGl0bGUnKVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRwb2NrZXQ6IHtcclxuXHRcdFx0XHRzaGFyZVVybDogJ2h0dHBzOi8vZ2V0cG9ja2V0LmNvbS9zYXZlJyxcclxuXHRcdFx0XHRwYXJhbXM6IHtcclxuXHRcdFx0XHRcdHVybDogdGhpcy5nb2RvVmFsdWUoJ3VybCcpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHMgPSBzaGFyZV9zb2NpYWxbc2hhcmVfbmFtZV07XHJcblx0XHRcclxuXHRcdHJldHVybiBzICE9PSB1bmRlZmluZWQgPyB0aGlzLmdvZG9Qb3B1cChzKSA6IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcbiAgICAgKiBAZXZlbnQgZ29kb1BvcHVwXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc2hhcmVcclxuICAgICAqL1xyXG5cdGdvZG9Qb3B1cChzaGFyZSkge1xyXG5cdFx0dmFyIHAgPSBzaGFyZS5wYXJhbXMgfHwge30sXHJcblx0XHRrZXlzID0gT2JqZWN0LmtleXMocCksXHJcblx0XHRpLFxyXG5cdFx0c3RyID0ga2V5cy5sZW5ndGggPiAwID8gJz8nIDogJyc7XHJcblx0XHRcclxuXHRcdGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGlmIChzdHIgIT09ICc/Jykge1xyXG5cdFx0XHRcdHN0ciArPSAnJic7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHBba2V5c1tpXV0pIHtcclxuXHRcdFx0XHRzdHIgKz0ga2V5c1tpXSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwW2tleXNbaV1dKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRzaGFyZS5zaGFyZVVybCArPSBzdHI7XHJcblxyXG5cdFx0aWYgKCFzaGFyZS5pc0xpbmspIHtcclxuXHRcdFx0bGV0IHBvcFdpZHRoID0gc2hhcmUud2lkdGggfHwgNjAwLFxyXG5cdFx0XHRwb3BIZWlnaHQgPSBzaGFyZS5oZWlnaHQgfHwgNDgwLFxyXG5cdFx0XHRsZWZ0ID0gd2luZG93LmlubmVyV2lkdGggLyAyIC0gcG9wV2lkdGggLyAyICsgd2luZG93LnNjcmVlblgsXHJcblx0XHRcdHRvcCA9IHdpbmRvdy5pbm5lckhlaWdodCAvIDIgLSBwb3BIZWlnaHQgLyAyICsgd2luZG93LnNjcmVlblksXHJcblx0XHRcdHBvcFBhcmFtcyA9ICdzY3JvbGxiYXJzPW5vLCB3aWR0aD0nICsgcG9wV2lkdGggKyAnLCBoZWlnaHQ9JyArIHBvcEhlaWdodCArICcsIHRvcD0nICsgdG9wICsgJywgbGVmdD0nICsgbGVmdCxcclxuXHRcdFx0bmV3V2luZG93ID0gd2luZG93Lm9wZW4oc2hhcmUuc2hhcmVVcmwsICcnLCBwb3BQYXJhbXMpO1xyXG5cclxuXHRcdFx0aWYgKHdpbmRvdy5mb2N1cykge1xyXG5cdFx0XHRcdG5ld1dpbmRvdy5mb2N1cygpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHNoYXJlLnNoYXJlVXJsO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblxyXG59XHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHb2RvU2hhcmU7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2pzL2FwcC9hcHAuc2hhcmUuanNcbiAqKi8iLCIvKlxyXG4qIEBwYWNrYWdlIGdvZG9mcmVkb25pbmphXHJcbiogIFNoYXJlIGNvdW50IHNvY2lhbCBtZWRpYVxyXG4qL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuY2xhc3MgR29kb1NoYXJlQ291bnQge1x0XHJcblx0Y29uc3RydWN0b3IoZWxlbSkge1xyXG5cdFx0dGhpcy5lbGVtIFx0XHQ9IGVsZW07XHJcblx0XHR0aGlzLnVybCBcdFx0PSBlbGVtLmF0dHIoJ2RhdGEtdXJsJylcdFx0XHJcblx0XHR0aGlzLnRvdGFsIFx0XHQ9IDA7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBmdW5jdGlvbiBjb252ZXJ0TnVtYmVyXHJcblx0ICogQGRlc2NyaXB0aW9uICBSZXR1cm4gcm91bmRlZCBhbmQgcHJldHR5IHZhbHVlIG9mIHNoYXJlIGNvdW50LlxyXG5cdCAqL1xyXG5cdGNvbnZlcnROdW1iZXIobil7XHJcblx0XHRpZihuPj0xMDAwMDAwMDAwKSByZXR1cm4gKG4vMTAwMDAwMDAwMCkudG9GaXhlZCgxKSsnRyc7XHJcblx0XHRpZihuPj0xMDAwMDAwKSByZXR1cm4gKG4vMTAwMDAwMCkudG9GaXhlZCgxKSsnTSc7XHJcblx0XHRpZihuPj0xMDAwKSByZXR1cm4gKG4vMTAwMCkudG9GaXhlZCgxKSsnSyc7XHJcblx0XHRyZXR1cm4gbjtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBmdW5jdGlvbiB1cGRhdGVDb3VudGVyXHJcblx0ICogQGRlc2NyaXB0aW9uICBhZGRzIGFsbCB0aGUgbnVtYmVyIG9mIHNoYXJlZCBwYWdlc1xyXG5cdCAqL1xyXG5cdGFkZENvdW50ZXIobil7XHJcblx0XHR0aGlzLnRvdGFsID0gdGhpcy50b3RhbCtuO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQGZ1bmN0aW9uIHVwZGF0ZUNvdW50ZXJcclxuXHQgKiBAZGVzY3JpcHRpb24gIHVwZGF0ZSB0aGUgbnVtYmVyIG9mIHNoYXJlcy5cclxuXHQgKi9cclxuXHR1cGRhdGVDb3VudGVyKCl7XHJcblx0XHR0aGlzLmVsZW0uaHRtbChgPHNwYW4gc3R5bGU9XCJtYXJnaW4tcmlnaHQ6NXB4XCI+PHN0cm9uZz4ke3RoaXMuY29udmVydE51bWJlcih0aGlzLnRvdGFsKX08L3N0cm9uZz48L3NwYW4+PHNwYW4+U2hhcmVzPC9zcGFuPmApO1xyXG5cdH1cclxuXHRcclxuXHRnb2RvQ291bnQoKXtcclxuXHRcdFxyXG5cdFx0JC5nZXRKU09OKCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8/aWQ9JyArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnVybCkgKyAnJmNhbGxiYWNrPT8nLCByZXNwb25zZSA9PiB7XHJcblx0XHRcdGlmIChyZXNwb25zZS5zaGFyZXMgPT09IHVuZGVmaW5lZCkgdGhpcy5hZGRDb3VudGVyKDApO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dGhpcy5hZGRDb3VudGVyKHJlc3BvbnNlLnNoYXJlcyk7XHJcblx0XHRcdFx0dGhpcy51cGRhdGVDb3VudGVyKCk7XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdFx0JC5nZXRKU09OKFwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2NvdW50c2Vydi9jb3VudC9zaGFyZT91cmw9XCIrZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMudXJsKStcIiZmb3JtYXQ9anNvbnAmY2FsbGJhY2s9P1wiLCAocmVzcG9uc2UpID0+IHtcclxuXHRcdFx0dGhpcy5hZGRDb3VudGVyKHJlc3BvbnNlLmNvdW50KTtcclxuXHRcdFx0dGhpcy51cGRhdGVDb3VudGVyKCk7XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHb2RvU2hhcmVDb3VudDtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qcy9hcHAvYXBwLnNoYXJlLWNvdW50LmpzXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanM/YnJvd3NlcnM9bGFzdCAzIHZlcnNpb25zIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzP291dHB1dFN0eWxlPWV4cGFuZGVkIS4vbWFpbi5zY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWxvYWRlci9pbmRleC5qcz9icm93c2Vycz1sYXN0IDMgdmVyc2lvbnMhLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanM/b3V0cHV0U3R5bGU9ZXhwYW5kZWQhLi9tYWluLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanM/YnJvd3NlcnM9bGFzdCAzIHZlcnNpb25zIS4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzP291dHB1dFN0eWxlPWV4cGFuZGVkIS4vbWFpbi5zY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3Nhc3MvbWFpbi5zY3NzXG4gKiogbW9kdWxlIGlkID0gNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLmkocmVxdWlyZShcIi0hLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyFub3JtYWxpemUuY3NzL25vcm1hbGl6ZS5jc3NcIiksIFwiXCIpO1xuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qXFxuXFx0QHBhY2thZ2UgZ29kb2ZyZWRvbmluamFcXG4qL1xcblxcbi8qIE5vcm1hbGl6ZSBhbmQgaWNvbiBmb250cyAobGlicmFyaWVzKVxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ21hcGFjaGUnO1xcbiAgc3JjOiB1cmwoXCIgKyByZXF1aXJlKFwiLi4vLi4vYXNzZXRzL2ZvbnRzL21hcGFjaGUudHRmXCIpICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKSwgdXJsKFwiICsgcmVxdWlyZShcIi4uLy4uL2Fzc2V0cy9mb250cy9tYXBhY2hlLndvZmZcIikgKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksIHVybChcIiArIHJlcXVpcmUoXCIuLi8uLi9hc3NldHMvZm9udHMvbWFwYWNoZS5zdmdcIikgKyBcIikgZm9ybWF0KFxcXCJzdmdcXFwiKTtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxufVxcblxcbltjbGFzc149XFxcImktXFxcIl06YmVmb3JlLFxcbltjbGFzcyo9XFxcIiBpLVxcXCJdOmJlZm9yZSB7XFxuICAvKiB1c2UgIWltcG9ydGFudCB0byBwcmV2ZW50IGlzc3VlcyB3aXRoIGJyb3dzZXIgZXh0ZW5zaW9ucyB0aGF0IGNoYW5nZSBmb250cyAqL1xcbiAgZm9udC1mYW1pbHk6ICdtYXBhY2hlJyAhaW1wb3J0YW50O1xcbiAgc3BlYWs6IG5vbmU7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgZm9udC12YXJpYW50OiBub3JtYWw7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgLyogQmV0dGVyIEZvbnQgUmVuZGVyaW5nID09PT09PT09PT09ICovXFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxufVxcblxcbi5pLWdpdGh1YjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxGMDlCXFxcIjtcXG59XFxuXFxuLmktbGlua2VkaW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRjBFMVxcXCI7XFxufVxcblxcbi5pLWZsaWNrcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxGMTZFXFxcIjtcXG59XFxuXFxuLmktZHJpYmJibGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRjE3RFxcXCI7XFxufVxcblxcbi5pLXBpbnRlcmVzdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxGMjMxXFxcIjtcXG59XFxuXFxuLmktbWFwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEYwNDFcXFwiO1xcbn1cXG5cXG4uaS10d2l0dGVyOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEYwOTlcXFwiO1xcbn1cXG5cXG4uaS1mYWNlYm9vazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxGMDlBXFxcIjtcXG59XFxuXFxuLmkteW91dHViZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxGMTZBXFxcIjtcXG59XFxuXFxuLmktaW5zdGFncmFtOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEYxNkRcXFwiO1xcbn1cXG5cXG4uaS1nb29nbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRjFBMFxcXCI7XFxufVxcblxcbi5pLXBvY2tldDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxGMjY1XFxcIjtcXG59XFxuXFxuLmktcmVkZGl0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEYyODFcXFwiO1xcbn1cXG5cXG4uaS1iYWNrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU1QzRcXFwiO1xcbn1cXG5cXG4uaS1mb3J3YXJkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU1QzhcXFwiO1xcbn1cXG5cXG4uaS1jaGF0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEUwQ0JcXFwiO1xcbn1cXG5cXG4uaS1jbG9zZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFNUNEXFxcIjtcXG59XFxuXFxuLmktY29kZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFODZGXFxcIjtcXG59XFxuXFxuLmktZmF2b3JpdGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTg3RFxcXCI7XFxufVxcblxcbi5pLWxpbms6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTE1N1xcXCI7XFxufVxcblxcbi5pLW1lbnU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTVEMlxcXCI7XFxufVxcblxcbi5pLWZlZWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTBFNVxcXCI7XFxufVxcblxcbi5pLXNlYXJjaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOEI2XFxcIjtcXG59XFxuXFxuLmktc2hhcmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTgwRFxcXCI7XFxufVxcblxcbi5pLXNwaW5uZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTk4MlxcXCI7XFxufVxcblxcbi8qIGh0dHA6Ly9wcmlzbWpzLmNvbS9kb3dubG9hZC5odG1sP3RoZW1lcz1wcmlzbSZsYW5ndWFnZXM9bWFya3VwK2NzcytjbGlrZStqYXZhc2NyaXB0K2FzcG5ldCtiYXNoK2MrY3NoYXJwK2NwcCtydWJ5K2Nzcy1leHRyYXMrZ2l0K2dvK2phdmEranNvbitsZXNzK21hcmtkb3duK3BlcmwrcGhwK3BocC1leHRyYXMrcHl0aG9uK2pzeCtzY3NzK3NxbCtzd2lmdCZwbHVnaW5zPWxpbmUtbnVtYmVycyAqL1xcblxcbi8qKlxcclxcbiAqIHByaXNtLmpzIGRlZmF1bHQgdGhlbWUgZm9yIEphdmFTY3JpcHQsIENTUyBhbmQgSFRNTFxcclxcbiAqIEJhc2VkIG9uIGRhYmJsZXQgKGh0dHA6Ly9kYWJibGV0LmNvbSlcXHJcXG4gKiBAYXV0aG9yIExlYSBWZXJvdVxcclxcbiAqL1xcblxcbmNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSxcXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuICBjb2xvcjogYmxhY2s7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgdGV4dC1zaGFkb3c6IDAgMXB4IHdoaXRlO1xcbiAgZm9udC1mYW1pbHk6IENvbnNvbGFzLCBNb25hY28sICdBbmRhbGUgTW9ubycsICdVYnVudHUgTW9ubycsIG1vbm9zcGFjZTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICB3aGl0ZS1zcGFjZTogcHJlO1xcbiAgd29yZC1zcGFjaW5nOiBub3JtYWw7XFxuICB3b3JkLWJyZWFrOiBub3JtYWw7XFxuICB3b3JkLXdyYXA6IG5vcm1hbDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICAtbW96LXRhYi1zaXplOiA0O1xcbiAgdGFiLXNpemU6IDQ7XFxuICAtd2Via2l0LWh5cGhlbnM6IG5vbmU7XFxuICAtbXMtaHlwaGVuczogbm9uZTtcXG4gIGh5cGhlbnM6IG5vbmU7XFxufVxcblxcbnByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdOjotbW96LXNlbGVjdGlvbixcXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSA6Oi1tb3otc2VsZWN0aW9uLFxcbmNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXTo6LW1vei1zZWxlY3Rpb24sXFxuY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIDo6LW1vei1zZWxlY3Rpb24ge1xcbiAgdGV4dC1zaGFkb3c6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiAjYjNkNGZjO1xcbn1cXG5cXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXTo6c2VsZWN0aW9uLFxcbnByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIDo6c2VsZWN0aW9uLFxcbmNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXTo6c2VsZWN0aW9uLFxcbmNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSA6OnNlbGVjdGlvbiB7XFxuICB0ZXh0LXNoYWRvdzogbm9uZTtcXG4gIGJhY2tncm91bmQ6ICNiM2Q0ZmM7XFxufVxcblxcbkBtZWRpYSBwcmludCB7XFxuICBjb2RlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl0sXFxuICBwcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuICAgIHRleHQtc2hhZG93OiBub25lO1xcbiAgfVxcbn1cXG5cXG4vKiBDb2RlIGJsb2NrcyAqL1xcblxcbnByZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdIHtcXG4gIHBhZGRpbmc6IDFlbTtcXG4gIG1hcmdpbjogLjVlbSAwO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxufVxcblxcbjpub3QocHJlKSA+IGNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSxcXG5wcmVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuICBiYWNrZ3JvdW5kOiAjZjVmMmYwO1xcbn1cXG5cXG4vKiBJbmxpbmUgY29kZSAqL1xcblxcbjpub3QocHJlKSA+IGNvZGVbY2xhc3MqPVxcXCJsYW5ndWFnZS1cXFwiXSB7XFxuICBwYWRkaW5nOiAuMWVtO1xcbiAgYm9yZGVyLXJhZGl1czogLjNlbTtcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxufVxcblxcbi50b2tlbi5jb21tZW50LFxcbi50b2tlbi5wcm9sb2csXFxuLnRva2VuLmRvY3R5cGUsXFxuLnRva2VuLmNkYXRhIHtcXG4gIGNvbG9yOiBzbGF0ZWdyYXk7XFxufVxcblxcbi50b2tlbi5wdW5jdHVhdGlvbiB7XFxuICBjb2xvcjogIzk5OTtcXG59XFxuXFxuLm5hbWVzcGFjZSB7XFxuICBvcGFjaXR5OiAuNztcXG59XFxuXFxuLnRva2VuLnByb3BlcnR5LFxcbi50b2tlbi50YWcsXFxuLnRva2VuLmJvb2xlYW4sXFxuLnRva2VuLm51bWJlcixcXG4udG9rZW4uY29uc3RhbnQsXFxuLnRva2VuLnN5bWJvbCxcXG4udG9rZW4uZGVsZXRlZCB7XFxuICBjb2xvcjogIzkwNTtcXG59XFxuXFxuLnRva2VuLnNlbGVjdG9yLFxcbi50b2tlbi5hdHRyLW5hbWUsXFxuLnRva2VuLnN0cmluZyxcXG4udG9rZW4uY2hhcixcXG4udG9rZW4uYnVpbHRpbixcXG4udG9rZW4uaW5zZXJ0ZWQge1xcbiAgY29sb3I6ICM2OTA7XFxufVxcblxcbi50b2tlbi5vcGVyYXRvcixcXG4udG9rZW4uZW50aXR5LFxcbi50b2tlbi51cmwsXFxuLmxhbmd1YWdlLWNzcyAudG9rZW4uc3RyaW5nLFxcbi5zdHlsZSAudG9rZW4uc3RyaW5nIHtcXG4gIGNvbG9yOiAjYTY3ZjU5O1xcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xcbn1cXG5cXG4udG9rZW4uYXRydWxlLFxcbi50b2tlbi5hdHRyLXZhbHVlLFxcbi50b2tlbi5rZXl3b3JkIHtcXG4gIGNvbG9yOiAjMDdhO1xcbn1cXG5cXG4udG9rZW4uZnVuY3Rpb24ge1xcbiAgY29sb3I6ICNERDRBNjg7XFxufVxcblxcbi50b2tlbi5yZWdleCxcXG4udG9rZW4uaW1wb3J0YW50LFxcbi50b2tlbi52YXJpYWJsZSB7XFxuICBjb2xvcjogI2U5MDtcXG59XFxuXFxuLnRva2VuLmltcG9ydGFudCxcXG4udG9rZW4uYm9sZCB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLnRva2VuLml0YWxpYyB7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcblxcbi50b2tlbi5lbnRpdHkge1xcbiAgY3Vyc29yOiBoZWxwO1xcbn1cXG5cXG5wcmUubGluZS1udW1iZXJzIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHBhZGRpbmctbGVmdDogMy44ZW07XFxuICBjb3VudGVyLXJlc2V0OiBsaW5lbnVtYmVyO1xcbn1cXG5cXG5wcmUubGluZS1udW1iZXJzID4gY29kZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5saW5lLW51bWJlcnMgLmxpbmUtbnVtYmVycy1yb3dzIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgdG9wOiAwO1xcbiAgZm9udC1zaXplOiAxMDAlO1xcbiAgbGVmdDogLTMuOGVtO1xcbiAgd2lkdGg6IDNlbTtcXG4gIC8qIHdvcmtzIGZvciBsaW5lLW51bWJlcnMgYmVsb3cgMTAwMCBsaW5lcyAqL1xcbiAgbGV0dGVyLXNwYWNpbmc6IC0xcHg7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjOTk5O1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLmxpbmUtbnVtYmVycy1yb3dzID4gc3BhbiB7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY291bnRlci1pbmNyZW1lbnQ6IGxpbmVudW1iZXI7XFxufVxcblxcbi5saW5lLW51bWJlcnMtcm93cyA+IHNwYW46YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IGNvdW50ZXIobGluZW51bWJlcik7XFxuICBjb2xvcjogIzk5OTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZy1yaWdodDogMC44ZW07XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuXFxuLyogTWl4aW5zICYgVmFyaWFibGVzXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKlxcbkBwYWNrYWdlIGdvZG9mcmVkb25pbmphXFxuXFxuXFx0PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XFxuXFx0XFx0TWFwYWNoZSB2YXJpYWJsZXMgc3R5bGVzXFxuXFx0PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XFxuKi9cXG5cXG4vKipcXG4gKiBUYWJsZSBvZiBDb250ZW50czpcXG4gKlxcbiAqXFx0XFx0MS4gQ29sb3JzXFxuICovXFxuXFxuLyogMS4gQ29sb3JzXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKiAyLiBGb250c1xcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyogMy4gVHlwb2dyYXBoeVxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyogNC4gSGVhZGVyXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKiA0LiBGb290ZXJcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qIDQuIENvZGUgU3ludGF4XFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKiAzLiBidXR0b25zXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKiA1LiBjb250YWluZXJcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qIDEwLiBHcmlkXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKiAxMS4gTWVkaWEgUXVlcnkgUmFuZ2VzXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4uaGVhZGVyLnRvb2xiYXItc2hhZG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMCA0cHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4yOCk7XFxufVxcblxcbi51LXVuc3R5bGVkIHtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY2cHgpIHtcXG4gIC5oaWRlLWJlZm9yZS1tZCB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5OTJweCkge1xcbiAgLmhpZGUtYmVmb3JlLWxnIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2NnB4KSB7XFxuICAuaGlkZS1hZnRlci1tZCB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmhpZGUtYWZ0ZXItbGcge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblxcbi8qIFN0cnVjdHVyZVxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuaHRtbCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuKixcXG4qOmJlZm9yZSxcXG4qOmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbltnb2RvLXN0YXRlfj1uby1zY3JvbGxdIHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbmEge1xcbiAgY29sb3I6ICM0MTg0RjM7XFxuICBvdXRsaW5lOiAwO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuYTpmb2N1cyB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuYm9keSB7XFxuICBjb2xvcjogIzMzMztcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIiwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxufVxcblxcbmZpZ3VyZSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbmltZyB7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgd2lkdGg6IGF1dG87XFxufVxcblxcbmltZzpub3QoW3NyY10pIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuXFxuLmltZy1yZXNwb25zaXZlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG5pIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbmhyIHtcXG4gIG1hcmdpbjogMS44cmVtIDA7XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI0RERERERDtcXG4gIGhlaWdodDogMDtcXG59XFxuXFxuYmxvY2txdW90ZSB7XFxuICBib3JkZXItbGVmdDogM3B4IHNvbGlkICM0Mjg1ZjQ7XFxuICBwYWRkaW5nOiAxMHB4IDI0cHg7XFxuICBjb2xvcjogIzY2NjtcXG4gIGZvbnQtc2l6ZTogMTdweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjdlbTtcXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XFxuICBtYXJnaW46IDAgMCAyMHB4O1xcbiAgcXVvdGVzOiBub25lO1xcbn1cXG5cXG5vbCxcXG51bCxcXG5ibG9ja3F1b3RlIHtcXG4gIG1hcmdpbi1sZWZ0OiAycmVtO1xcbn1cXG5cXG5zdHJvbmcge1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuc21hbGwsXFxuLnNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogODUlO1xcbn1cXG5cXG5vbCB7XFxuICBwYWRkaW5nLWxlZnQ6IDQwcHg7XFxuICBsaXN0LXN0eWxlOiBkZWNpbWFsIG91dHNpZGU7XFxufVxcblxcbi8qIENvZGUgU3ludGF4XFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG5rYmQsXFxuc2FtcCxcXG5jb2RlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiRmlyYSBNb25vXFxcIiwgbW9ub3NwYWNlICFpbXBvcnRhbnQ7XFxuICBmb250LXNpemU6IDAuOTM3NXJlbTtcXG4gIGNvbG9yOiAjYzcyNTRlO1xcbiAgYmFja2dyb3VuZDogI2Y3ZjdmNztcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHBhZGRpbmc6IDRweCA2cHg7XFxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XFxufVxcblxcbmNvZGVbY2xhc3MqPWxhbmd1YWdlLV0sXFxucHJlW2NsYXNzKj1sYW5ndWFnZS1dIHtcXG4gIGNvbG9yOiAjMzc0NzRmO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG59XFxuXFxuY29kZVtjbGFzcyo9bGFuZ3VhZ2UtXSAudG9rZW4uY29tbWVudCxcXG5wcmVbY2xhc3MqPWxhbmd1YWdlLV0gLnRva2VuLmNvbW1lbnQge1xcbiAgb3BhY2l0eTogLjg7XFxufVxcblxcbmNvZGVbY2xhc3MqPWxhbmd1YWdlLV0ubGluZS1udW1iZXJzLFxcbnByZVtjbGFzcyo9bGFuZ3VhZ2UtXS5saW5lLW51bWJlcnMge1xcbiAgcGFkZGluZy1sZWZ0OiA1OHB4O1xcbn1cXG5cXG5jb2RlW2NsYXNzKj1sYW5ndWFnZS1dLmxpbmUtbnVtYmVyczpiZWZvcmUsXFxucHJlW2NsYXNzKj1sYW5ndWFnZS1dLmxpbmUtbnVtYmVyczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbiAgYmFja2dyb3VuZDogI0YwRURFRTtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG5jb2RlW2NsYXNzKj1sYW5ndWFnZS1dIC5saW5lLW51bWJlcnMtcm93cyxcXG5wcmVbY2xhc3MqPWxhbmd1YWdlLV0gLmxpbmUtbnVtYmVycy1yb3dzIHtcXG4gIGJvcmRlci1yaWdodDogbm9uZTtcXG4gIHRvcDogLTNweDtcXG4gIGxlZnQ6IC01OHB4O1xcbn1cXG5cXG5jb2RlW2NsYXNzKj1sYW5ndWFnZS1dIC5saW5lLW51bWJlcnMtcm93cyA+IHNwYW46YmVmb3JlLFxcbnByZVtjbGFzcyo9bGFuZ3VhZ2UtXSAubGluZS1udW1iZXJzLXJvd3MgPiBzcGFuOmJlZm9yZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgb3BhY2l0eTogLjg7XFxufVxcblxcbnByZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmN2Y3ICFpbXBvcnRhbnQ7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHdvcmQtd3JhcDogbm9ybWFsO1xcbiAgbWFyZ2luOiAyLjVyZW0gMCAhaW1wb3J0YW50O1xcbiAgZm9udC1mYW1pbHk6IFxcXCJGaXJhIE1vbm9cXFwiLCBtb25vc3BhY2UgIWltcG9ydGFudDtcXG4gIGZvbnQtc2l6ZTogMC45Mzc1cmVtO1xcbn1cXG5cXG5wcmUgY29kZSB7XFxuICBjb2xvcjogIzM3NDc0ZjtcXG4gIHRleHQtc2hhZG93OiAwIDFweCAjZmZmO1xcbiAgcGFkZGluZzogMDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4vKiBTb2NpYWwgaWNvbiBjb2xvciBhbmQgYmFja2dyb3VudFxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLmMtZmFjZWJvb2sge1xcbiAgY29sb3I6ICMzYjU5OTg7XFxufVxcblxcbi5iZy1mYWNlYm9vayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2I1OTk4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jLXR3aXR0ZXIge1xcbiAgY29sb3I6ICM1NWFjZWU7XFxufVxcblxcbi5iZy10d2l0dGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1NWFjZWUgIWltcG9ydGFudDtcXG59XFxuXFxuLmMtZ29vZ2xlIHtcXG4gIGNvbG9yOiAjZGQ0YjM5O1xcbn1cXG5cXG4uYmctZ29vZ2xlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkZDRiMzkgIWltcG9ydGFudDtcXG59XFxuXFxuLmMtaW5zdGFncmFtIHtcXG4gIGNvbG9yOiAjMzA2MDg4O1xcbn1cXG5cXG4uYmctaW5zdGFncmFtIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMDYwODggIWltcG9ydGFudDtcXG59XFxuXFxuLmMteW91dHViZSB7XFxuICBjb2xvcjogI2U1MmQyNztcXG59XFxuXFxuLmJnLXlvdXR1YmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U1MmQyNyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYy1naXRodWIge1xcbiAgY29sb3I6ICMzMzMzMzM7XFxufVxcblxcbi5iZy1naXRodWIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMzMzMzMyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYy1saW5rZWRpbiB7XFxuICBjb2xvcjogIzAwN2JiNjtcXG59XFxuXFxuLmJnLWxpbmtlZGluIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiYjYgIWltcG9ydGFudDtcXG59XFxuXFxuLmMtc3BvdGlmeSB7XFxuICBjb2xvcjogIzJlYmQ1OTtcXG59XFxuXFxuLmJnLXNwb3RpZnkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJlYmQ1OSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYy1jb2RlcGVuIHtcXG4gIGNvbG9yOiAjMjIyMjIyO1xcbn1cXG5cXG4uYmctY29kZXBlbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjIyMjIyICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jLWJlaGFuY2Uge1xcbiAgY29sb3I6ICMxMzE0MTg7XFxufVxcblxcbi5iZy1iZWhhbmNlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxMzE0MTggIWltcG9ydGFudDtcXG59XFxuXFxuLmMtZHJpYmJibGUge1xcbiAgY29sb3I6ICNlYTRjODk7XFxufVxcblxcbi5iZy1kcmliYmJsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWE0Yzg5ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jLWZsaWNrciB7XFxuICBjb2xvcjogIzAwNjNEQztcXG59XFxuXFxuLmJnLWZsaWNrciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2M0RDICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jLXJlZGRpdCB7XFxuICBjb2xvcjogb3JhbmdlcmVkO1xcbn1cXG5cXG4uYmctcmVkZGl0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IG9yYW5nZXJlZCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYy1wb2NrZXQge1xcbiAgY29sb3I6ICNGNTAwNTc7XFxufVxcblxcbi5iZy1wb2NrZXQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0Y1MDA1NyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYy1waW50ZXJlc3Qge1xcbiAgY29sb3I6ICNiZDA4MWM7XFxufVxcblxcbi5iZy1waW50ZXJlc3Qge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2JkMDgxYyAhaW1wb3J0YW50O1xcbn1cXG5cXG4uY2xlYXI6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBkaXNwbGF5OiB0YWJsZTtcXG4gIGNsZWFyOiBib3RoO1xcbn1cXG5cXG4udS1hbGlnbi1jZW50ZXIsXFxuLmNvdmVyIHtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi5jYXJkIHtcXG4gIGJvcmRlcjogMDtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBib3gtc2hhZG93OiAwIDFweCAycHggcmdiYSg0MywgNTksIDkzLCAwLjI5KTtcXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XFxuICBwYWRkaW5nOiAxZW07XFxufVxcblxcbi5zaG93LW9uLW1lZGl1bS1zY3JlZW4sXFxuLnNob3ctb24tc21hbGwtc2NyZWVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5sYW5kaW5nIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi5tYWluIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLm92ZXJsYXkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg1MCwgNTAsIDUwLCAwLjUpO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIG9wYWNpdHk6IDA7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICByaWdodDogMDtcXG4gIHRvcDogMDtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHotaW5kZXg6IDU5O1xcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcXG59XFxuXFxuLyogc2lkZWJhclxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLnNpZGViYXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41NCk7XFxuICBsaW5lLWhlaWdodDogMS42O1xcbn1cXG5cXG4uc2lkZWJhciBoMSxcXG4uc2lkZWJhciBoMixcXG4uc2lkZWJhciBoMyxcXG4uc2lkZWJhciBoNCxcXG4uc2lkZWJhciBoNSxcXG4uc2lkZWJhciBoNiB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbn1cXG5cXG4uc2lkZWJhciAud2lkZ2V0IHtcXG4gIG1hcmdpbi1ib3R0b206IDJyZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5zaWRlYmFyIC50aXRsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDI4NWY0O1xcbiAgY29sb3I6ICNGRkZGRkY7XFxuICBwYWRkaW5nOiAxMHB4IDE2cHg7XFxuICBmb250LXNpemU6IDE4cHg7XFxufVxcblxcbi5zdmctaWNvbiB7XFxuICBtYXJnaW46IGF1dG87XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0IG5vLXJlcGVhdDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZmlsbDogY3VycmVudGNvbG9yO1xcbn1cXG5cXG4vKiBWaWRlbyBSZXNwb25zaXZlXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4udmlkZW8tcmVzcG9uc2l2ZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZy1ib3R0b206IDU2LjI1JTtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTtcXG59XFxuXFxuLnZpZGVvLXJlc3BvbnNpdmUgaWZyYW1lIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3R0b206IDA7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlcjogMDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5MDBweCkge1xcbiAgLmJnLWhvbWUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUVFRUVFO1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmYgMCwgI2ZmZiA1MCUsICNFRUVFRUUgNTAlLCAjRUVFRUVFIDEwMCUpO1xcbiAgfVxcblxcbiAgLmJnLWhvbWUgLm1haW4tcG9zdCB7XFxuICAgIGJhY2tncm91bmQ6ICNmZmY7XFxuICB9XFxufVxcblxcbi5mYi1wb3N0LFxcbi50d2l0dGVyLXR3ZWV0IHtcXG4gIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxuICBtYXJnaW46IDAgYXV0byA0MHB4IGF1dG8gIWltcG9ydGFudDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLkFkcyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW46IDEwcHggLTMycHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5BZHMgLkFkcy1jb250ZW50IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxufVxcblxcbi5jb250YWluZXIge1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwYWRkaW5nLWxlZnQ6IDAuOTM3NXJlbTtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuOTM3NXJlbTtcXG4gIHdpZHRoOiA1NzZweDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2NnB4KSB7XFxuICAuY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiA3NTBweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmNvbnRhaW5lciB7XFxuICAgIG1heC13aWR0aDogOTcwcHg7XFxuICB9XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTIzMHB4KSB7XFxuICAuY29udGFpbmVyIHtcXG4gICAgbWF4LXdpZHRoOiAxMjAwcHg7XFxuICB9XFxufVxcblxcbi5tYXJnaW4tdG9wIHtcXG4gIG1hcmdpbi10b3A6IDU2cHg7XFxuICBwYWRkaW5nLXRvcDogMXJlbTtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjZweCkge1xcbiAgLm1hcmdpbi10b3Age1xcbiAgICBwYWRkaW5nLXRvcDogMnJlbTtcXG4gIH1cXG59XFxuXFxuLmxheW91dC13cmFwIHtcXG4gIC13ZWJraXQtZmxleC13cmFwOiB3cmFwO1xcbiAgLW1zLWZsZXgtd3JhcDogd3JhcDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmxheW91dC1yb3cge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuW2NsYXNzXj1cXFwiY29sLWdkLVxcXCJdIHtcXG4gIG1pbi1oZWlnaHQ6IDFweDtcXG4gIHBhZGRpbmctbGVmdDogMC45Mzc1cmVtO1xcbiAgcGFkZGluZy1yaWdodDogMC45Mzc1cmVtO1xcbn1cXG5cXG4uY29sLWdkLWxlZnQsXFxuLmNvbC1nZC1yaWdodCxcXG4uY29sLWdkLXBvc3QtaW1hZ2UsXFxuLmNvbC1nZC1wb3N0LW1ldGEge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5jb2wtZ2QtbGVmdCB7XFxuICAgIHdpZHRoOiA2NS45OCU7XFxuICB9XFxuXFxuICAuY29sLWdkLXJpZ2h0IHtcXG4gICAgd2lkdGg6IDM0LjAyJTtcXG4gIH1cXG5cXG4gIC5jb2wtZ2QtcG9zdC1pbWFnZSB7XFxuICAgIHdpZHRoOiA0Ni41JTtcXG4gIH1cXG5cXG4gIC5jb2wtZ2QtcG9zdC1tZXRhIHtcXG4gICAgd2lkdGg6IDUzLjUlO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMzBweCkge1xcbiAgLmNvbC1nZC1sZWZ0IHtcXG4gICAgd2lkdGg6IDcyLjUlO1xcbiAgfVxcblxcbiAgLmNvbC1nZC1yaWdodCB7XFxuICAgIHdpZHRoOiAyNy41JTtcXG4gIH1cXG59XFxuXFxuLnJvdyB7XFxuICBtYXJnaW4tbGVmdDogLTAuOTM3NXJlbTtcXG4gIG1hcmdpbi1yaWdodDogLTAuOTM3NXJlbTtcXG59XFxuXFxuLnJvdzphZnRlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGRpc3BsYXk6IHRhYmxlO1xcbiAgY2xlYXI6IGJvdGg7XFxufVxcblxcbi5yb3cgLmNvbCB7XFxuICBmbG9hdDogbGVmdDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwYWRkaW5nLWxlZnQ6IDAuOTM3NXJlbTtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuOTM3NXJlbTtcXG59XFxuXFxuLnJvdyAuY29sLnMxIHtcXG4gIHdpZHRoOiA4LjMzMzMzJTtcXG59XFxuXFxuLnJvdyAuY29sLnMyIHtcXG4gIHdpZHRoOiAxNi42NjY2NyU7XFxufVxcblxcbi5yb3cgLmNvbC5zMyB7XFxuICB3aWR0aDogMjUlO1xcbn1cXG5cXG4ucm93IC5jb2wuczQge1xcbiAgd2lkdGg6IDMzLjMzMzMzJTtcXG59XFxuXFxuLnJvdyAuY29sLnM1IHtcXG4gIHdpZHRoOiA0MS42NjY2NyU7XFxufVxcblxcbi5yb3cgLmNvbC5zNiB7XFxuICB3aWR0aDogNTAlO1xcbn1cXG5cXG4ucm93IC5jb2wuczcge1xcbiAgd2lkdGg6IDU4LjMzMzMzJTtcXG59XFxuXFxuLnJvdyAuY29sLnM4IHtcXG4gIHdpZHRoOiA2Ni42NjY2NyU7XFxufVxcblxcbi5yb3cgLmNvbC5zOSB7XFxuICB3aWR0aDogNzUlO1xcbn1cXG5cXG4ucm93IC5jb2wuczEwIHtcXG4gIHdpZHRoOiA4My4zMzMzMyU7XFxufVxcblxcbi5yb3cgLmNvbC5zMTEge1xcbiAgd2lkdGg6IDkxLjY2NjY3JTtcXG59XFxuXFxuLnJvdyAuY29sLnMxMiB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjZweCkge1xcbiAgLnJvdyAuY29sLm0xIHtcXG4gICAgd2lkdGg6IDguMzMzMzMlO1xcbiAgfVxcblxcbiAgLnJvdyAuY29sLm0yIHtcXG4gICAgd2lkdGg6IDE2LjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5yb3cgLmNvbC5tMyB7XFxuICAgIHdpZHRoOiAyNSU7XFxuICB9XFxuXFxuICAucm93IC5jb2wubTQge1xcbiAgICB3aWR0aDogMzMuMzMzMzMlO1xcbiAgfVxcblxcbiAgLnJvdyAuY29sLm01IHtcXG4gICAgd2lkdGg6IDQxLjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5yb3cgLmNvbC5tNiB7XFxuICAgIHdpZHRoOiA1MCU7XFxuICB9XFxuXFxuICAucm93IC5jb2wubTcge1xcbiAgICB3aWR0aDogNTguMzMzMzMlO1xcbiAgfVxcblxcbiAgLnJvdyAuY29sLm04IHtcXG4gICAgd2lkdGg6IDY2LjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5yb3cgLmNvbC5tOSB7XFxuICAgIHdpZHRoOiA3NSU7XFxuICB9XFxuXFxuICAucm93IC5jb2wubTEwIHtcXG4gICAgd2lkdGg6IDgzLjMzMzMzJTtcXG4gIH1cXG5cXG4gIC5yb3cgLmNvbC5tMTEge1xcbiAgICB3aWR0aDogOTEuNjY2NjclO1xcbiAgfVxcblxcbiAgLnJvdyAuY29sLm0xMiB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDk5MnB4KSB7XFxuICAucm93IC5jb2wubDEge1xcbiAgICB3aWR0aDogOC4zMzMzMyU7XFxuICB9XFxuXFxuICAucm93IC5jb2wubDIge1xcbiAgICB3aWR0aDogMTYuNjY2NjclO1xcbiAgfVxcblxcbiAgLnJvdyAuY29sLmwzIHtcXG4gICAgd2lkdGg6IDI1JTtcXG4gIH1cXG5cXG4gIC5yb3cgLmNvbC5sNCB7XFxuICAgIHdpZHRoOiAzMy4zMzMzMyU7XFxuICB9XFxuXFxuICAucm93IC5jb2wubDUge1xcbiAgICB3aWR0aDogNDEuNjY2NjclO1xcbiAgfVxcblxcbiAgLnJvdyAuY29sLmw2IHtcXG4gICAgd2lkdGg6IDUwJTtcXG4gIH1cXG5cXG4gIC5yb3cgLmNvbC5sNyB7XFxuICAgIHdpZHRoOiA1OC4zMzMzMyU7XFxuICB9XFxuXFxuICAucm93IC5jb2wubDgge1xcbiAgICB3aWR0aDogNjYuNjY2NjclO1xcbiAgfVxcblxcbiAgLnJvdyAuY29sLmw5IHtcXG4gICAgd2lkdGg6IDc1JTtcXG4gIH1cXG5cXG4gIC5yb3cgLmNvbC5sMTAge1xcbiAgICB3aWR0aDogODMuMzMzMzMlO1xcbiAgfVxcblxcbiAgLnJvdyAuY29sLmwxMSB7XFxuICAgIHdpZHRoOiA5MS42NjY2NyU7XFxuICB9XFxuXFxuICAucm93IC5jb2wubDEyIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxufVxcblxcbmgxLFxcbmgyLFxcbmgzLFxcbmg0LFxcbmg1LFxcbmg2LFxcbi5oMSxcXG4uaDIsXFxuLmgzLFxcbi5oNCxcXG4uaDUsXFxuLmg2IHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIiwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBsaW5lLWhlaWdodDogMS4xO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbmgxIHtcXG4gIGZvbnQtc2l6ZTogMi4yNXJlbTtcXG59XFxuXFxuaDIge1xcbiAgZm9udC1zaXplOiAxLjg3NXJlbTtcXG59XFxuXFxuaDMge1xcbiAgZm9udC1zaXplOiAxLjU2MjVyZW07XFxufVxcblxcbmg0IHtcXG4gIGZvbnQtc2l6ZTogMS4zNzVyZW07XFxufVxcblxcbmg1IHtcXG4gIGZvbnQtc2l6ZTogMS4xMjVyZW07XFxufVxcblxcbmg2IHtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuXFxuLmgxIHtcXG4gIGZvbnQtc2l6ZTogMi4yNXJlbTtcXG59XFxuXFxuLmgyIHtcXG4gIGZvbnQtc2l6ZTogMS44NzVyZW07XFxufVxcblxcbi5oMyB7XFxuICBmb250LXNpemU6IDEuNTYyNXJlbTtcXG59XFxuXFxuLmg0IHtcXG4gIGZvbnQtc2l6ZTogMS4zNzVyZW07XFxufVxcblxcbi5oNSB7XFxuICBmb250LXNpemU6IDEuMTI1cmVtO1xcbn1cXG5cXG4uaDYge1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG5cXG5oMSxcXG5oMixcXG5oMyxcXG5oNCxcXG5oNSxcXG5oNiB7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbn1cXG5cXG5oMSBhLFxcbmgyIGEsXFxuaDMgYSxcXG5oNCBhLFxcbmg1IGEsXFxuaDYgYSB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbn1cXG5cXG5wIHtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbn1cXG5cXG4ubWVudS1tb2JpbGUge1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGJvdHRvbTogMDtcXG4gIGJveC1zaGFkb3c6IDAgOXB4IDE4cHggMCByZ2JhKDAsIDAsIDAsIDAuMTgpO1xcbiAgbGVmdDogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICB3aWR0aDogMjU2cHg7XFxuICB6LWluZGV4OiA2MDtcXG4gIHRyYW5zaXRpb24tZHVyYXRpb246IC4zcztcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtMTAwJSwgMCwgMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC0xMDAlLCAwLCAwKTtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjRzIGN1YmljLWJlemllcigwLjI1LCAwLjgsIDAuNTgsIDEpO1xcbn1cXG5cXG4ubWVudS1tb2JpbGUub3BlbiB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCUsIDAsIDApO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwJSwgMCwgMCk7XFxufVxcblxcbi5tZW51LW1vYmlsZS13cmFwIHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgcGFkZGluZy1ib3R0b206IDhweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZy10b3A6IDFyZW07XFxufVxcblxcbi5tZW51LW1vYmlsZSAubmF2aWdhdGlvbi1saW5rIHtcXG4gIGNvbG9yOiAjMzMzO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgaGVpZ2h0OiA0OHB4O1xcbiAgbGluZS1oZWlnaHQ6IDUwcHg7XFxuICBvcGFjaXR5OiAuODU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZzogMCAxMnB4IDAgMjBweDtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4zcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKTtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLm1lbnUtbW9iaWxlIC5uYXZpZ2F0aW9uLWxpbmsuYWN0aXZlLFxcbi5tZW51LW1vYmlsZSAubmF2aWdhdGlvbi1saW5rOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlN2U3ZTc7XFxufVxcblxcbi5tZW51LW1vYmlsZS10ZXh0IHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4uaGVhZGVyIHtcXG4gIGJhY2tncm91bmQ6ICM0Mjg1ZjQ7XFxuICBoZWlnaHQ6IDU2cHg7XFxuICBsZWZ0OiAwO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgcmlnaHQ6IDA7XFxuICB6LWluZGV4OiA1MDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4uaGVhZGVyIFtjbGFzcyo9XFxcIiBpLVxcXCJdOmJlZm9yZSxcXG4uaGVhZGVyIFtjbGFzc149aS1dOmJlZm9yZSB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuLmhlYWRlci1idG4ge1xcbiAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgd2lkdGg6IDQ4cHg7XFxuICBoZWlnaHQ6IDQ4cHggIWltcG9ydGFudDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG59XFxuXFxuLmhlYWRlci1idG46aG92ZXIge1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjEyKTtcXG59XFxuXFxuLmhlYWRlciAubWVudS1vcGVuIHtcXG4gIG1hcmdpbi1sZWZ0OiAtMC42MjVyZW07XFxuICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcXG59XFxuXFxuLmhlYWRlciAuc2VhcmNoLW9wZW4ge1xcbiAgbWFyZ2luLXJpZ2h0OiAtLjYyNXJlbTtcXG59XFxuXFxuLmhlYWRlciBhIHtcXG4gIGhlaWdodDogNTZweDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbi5oZWFkZXItd3JhcCB7XFxuICBoZWlnaHQ6IDU2cHg7XFxuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nLWxlZnQ6IDAuOTM3NXJlbTtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuOTM3NXJlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBtYXgtd2lkdGg6IDE0MDBweDtcXG59XFxuXFxuLmhlYWRlci10b3BiYXI6bm90KC50b29sYmFyLXNoYWRvdykge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcXG59XFxuXFxuLmhlYWRlci1sb2dvIHNwYW4ge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuLmhlYWRlci1sb2dvIGltZyB7XFxuICBtYXgtaGVpZ2h0OiAzNXB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4vKiBOYXZpZ2F0aW9uXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4uaGVhZGVyLW5hdmlnYXRpb24ge1xcbiAgbWFyZ2luLWxlZnQ6IDQ4cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAtd2Via2l0LWZsZXg6IDEgMSBhdXRvO1xcbiAgLW1zLWZsZXg6IDEgMSBhdXRvO1xcbiAgZmxleDogMSAxIGF1dG87XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIHRyYW5zaXRpb246IG1hcmdpbiAuMnMsd2lkdGggLjJzLC13ZWJraXQtZmxleCAuMnM7XFxuICB0cmFuc2l0aW9uOiBmbGV4IC4ycyxtYXJnaW4gLjJzLHdpZHRoIC4ycztcXG4gIHRyYW5zaXRpb246IGZsZXggLjJzLG1hcmdpbiAuMnMsd2lkdGggLjJzLC13ZWJraXQtZmxleCAuMnMsLW1zLWZsZXggLjJzO1xcbn1cXG5cXG4uaGVhZGVyLW5hdmlnYXRpb24td3JhcCB7XFxuICBsZWZ0OiAwcHg7XFxuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5oZWFkZXItbmF2aWdhdGlvbiAubmF2aWdhdGlvbi1saW5rIHtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwIDFyZW07XFxuICB0cmFuc2l0aW9uOiBjb2xvciAuMnM7XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbn1cXG5cXG4uaGVhZGVyLW5hdmlnYXRpb24gLm5hdmlnYXRpb24tbGluazpob3ZlciB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xcbn1cXG5cXG4uaGVhZGVyLW5hdmlnYXRpb24gLm5hdmlnYXRpb24tbGluay5hY3RpdmUge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2ZmZjtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcblxcbi8qIEhlYWRlciBzZWFyY2hcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi5oZWFkZXItc2VhcmNoIHtcXG4gIGJhY2tncm91bmQ6ICNmN2Y3Zjc7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAtd2Via2l0LWZsZXg6IDAgMCBhdXRvO1xcbiAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgZmxleDogMCAwIGF1dG87XFxuICBoZWlnaHQ6IDM2cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAuMnMsLXdlYmtpdC1mbGV4IC4ycztcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQgLjJzLGZsZXggLjJzO1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAuMnMsZmxleCAuMnMsLXdlYmtpdC1mbGV4IC4ycywtbXMtZmxleCAuMnM7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbiAgYm94LXNoYWRvdzogMCAxcHggMS41cHggcmdiYSgwLCAwLCAwLCAwLjA2KSwgMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxufVxcblxcbi5oZWFkZXItc2VhcmNoLmhhcy1mb2N1cyB7XFxuICBiYWNrZ3JvdW5kOiAjZjdmN2Y3O1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uaGVhZGVyLXNlYXJjaC5oYXMtZm9jdXM6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogI2Y3ZjdmNztcXG59XFxuXFxuLmhlYWRlci1zZWFyY2guaGFzLWZvY3VzIGlucHV0IHtcXG4gIGNvbG9yOiAjMjEyMTIxICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oZWFkZXItc2VhcmNoLmhhcy1mb2N1cyAuc2VhcmNoLWljb24ge1xcbiAgY29sb3I6ICM3NTc1NzU7XFxufVxcblxcbi5oZWFkZXItc2VhcmNoIC5zZWFyY2gtaWNvbiB7XFxuICBjb2xvcjogIzc1NzU3NTtcXG4gIGxlZnQ6IDI0cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDZweDtcXG4gIHRyYW5zaXRpb246IGNvbG9yIC4ycztcXG59XFxuXFxuaW5wdXQuc2VhcmNoLWZpZWxkIHtcXG4gIGJhY2tncm91bmQ6IDA7XFxuICBib3JkZXI6IDA7XFxuICBjb2xvcjogIzIxMjEyMTtcXG4gIGhlaWdodDogMzZweDtcXG4gIHBhZGRpbmc6IDhweCA4cHggOHB4IDcycHg7XFxuICB0cmFuc2l0aW9uOiBjb2xvciAuMnM7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuaW5wdXQuc2VhcmNoLWZpZWxkOmZvY3VzIHtcXG4gIGJvcmRlcjogMDtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbi8qIGhlYWRlciBzb2NpYWxcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi5oZWFkZXItc29jaWFsIHtcXG4gIC13ZWJraXQtZmxleDogMCAwIGF1dG87XFxuICAtbXMtZmxleDogMCAwIGF1dG87XFxuICBmbGV4OiAwIDAgYXV0bztcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmhlYWRlci1zb2NpYWwgYSB7XFxuICBwYWRkaW5nOiAwIDhweDtcXG59XFxuXFxuLmhlYWRlci1zb2NpYWwgYTpob3ZlciB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xcbn1cXG5cXG4uaGVhZGVyLXNvY2lhbCBhOmJlZm9yZSB7XFxuICBmb250LXNpemU6IDEuMjVyZW0gIWltcG9ydGFudDtcXG59XFxuXFxuLyogbWVkaWFxdWVyeSBtZWRpdW1cXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY2cHgpIHtcXG4gIC5oZWFkZXItbmF2aWdhdGlvbiB7XFxuICAgIC13ZWJraXQtZmxleDogMCAwIGF1dG87XFxuICAgIC1tcy1mbGV4OiAwIDAgYXV0bztcXG4gICAgZmxleDogMCAwIGF1dG87XFxuICAgIG1hcmdpbjogMDtcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgICB3aWR0aDogMDtcXG4gIH1cXG5cXG4gIC5oZWFkZXItc2VhcmNoIHtcXG4gICAgLXdlYmtpdC1mbGV4OiAxIDAgYXV0bztcXG4gICAgLW1zLWZsZXg6IDEgMCBhdXRvO1xcbiAgICBmbGV4OiAxIDAgYXV0bztcXG4gICAgbWFyZ2luOiA2cHggMjRweDtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjZweCkge1xcbiAgLmhlYWRlci5zZWFyY2gtb3Blbi1mb3JtIC5oZWFkZXItbG9nbyxcXG4gIC5oZWFkZXIuc2VhcmNoLW9wZW4tZm9ybSAuaGVhZGVyLW5hdmlnYXRpb24sXFxuICAuaGVhZGVyLnNlYXJjaC1vcGVuLWZvcm0gI3NlYXJjaC1vcGVuIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG5cXG4gIC5oZWFkZXIuc2VhcmNoLW9wZW4tZm9ybSAjc2VhcmNoLWNsb3NlIHtcXG4gICAgZGlzcGxheTogaW5oZXJpdCAhaW1wb3J0YW50O1xcbiAgfVxcblxcbiAgLmhlYWRlci5zZWFyY2gtb3Blbi1mb3JtIC5oZWFkZXItc2VhcmNoIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtZmxleDogMSAwIGF1dG87XFxuICAgIC1tcy1mbGV4OiAxIDAgYXV0bztcXG4gICAgZmxleDogMSAwIGF1dG87XFxuICB9XFxufVxcblxcbi8qIG1lZGlhcXVlcnkgbGFyZ2VcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY2cHgpIHtcXG4gIC5oZWFkZXItbmF2aWdhdGlvbiB7XFxuICAgIC13ZWJraXQtZmxleDogMSAxIDA7XFxuICAgIC1tcy1mbGV4OiAxIDEgMDtcXG4gICAgZmxleDogMSAxIDA7XFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICAgIG1hcmdpbi1sZWZ0OiA0OHB4O1xcbiAgfVxcblxcbiAgLmhlYWRlci1zZWFyY2gge1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjUpO1xcbiAgICBtYXgtd2lkdGg6IDIwMHB4O1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gIH1cXG5cXG4gIC5oZWFkZXItc2VhcmNoOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpO1xcbiAgfVxcblxcbiAgLmhlYWRlci1zZWFyY2ggaW5wdXRbcGxhY2Vob2xkZXJdLFxcbiAgLmhlYWRlci1zZWFyY2ggLnNlYXJjaC1pY29uIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxufVxcblxcbi5jb3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjNDI4NWY0O1xcbiAgY29sb3I6ICNmZmY7XFxuICBsZXR0ZXItc3BhY2luZzogLjJweDtcXG4gIGhlaWdodDogNjV2aDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRleHQtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMzMpO1xcbiAgei1pbmRleDogMjtcXG59XFxuXFxuLmNvdmVyLmZ1bGwtaGVpZ2h0IHtcXG4gIGhlaWdodDogMTAwdmg7XFxufVxcblxcbi5jb3Zlci13cmFwIHtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgbWF4LXdpZHRoOiA3MDBweDtcXG4gIHBhZGRpbmc6IDE2cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB6LWluZGV4OiA5OTtcXG59XFxuXFxuLmNvdmVyLXRpdGxlIHtcXG4gIGZvbnQtc2l6ZTogM3JlbTtcXG4gIG1hcmdpbjogMCAwIDMwcHggMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI7XFxufVxcblxcbi5jb3ZlciAubW91c2Uge1xcbiAgd2lkdGg6IDI1cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBoZWlnaHQ6IDM2cHg7XFxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xcbiAgYm9yZGVyOiAycHggc29saWQgIzg4ODtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yNyk7XFxuICBib3R0b206IDQwcHg7XFxuICByaWdodDogNDBweDtcXG4gIG1hcmdpbi1sZWZ0OiAtMTJweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAwLjJzIGVhc2UtaW47XFxufVxcblxcbi5jb3ZlciAubW91c2UgLnNjcm9sbCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogNnB4IGF1dG87XFxuICB3aWR0aDogM3B4O1xcbiAgaGVpZ2h0OiA2cHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBiYWNrZ3JvdW5kOiAjYjBiMWIxO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDJzO1xcbiAgYW5pbWF0aW9uLWR1cmF0aW9uOiAycztcXG4gIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IHNjcm9sbDtcXG4gIGFuaW1hdGlvbi1uYW1lOiBzY3JvbGw7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xcbiAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XFxufVxcblxcbi5jb3ZlciAuYmFja2dyb3VuZCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG59XFxuXFxuLmNvdmVyIC5iYWNrZ3JvdW5kOmJlZm9yZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNvbnRlbnQ6ICcgJztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjYpO1xcbiAgYmFja2dyb3VuZDogLXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgZnJvbShyZ2JhKDAsIDAsIDAsIDAuMSkpLCB0byhyZ2JhKDAsIDAsIDAsIDAuNykpKTtcXG59XFxuXFxuLmF1dGhvciAuaW5mbyB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgbWFyZ2luLXRvcDogMTAlO1xcbn1cXG5cXG4uYXV0aG9yIC5uYW1lLXdyYXAge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uYXV0aG9yIC50aXRsZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxufVxcblxcbi5hdXRob3IgLm5hbWUge1xcbiAgbWFyZ2luOiA1cHggMDtcXG4gIGZvbnQtc2l6ZTogMS43NXJlbTtcXG59XFxuXFxuLmF1dGhvciAuZGVzY3JpcHRpb24ge1xcbiAgbWFyZ2luOiAxLjVyZW0gMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjg7XFxuICBmb250LXNpemU6IDE4cHg7XFxufVxcblxcbi5hdXRob3IgLmF2YXRhciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBib3JkZXItcmFkaXVzOiA5MHB4O1xcbiAgbWFyZ2luLXJpZ2h0OiA1JTtcXG4gIHdpZHRoOiA4MHB4O1xcbiAgaGVpZ2h0OiA4MHB4O1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxufVxcblxcbi5hdXRob3ItbWV0YSB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWFyZ2luLWJvdHRvbTogMi41cmVtO1xcbiAgbWFyZ2luLXRvcDogMXJlbTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi5hdXRob3ItbWV0YSBzcGFuIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBtYXJnaW46IDAgMTBweDtcXG59XFxuXFxuLmF1dGhvci1tZXRhIGEge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjZweCkge1xcbiAgLmNvdmVyLWRlc2NyaXB0aW9uIHtcXG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgfVxcbn1cXG5cXG4uZW50cmllcyB7XFxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMDtcXG4gIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCAjRUVFO1xcbn1cXG5cXG4uZW50cmllcyAuaW1hZ2Uge1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLmVudHJpZXMgLmltYWdlLWxpbmsge1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi5lbnRyaWVzIC5pbWFnZSBpbWcge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIGhlaWdodDogYXV0bztcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbn1cXG5cXG4uZW50cmllcyAudGFnIHtcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5cXG4uZW50cmllcyAudGFnIGE6aG92ZXIge1xcbiAgY29sb3I6ICMxMTY1ZjA7XFxufVxcblxcbi5lbnRyaWVzIC50aXRsZSB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBjb2xvcjogIzAwMDtcXG4gIG1hcmdpbjogMCAwIDFyZW07XFxuICBwYWRkaW5nOiAwO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgbGluZS1oZWlnaHQ6IDEuMztcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcblxcbi5lbnRyaWVzIC50aXRsZTpob3ZlciB7XFxuICBjb2xvcjogIzc3NztcXG59XFxuXFxuLmVudHJpZXMgLm1ldGEtYXV0aG9yLWRhdGUge1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIG1hcmdpbi1ib3R0b206IDEuMTI1cmVtO1xcbn1cXG5cXG4uZW50cmllcy1iZyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmVudHJpZXMge1xcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMnJlbTtcXG4gIH1cXG5cXG4gIC5lbnRyaWVzIC50aXRsZSB7XFxuICAgIGZvbnQtc2l6ZTogMS42MjVyZW07XFxuICB9XFxuXFxuICAuZW50cmllcyAuaW1hZ2Uge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgfVxcblxcbiAgLmVudHJpZXMgLmltYWdlLWxpbmsge1xcbiAgICBoZWlnaHQ6IDE4MHB4O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEyMzBweCkge1xcbiAgLmVudHJpZXMgLmltYWdlLWxpbmsge1xcbiAgICBoZWlnaHQ6IDI1MHB4O1xcbiAgfVxcbn1cXG5cXG4uZm9vdGVyIHtcXG4gIGJhY2tncm91bmQ6ICMyNTMyMzg7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLmZvb3RlciBhIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgb3BhY2l0eTogLjkwO1xcbn1cXG5cXG4uZm9vdGVyLXdyYXAge1xcbiAgcGFkZGluZzogMTBweCAxNnB4O1xcbiAgY29sb3I6ICNBMkFBQUQ7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5mb290ZXItd3JhcCAuY29weSxcXG4uZm9vdGVyLXdyYXAgLmJ5IHtcXG4gIG1hcmdpbjogMTBweCAwO1xcbn1cXG5cXG4uZm9vdGVyLXdyYXAgLmNvcHkgc3BhbixcXG4uZm9vdGVyLXdyYXAgLmJ5IHNwYW4ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MHB4KSB7XFxuICAuZm9vdGVyLXdyYXAge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDMwcHg7XFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICB9XFxuXFxuICAuZm9vdGVyLXdyYXAgLmJ5IHtcXG4gICAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgLW1zLWZsZXgtcGFjazogZmxleC1lbmQ7XFxuICAgIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gICAgLXdlYmtpdC1mbGV4OiAxIDAgYXV0bztcXG4gICAgLW1zLWZsZXg6IDEgMCBhdXRvO1xcbiAgICBmbGV4OiAxIDAgYXV0bztcXG4gIH1cXG59XFxuXFxuLmJ0biB7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBib3gtc2hhZG93OiAwIDJweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY29sb3I6ICMzMzM7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUm9ib3RvXFxcIiwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgb3V0bGluZTogMDtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgei1pbmRleDogMjtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgbWluLXdpZHRoOiAzNnB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uYnRuOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxufVxcblxcbi5idG4uYnRuLXByaW1hcnkge1xcbiAgYmFja2dyb3VuZDogIzQyODVmNDtcXG4gIGJvcmRlci1jb2xvcjogIzQyODVmNDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogdGFibGU7XFxuICBib3JkZXItY29sbGFwc2U6IHNlcGFyYXRlO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAzNHB4O1xcbiAgcGFkZGluZzogNnB4IDEycHg7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMS40Mjg1NztcXG4gIGNvbG9yOiAjNTU1O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcbiAgYm9yZGVyLXJhZGl1czogMHB4O1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4wNzUpO1xcbiAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIGVhc2UtaW4tb3V0IDAuMTVzLGJveC1zaGFkb3cgZWFzZS1pbi1vdXQgMC4xNXM7XFxuICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sOmZvY3VzIHtcXG4gIGJvcmRlci1jb2xvcjogIzQyODVmNDtcXG4gIG91dGxpbmU6IDA7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDFweCAxcHggcmdiYSgwLCAwLCAwLCAwLjA3NSksIDAgMCA4cHggcmdiYSg2NiwgMTMzLCAyNDQsIDAuNik7XFxufVxcblxcbi5pbnB1dC1ncm91cC1idG4ge1xcbiAgd2lkdGg6IDElO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAtYnRuIC5idG4ge1xcbiAgYm9yZGVyLXJhZGl1czogMDtcXG59XFxuXFxuLyogIFBvc3RcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi5wb3N0IC50aXRsZSB7XFxuICBtYXJnaW46IDAgMCAwLjYyNXJlbTtcXG4gIGZvbnQtc2l6ZTogMS43NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI7XFxuICBwYWRkaW5nOiAwO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4ucG9zdC1pbWFnZSB7XFxuICBtYXJnaW4tYm90dG9tOiAxLjQ1cmVtO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLnBvc3QtY29udGVudCB7XFxuICBjb2xvcjogcmdiYSgzNSwgMzcsIDQwLCAwLjgpO1xcbn1cXG5cXG4ucG9zdC1jb250ZW50IGgyIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWJlYmViO1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIG1hcmdpbjogMi41MHJlbSAwIDEuMjVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogM3B4O1xcbn1cXG5cXG4ucG9zdC1jb250ZW50IGgzLFxcbi5wb3N0LWNvbnRlbnQgaDQge1xcbiAgbWFyZ2luOiAzMnB4IDAgMTZweDtcXG59XFxuXFxuLnBvc3QgLnRhZ3Mge1xcbiAgbWFyZ2luOiAxLjI1cmVtIDA7XFxufVxcblxcbi5wb3N0IC50YWdzIC50YWcge1xcbiAgbWFyZ2luOiAwIDEwcHggMTBweCAwO1xcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxufVxcblxcbi5wb3N0IC5jb21tZW50cyB7XFxuICBtYXJnaW46IDAgMCAxLjVyZW07XFxufVxcblxcbi8qIE1ldGEgKGF1dG9yIC1kYXRlIC0gMSB0YWcgLSBjb21tZW50cyBjb3VudClcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi5tZXRhIHtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICBsaW5lLWhlaWdodDogMTtcXG59XFxuXFxuLm1ldGEtYXV0aG9yLWRhdGUge1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIGNvbG9yOiAjOTk5O1xcbiAgbWFyZ2luOiAxMHB4IDAgNXB4O1xcbn1cXG5cXG4ubWV0YS1hdXRob3ItZGF0ZSBhIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG4ubWV0YS1hdXRob3ItZGF0ZSAuYXV0aG9yLW5hbWUgYSxcXG4ubWV0YS1hdXRob3ItZGF0ZSAudGFnIGEge1xcbiAgY29sb3I6ICMzMzM7XFxufVxcblxcbi5tZXRhLWF1dGhvci1kYXRlIC5hdXRob3ItbmFtZSBhOmhvdmVyIHtcXG4gIGNvbG9yOiAjNzc3O1xcbn1cXG5cXG4ubWV0YS1hdXRob3ItZGF0ZSAucG9pbnQge1xcbiAgbWFyZ2luOiAwIDJweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLyogU29jaWFsIFNoYXJlXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4uc29jaWFsLXNoYXJlIHtcXG4gIHBhZGRpbmc6IDVweCAwO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG59XFxuXFxuLnNvY2lhbC1zaGFyZSAuc2hhcmUtY291bnQge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgY29sb3I6ICMwMDA7XFxuICBtYXJnaW4tcmlnaHQ6IDVweDtcXG59XFxuXFxuLnNvY2lhbC1zaGFyZSAuc2hhcmUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIGZvbnQtc2l6ZTogMS4xMjVyZW07XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5zb2NpYWwtc2hhcmUgLnNoYXJlOmhvdmVyIHtcXG4gIG9wYWNpdHk6IC43O1xcbn1cXG5cXG4uc29jaWFsLXNoYXJlIC5idG4ge1xcbiAgbWFyZ2luLXJpZ2h0OiAzcHg7XFxuICBwYWRkaW5nOiA4cHggMTBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDA7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLyogYm90dG9tIHNoYXJlIGFuZCBib3R0b20gc3Vic2NyaWJlXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4uc2hhcmUtc3Vic2NyaWJlIHAge1xcbiAgY29sb3I6ICM3ZDdkN2Q7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbn1cXG5cXG4uc2hhcmUtc3Vic2NyaWJlIC5zb2NpYWwtc2hhcmUge1xcbiAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLnNoYXJlLXN1YnNjcmliZSA+IGRpdiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG59XFxuXFxuLnNoYXJlLXN1YnNjcmliZSA+IGRpdjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIiBcXFwiO1xcbiAgYm9yZGVyLXRvcDogc29saWQgMXB4ICMwMDA7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAxNXB4O1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDFweDtcXG59XFxuXFxuLnNoYXJlLXN1YnNjcmliZSA+IGRpdiBoNSB7XFxuICBjb2xvcjogIzY2NjtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBtYXJnaW46IDFyZW0gMDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG59XFxuXFxuLnNoYXJlLXN1YnNjcmliZSAubmV3c2xldHRlci1mb3JtIHtcXG4gIG1heC13aWR0aDogMzAwcHg7XFxufVxcblxcbi8qIE1lZGlhIFF1ZXJ5IChtZWRpdW0pXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2NnB4KSB7XFxuICAucG9zdCAudGl0bGUge1xcbiAgICBmb250LXNpemU6IDIuMjVyZW07XFxuICAgIG1hcmdpbjogMCAwIDFyZW07XFxuICB9XFxuXFxuICAucG9zdCAubWV0YS1hdXRob3ItZGF0ZSB7XFxuICAgIGZsb2F0OiBsZWZ0O1xcbiAgICBtYXJnaW4tdG9wOiAxMnB4O1xcbiAgfVxcblxcbiAgLnBvc3QgLnNvY2lhbC1zaGFyZSB7XFxuICAgIGZsb2F0OiByaWdodDtcXG4gIH1cXG5cXG4gIC5wb3N0LWNvbnRlbnQge1xcbiAgICBmb250LXNpemU6IDEuMnJlbTtcXG4gIH1cXG5cXG4gIC5wb3N0LWNvbnRlbnQgcCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbTtcXG4gICAgbGluZS1oZWlnaHQ6IDM1cHg7XFxuICB9XFxufVxcblxcbi8qIE1lZGlhIFF1ZXJ5IChsYXJnZSlcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5wb3N0IC5tZXRhLWF1dGhvci1kYXRlIHtcXG4gICAgZmxvYXQ6IGxlZnQ7XFxuICAgIG1hcmdpbi10b3A6IDEycHg7XFxuICB9XFxuXFxuICAucG9zdCAubWV0YS1zaGFyZSB7XFxuICAgIGZsb2F0OiByaWdodDtcXG4gIH1cXG59XFxuXFxuLmFuaW1hdGVkIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAxcztcXG4gIC1tb3otYW5pbWF0aW9uLWR1cmF0aW9uOiAxcztcXG4gIC1tcy1hbmltYXRpb24tZHVyYXRpb246IDFzO1xcbiAgLW8tYW5pbWF0aW9uLWR1cmF0aW9uOiAxcztcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcXG4gIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XFxufVxcblxcbi5hbmltYXRlZC5pbmZpbml0ZSB7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xcbiAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XFxufVxcblxcbi5ib3VuY2VJbiB7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBib3VuY2VJbjtcXG4gIGFuaW1hdGlvbi1uYW1lOiBib3VuY2VJbjtcXG59XFxuXFxuLmJvdW5jZUluRG93biB7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBib3VuY2VJbkRvd247XFxuICBhbmltYXRpb24tbmFtZTogYm91bmNlSW5Eb3duO1xcbn1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlSW4ge1xcbiAgMCUsIDIwJSwgNDAlLCA2MCUsIDgwJSwgMTAwJSB7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XFxuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xcbiAgfVxcblxcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjMsIDAuMywgMC4zKTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuMywgMC4zLCAwLjMpO1xcbiAgfVxcblxcbiAgMjAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMS4xLCAxLjEsIDEuMSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLjEsIDEuMSwgMS4xKTtcXG4gIH1cXG5cXG4gIDQwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuOSwgMC45LCAwLjkpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC45LCAwLjksIDAuOSk7XFxuICB9XFxuXFxuICA2MCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLjAzLCAxLjAzLCAxLjAzKTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEuMDMsIDEuMDMsIDEuMDMpO1xcbiAgfVxcblxcbiAgODAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC45NywgMC45NywgMC45Nyk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjk3LCAwLjk3LCAwLjk3KTtcXG4gIH1cXG5cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xcbiAgfVxcbn1cXG5cXG5Aa2V5ZnJhbWVzIGJvdW5jZUluIHtcXG4gIDAlLCAyMCUsIDQwJSwgNjAlLCA4MCUsIDEwMCUge1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcXG4gIH1cXG5cXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMC4zLCAwLjMsIDAuMyk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUzZCgwLjMsIDAuMywgMC4zKTtcXG4gIH1cXG5cXG4gIDIwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEuMSwgMS4xLCAxLjEpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMS4xLCAxLjEsIDEuMSk7XFxuICB9XFxuXFxuICA0MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgwLjksIDAuOSwgMC45KTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZTNkKDAuOSwgMC45LCAwLjkpO1xcbiAgfVxcblxcbiAgNjAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMS4wMywgMS4wMywgMS4wMyk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLjAzLCAxLjAzLCAxLjAzKTtcXG4gIH1cXG5cXG4gIDgwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAuOTcsIDAuOTcsIDAuOTcpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMC45NywgMC45NywgMC45Nyk7XFxuICB9XFxuXFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcXG4gIH1cXG59XFxuXFxuQC13ZWJraXQta2V5ZnJhbWVzIGJvdW5jZUluRG93biB7XFxuICAwJSwgNjAlLCA3NSUsIDkwJSwgMTAwJSB7XFxuICAgIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSk7XFxuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xcbiAgfVxcblxcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwMDBweCwgMCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTMwMDBweCwgMCk7XFxuICB9XFxuXFxuICA2MCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMjVweCwgMCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMjVweCwgMCk7XFxuICB9XFxuXFxuICA3NSUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTEwcHgsIDApO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTtcXG4gIH1cXG5cXG4gIDkwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCA1cHgsIDApO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDVweCwgMCk7XFxuICB9XFxuXFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7XFxuICAgIHRyYW5zZm9ybTogbm9uZTtcXG4gIH1cXG59XFxuXFxuQGtleWZyYW1lcyBib3VuY2VJbkRvd24ge1xcbiAgMCUsIDYwJSwgNzUlLCA5MCUsIDEwMCUge1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjIxNSwgMC42MSwgMC4zNTUsIDEpO1xcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEsIDAuMzU1LCAxKTtcXG4gIH1cXG5cXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMDAwcHgsIDApO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0zMDAwcHgsIDApO1xcbiAgfVxcblxcbiAgNjAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDI1cHgsIDApO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDI1cHgsIDApO1xcbiAgfVxcblxcbiAgNzUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0xMHB4LCAwKTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtMTBweCwgMCk7XFxuICB9XFxuXFxuICA5MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgNXB4LCAwKTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCA1cHgsIDApO1xcbiAgfVxcblxcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBub25lO1xcbiAgICB0cmFuc2Zvcm06IG5vbmU7XFxuICB9XFxufVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBwdWxzZSB7XFxuICBmcm9tIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcXG4gIH1cXG5cXG4gIDUwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEuMDUsIDEuMDUsIDEuMDUpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMS4wNSwgMS4wNSwgMS4wNSk7XFxuICB9XFxuXFxuICB0byB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgcHVsc2Uge1xcbiAgZnJvbSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XFxuICB9XFxuXFxuICA1MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLjA1LCAxLjA1LCAxLjA1KTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEuMDUsIDEuMDUsIDEuMDUpO1xcbiAgfVxcblxcbiAgdG8ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZTNkKDEsIDEsIDEpO1xcbiAgfVxcbn1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgc2Nyb2xsIHtcXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gIH1cXG5cXG4gIDEwJSB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDBweCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xcbiAgfVxcblxcbiAgMTAwJSB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwcHgpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTBweCk7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgc2Nyb2xsIHtcXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gIH1cXG5cXG4gIDEwJSB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDBweCk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xcbiAgfVxcblxcbiAgMTAwJSB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwcHgpO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTBweCk7XFxuICB9XFxufVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9+L3Jlc29sdmUtdXJsLWxvYWRlciEuL34vYXV0b3ByZWZpeGVyLWxvYWRlcj9icm93c2Vycz1sYXN0IDMgdmVyc2lvbnMhLi9+L3Nhc3MtbG9hZGVyP291dHB1dFN0eWxlPWV4cGFuZGVkIS4vc3JjL3Nhc3MvbWFpbi5zY3NzXG4gKiogbW9kdWxlIGlkID0gNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4gKiogbW9kdWxlIGlkID0gN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBub3JtYWxpemUuY3NzIHY0LjEuMSB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cXG5cXG4vKipcXG4gKiAxLiBDaGFuZ2UgdGhlIGRlZmF1bHQgZm9udCBmYW1pbHkgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXFxuICogMi4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpbiBJRSBhbmQgaU9TLlxcbiAqL1xcblxcbmh0bWwge1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi9cXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXFxuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXFxuICovXFxuXFxuYm9keSB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIEVkZ2UsIElFLCBhbmQgRmlyZWZveC5cXG4gKiAyLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cXG4gKi9cXG5cXG5hcnRpY2xlLFxcbmFzaWRlLFxcbmRldGFpbHMsIC8qIDEgKi9cXG5maWdjYXB0aW9uLFxcbmZpZ3VyZSxcXG5mb290ZXIsXFxuaGVhZGVyLFxcbm1haW4sIC8qIDIgKi9cXG5tZW51LFxcbm5hdixcXG5zZWN0aW9uLFxcbnN1bW1hcnkgeyAvKiAxICovXFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXFxuICovXFxuXFxuYXVkaW8sXFxuY2FudmFzLFxcbnByb2dyZXNzLFxcbnZpZGVvIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gaU9TIDQtNy5cXG4gKi9cXG5cXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGhlaWdodDogMDtcXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cXG4gKi9cXG5cXG5wcm9ncmVzcyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbi8qKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLS5cXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cXG4gKi9cXG5cXG50ZW1wbGF0ZSwgLyogMSAqL1xcbltoaWRkZW5dIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi8qIExpbmtzXFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiAxLiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXFxuICogMi4gUmVtb3ZlIGdhcHMgaW4gbGlua3MgdW5kZXJsaW5lIGluIGlPUyA4KyBhbmQgU2FmYXJpIDgrLlxcbiAqL1xcblxcbmEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IC8qIDEgKi9cXG4gIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLXNraXA6IG9iamVjdHM7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBvdXRsaW5lIG9uIGZvY3VzZWQgbGlua3Mgd2hlbiB0aGV5IGFyZSBhbHNvIGFjdGl2ZSBvciBob3ZlcmVkXFxuICogaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXFxuICovXFxuXFxuYTphY3RpdmUsXFxuYTpob3ZlciB7XFxuICBvdXRsaW5lLXdpZHRoOiAwO1xcbn1cXG5cXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIEZpcmVmb3ggMzktLlxcbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYWJiclt0aXRsZV0ge1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTsgLyogMSAqL1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IC8qIDIgKi9cXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBQcmV2ZW50IHRoZSBkdXBsaWNhdGUgYXBwbGljYXRpb24gb2YgYGJvbGRlcmAgYnkgdGhlIG5leHQgcnVsZSBpbiBTYWZhcmkgNi5cXG4gKi9cXG5cXG5iLFxcbnN0cm9uZyB7XFxuICBmb250LXdlaWdodDogaW5oZXJpdDtcXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cXG4gKi9cXG5cXG5iLFxcbnN0cm9uZyB7XFxuICBmb250LXdlaWdodDogYm9sZGVyO1xcbn1cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzdHlsZSBpbiBBbmRyb2lkIDQuMy0uXFxuICovXFxuXFxuZGZuIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59XFxuXFxuLyoqXFxuICogQ29ycmVjdCB0aGUgZm9udCBzaXplIGFuZCBtYXJnaW4gb24gYGgxYCBlbGVtZW50cyB3aXRoaW4gYHNlY3Rpb25gIGFuZFxcbiAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXFxuICovXFxuXFxuaDEge1xcbiAgZm9udC1zaXplOiAyZW07XFxuICBtYXJnaW46IDAuNjdlbSAwO1xcbn1cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgYmFja2dyb3VuZCBhbmQgY29sb3IgaW4gSUUgOS0uXFxuICovXFxuXFxubWFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwO1xcbiAgY29sb3I6ICMwMDA7XFxufVxcblxcbi8qKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbnNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogODAlO1xcbn1cXG5cXG4vKipcXG4gKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBlbGVtZW50cyBmcm9tIGFmZmVjdGluZyB0aGUgbGluZSBoZWlnaHQgaW5cXG4gKiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxuc3ViLFxcbnN1cCB7XFxuICBmb250LXNpemU6IDc1JTtcXG4gIGxpbmUtaGVpZ2h0OiAwO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbn1cXG5cXG5zdWIge1xcbiAgYm90dG9tOiAtMC4yNWVtO1xcbn1cXG5cXG5zdXAge1xcbiAgdG9wOiAtMC41ZW07XFxufVxcblxcbi8qIEVtYmVkZGVkIGNvbnRlbnRcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgYm9yZGVyIG9uIGltYWdlcyBpbnNpZGUgbGlua3MgaW4gSUUgMTAtLlxcbiAqL1xcblxcbmltZyB7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7XFxufVxcblxcbi8qKlxcbiAqIEhpZGUgdGhlIG92ZXJmbG93IGluIElFLlxcbiAqL1xcblxcbnN2Zzpub3QoOnJvb3QpIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi8qIEdyb3VwaW5nIGNvbnRlbnRcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXFxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbmNvZGUsXFxua2JkLFxcbnByZSxcXG5zYW1wIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IG1hcmdpbiBpbiBJRSA4LlxcbiAqL1xcblxcbmZpZ3VyZSB7XFxuICBtYXJnaW46IDFlbSA0MHB4O1xcbn1cXG5cXG4vKipcXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxcbiAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxcbiAqL1xcblxcbmhyIHtcXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAxICovXFxuICBoZWlnaHQ6IDA7IC8qIDEgKi9cXG4gIG92ZXJmbG93OiB2aXNpYmxlOyAvKiAyICovXFxufVxcblxcbi8qIEZvcm1zXFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiAxLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cXG4gKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYnV0dG9uLFxcbmlucHV0LFxcbnNlbGVjdCxcXG50ZXh0YXJlYSB7XFxuICBmb250OiBpbmhlcml0OyAvKiAxICovXFxuICBtYXJnaW46IDA7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogUmVzdG9yZSB0aGUgZm9udCB3ZWlnaHQgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXFxuICovXFxuXFxub3B0Z3JvdXAge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi8qKlxcbiAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxcbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXFxuICovXFxuXFxuYnV0dG9uLFxcbmlucHV0IHsgLyogMSAqL1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxcbiAqIDEuIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRmlyZWZveC5cXG4gKi9cXG5cXG5idXR0b24sXFxuc2VsZWN0IHsgLyogMSAqL1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxufVxcblxcbi8qKlxcbiAqIDEuIFByZXZlbnQgYSBXZWJLaXQgYnVnIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYCBhbmQgYHZpZGVvYFxcbiAqICAgIGNvbnRyb2xzIGluIEFuZHJvaWQgNC5cXG4gKiAyLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmJ1dHRvbixcXG5odG1sIFt0eXBlPVxcXCJidXR0b25cXFwiXSwgLyogMSAqL1xcblt0eXBlPVxcXCJyZXNldFxcXCJdLFxcblt0eXBlPVxcXCJzdWJtaXRcXFwiXSB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxcbiAqL1xcblxcbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInJlc2V0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdOjotbW96LWZvY3VzLWlubmVyIHtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi8qKlxcbiAqIFJlc3RvcmUgdGhlIGZvY3VzIHN0eWxlcyB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cXG4gKi9cXG5cXG5idXR0b246LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcImJ1dHRvblxcXCJdOi1tb3otZm9jdXNyaW5nLFxcblt0eXBlPVxcXCJyZXNldFxcXCJdOi1tb3otZm9jdXNyaW5nLFxcblt0eXBlPVxcXCJzdWJtaXRcXFwiXTotbW96LWZvY3VzcmluZyB7XFxuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XFxufVxcblxcbi8qKlxcbiAqIENoYW5nZSB0aGUgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxcbiAqL1xcblxcbmZpZWxkc2V0IHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjMGMwYzA7XFxuICBtYXJnaW46IDAgMnB4O1xcbiAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtO1xcbn1cXG5cXG4vKipcXG4gKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxcbiAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XFxuICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxubGVnZW5kIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi9cXG4gIGNvbG9yOiBpbmhlcml0OyAvKiAyICovXFxuICBkaXNwbGF5OiB0YWJsZTsgLyogMSAqL1xcbiAgbWF4LXdpZHRoOiAxMDAlOyAvKiAxICovXFxuICBwYWRkaW5nOiAwOyAvKiAzICovXFxuICB3aGl0ZS1zcGFjZTogbm9ybWFsOyAvKiAxICovXFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUuXFxuICovXFxuXFxudGV4dGFyZWEge1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxufVxcblxcbi8qKlxcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIElFIDEwLS5cXG4gKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAtLlxcbiAqL1xcblxcblt0eXBlPVxcXCJjaGVja2JveFxcXCJdLFxcblt0eXBlPVxcXCJyYWRpb1xcXCJdIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi9cXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxcbiAqL1xcblxcblt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcXG5bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4vKipcXG4gKiAxLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cXG4gKiAyLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cXG4gKi9cXG5cXG5bdHlwZT1cXFwic2VhcmNoXFxcIl0ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4OyAvKiAyICovXFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWC5cXG4gKi9cXG5cXG5bdHlwZT1cXFwic2VhcmNoXFxcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuXFxuLyoqXFxuICogQ29ycmVjdCB0aGUgdGV4dCBzdHlsZSBvZiBwbGFjZWhvbGRlcnMgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIG9wYWNpdHk6IDAuNTQ7XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXFxuICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxcbiAqL1xcblxcbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDEgKi9cXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL34vbm9ybWFsaXplLmNzcy9ub3JtYWxpemUuY3NzXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6YXBwbGljYXRpb24veC1mb250LXR0ZjtiYXNlNjQsQUFFQUFBQUxBSUFBQXdBd1QxTXZNZzhTRDBRQUFBQzhBQUFBWUdOdFlYQWZ6aGVkQUFBQkhBQUFBUHhuWVhOd0FBQUFFQUFBQWhnQUFBQUlaMng1WnNUVmxVa0FBQUlnQUFBUjlHaGxZV1FKNTJVRkFBQVVGQUFBQURab2FHVmhCOElEM2dBQUZFd0FBQUFrYUcxMGVHR09CZnNBQUJSd0FBQUFkR3h2WTJFcERpNEdBQUFVNUFBQUFEeHRZWGh3QUNZQXRRQUFGU0FBQUFBZ2JtRnRaVTcvdjdFQUFCVkFBQUFCaG5CdmMzUUFBd0FBQUFBV3lBQUFBQ0FBQXdPWkFaQUFCUUFBQXBrQ3pBQUFBSThDbVFMTUFBQUI2d0F6QVFrQUFBQUFBQUFBQUFBQUFBQUFBQUFCRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJBQUFEeWdRUEEvOEFBUUFQQUFFQUFBQUFCQUFBQUFBQUFBQUFBQUFBZ0FBQUFBQUFEQUFBQUF3QUFBQndBQVFBREFBQUFIQUFEQUFFQUFBQWNBQVFBNEFBQUFEUUFJQUFFQUJRQUFRQWc0TXZnNWVGWDVjVGx5T1hONWRMb0RlaHY2SDNvdHVtQzhFSHdtL0RoOFdyeGJ2Rjk4YUR5TWZKbDhvSC8vZi8vQUFBQUFBQWc0TXZnNWVGWDVjVGx5T1hONWRMb0RlaHY2SDNvdHVtQzhFSHdtZkRoOFdyeGJmRjk4YUR5TWZKbDhvSC8vZi8vQUFILzR4ODVIeUFlcnhwREdrQWFQQm80Ri80WG5SZVFGMWdXalEvUEQzZ1BNdzZyRHFrT213NTVEZWtOdGcyYkFBTUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFCLy84QUR3QUJBQUFBQUFBQUFBQUFBZ0FBTnprQkFBQUFBQUVBQUFBQUFBQUFBQUFDQUFBM09RRUFBQUFBQVFBQUFBQUFBQUFBQUFJQUFEYzVBUUFBQUFBQ0FGWUFBUU9xQTFVQUJBQVNBQUFCRVNFUk53RXlGaFVSRkFZaklRY1JORFl6QTFiOVZGWUNWaUl5TVNQOXFxb3hJd0VCQWdEOXFsWUNWRElpL2dBak02b0RBQ0l5QUFBREFLb0FWUU5DQXUwQUN3QVhBQ01BQUJNeUhnSVZJelF1QWlNUk1oNENGU00wTGdJakVUUTJNeklXRlJRR0l5SW1xbGlhYzBONk1GSnVQb255dEdsNFZwUEdjVGNuSnpVMUp5YzNBZjFEYzV0WFBtNVNNQUZxYWJUeWlYREdsRmIrUGljMU5TY25OemNBQUFBREFGWUExUU9xQW9FQUZRQVpBQzhBQUFFeUhnSVZGQTRDS3dFMU16STJOVFFtS3dFMUF6VWhGU1VVRmpzQkZTTWlMZ0kxTkQ0Q093RVZJeUlHQXRZc1Rqa2hJVGxPTEt5c05rNU9OcXpVQVZUOS9FNDJyS3dzVGpraElUbE9MS3lzTms0Q2dTSTZUaXd0VGpvaFVrNDJOazVTL3dCVVZDbzJUbEloT2s0dExFNDZJbEpPQUFBQUFRQ3FBRlVEVmdNQkFBZ0FBQUVWSVJjSENRRVhCd05XL2ZqdVBQNnFBVlk4N2dIVlZQQThBVllCVmp6d0FBQUFBUUNxQUZVRFZnTUJBQWdBQUFrQ0p6Y2hOU0VuQWdBQlZ2NnFQTzc5K0FJSTdnTUIvcXIrcWp6d1ZQQUFBQUFBQVFEV0FJRURLZ0xWQUFzQUFBRUhGd2NuQnljM0p6Y1hOd01xN3U0ODd1NDg3dTQ4N3U0Q21lN3VQTzd1UE83dVBPN3VBQU1BZ0FDckE0QUNxd0FEQUFjQUN3QUFFeUVWSVJVMUlSVUZOU0VWZ0FNQS9RQURBUDBBQXdBQ3ExYlVWRlRXVmxZQUFBQUJBSUFBQXdPQUExVUFNd0FBSlRJV0ZSUUdJeUltTlR3Qk55VU9BU01pSmpVME5qTXlGaGNsTGdFMU5EWXpNaFlWRkFZaklpWW5CUjRCRlJRR0J3VStBUU1BTTBsSk16TkpBdjdTRWl3YU5FeExOUmt0RWdFc0FRTkxOVFJNU3pVWkxSTCsxQUVEQWdJQk1CQXMvVWt6TTB0TE13Y1BCckFSRVVzMU5Fd1NFSzRIRHdnMFRFdzBOVXNURWJBSUR3Y0lEd2V3RHhFQUFBSUFWZ0NyQTZvQ3F3QUZBQXNBQUNVM0p6Y0pBU1VIQ1FFWEJ3SnV4c1k4QVFEL0FQN29QUDhBQVFBOHh1ZkV4RHovQVA4QVBEd0JBQUVBUE1RQUFBQUJBRllBSFFPcUF5c0FHd0FBSlNjdUF6VTBQZ0l6TWhZWFBnRXpNaDRDRlJRT0FnY0NBRDVTaDE4MEpEOVZNamRtSXlKbU9ERldQeVEwWDRaVEhUaExmM1J4UFRGV1B5UXlLQ2d5SkQ5V01UMXhkbjlMQUFBQUFnQ0FBRUVEYWdNckFBc0FKd0FBQVRJMk5UUW1JeUlHRlJRV0lSY0hKelVuRGdFaklpNENOVFErQWpNeUhnSVZGQVlIRndHV1QzRndVRTl4Y0FGUTFFRFVEQ1JkTXpwbFN5d3NTMlU2T21STEt5SWdEQUZWY0ZCUGNYRlBVSERVUU5RaURDQWlLMHBsT2psbVN5d3NTMlk1TTEwa0RBQUFBZ0FBLzhBRUFBUEFBQmtBTXdBQUFTSU9BZ2MrQXpNeUhnSVZGQll6TWpZMU5DNENBekkrQWpjT0F5TWlMZ0kxTkNZaklnWVZGQjRDQWdCcHVJcFNBd0pEY1pWVlZwaHhRVGdvS0RoUWk3dHFhYmlLVWdNQ1EzR1ZWVmFZY1VFNEtDZzRVSXU3QThCT2lMWm9XNTkyUkVaNm8xMG9PRGdvYXJ1TFVQd0FUb2kyYUZ1ZmRrUkdlcU5kS0RnNEtHcTdpMUFBQUFJQUFBQUFBa2tEYmdBUUFDY0FBQUUwSnlZaklnY0dGUlFYRmpNeU56WTFNeFFIQXdZSEJpTWlKeVluQXlZMU5EYzJNeklYRmhVQnR5c3JQRDByS3lzclBUd3JLNUlUMEFrU0VoUVZFaElKMEJOV1ZYcDVWVllDU1Qwcktpb3JQVHdyS3lzclBENG8va1lUQ3dzTEN4TUJ1aWcrZVZaV1ZsWjVBQUFCQUJrQVNRT2VBeVVBT3dBQUFRWUhGaFVVQndZSEJnY0dCd1lqSWljV016STNKaWNtSnhZek1qY21KeVk5QVJZWEppY21OVFEzRmhjV0Z5WTFORGMyTXpJWE5qY0dCelkzQTU0bk5nRVdGaXdzUFQ1V1ZtS2JnUlFaZ0dVOE1DOFNFeEFaR0VBcUtpY3NKaFlXR1VWalkzSUZOalpOVURZL054WThOalVDempnb0NCQktTa3BFUkRRMUh4OVRBazhCSXlRNEF3WU5NekpEQWhVQ0dTa29NRElyVlRNMEJSVVZUVFkyT3d3aFFpUUdGd0FCQURZQUFBSWtBN2NBRndBQUFSVWpJZ2NHSFFFekJ5TVJJeEVqTlRNMU5EYzJNeklYQWlSYU1SRVJweGFScjVLU096eGpWQzREc0pjVUZTbHNxZjVPQWJLcGZHczZPd2NBQUFBQUNBQUFBQllEYmdOdUFIY0Fmd0NIQUk4QWx3Q2dBS2tBc2dBQUFUSVhGaGNXRlJRSEJnY0dKeVkxTkRjME5UUW5OamMyTnpZM05qYzJOVFFuTmljbUJ3WVBBU1lqSWdjbUp5WW5KZ2NHRndZVkZCY1dGeFlYRmhjV0Z3WUhCZ2NHSXlJbkppY21KeVl2QVNJSEJoY1dGeFlmQVJZWEZoOEJGaGNXRnhZek1qOEJGQlVVRlJRSEJpY21KeVkxTkRjMk56WXpBVFluSmdjR0Z4WVhOaWNtQndZWEZoYzJKeVlIQmhjV0Z6WW5KZ2NHRnhZWE5pY21Cd1lYRmpjWE5BY2lGUlEzTWpVM0pnY0dGeFkzTmljQnQzZGxaVHM3VkZTRUVBY0lBUjRoR2hvY0d4TVNEQXd0RlJvUUhoNFhGVFk0T1RVSkR3OGhJQkFhRlMwTUN4TVNIQnNhR2lFV0Jnd09EaElURXhJT0NoRVJEQXNNQlFRQ0FRUURCQVFOREF3R0JnY1NFaFFWRXhNTkRRY0lENFZUVkRzN1pXUjQvdThDQmdVQ0FnWUZGQVFGQmdNRUJRWVVCUVVFQmdVRkJod0ZCd2NGQlFnSEpRRUpDQU1DQ2dnREpBb0pDZ2toQVFrS0FnRUpDUUVEYmpzN1pXVjNrSEp6TEFNSEJ3b0NLaW9qTnhvRUJnY1FEeGNXSmlVeFJERTBRUVVMREEwT0R3OEdDUWtORFFWQk5ERkVNU1VsRnhjUEVBY0dCQlFuQlFNRERBd1lFZ3dMQWdJREFnUUVCQVFEQXdZUUVBME5GZzBOQkFRQ0FoWWNIUU1LQndjRExITnlrSGRsWlRzNy9Za0VBd0lEQkFNRER3TUdCUU1EQmdZV0JBY0lCQU1JQnhVRkJnY0ZCUVlIQ1FZREFnWUdBZ1FIQXdnQ0JnY0JCZ1lHQVFJSEJnSUNCZ0FEQUFBQUd3TnVBMklBQkFBVkFEa0FBQk1SSXhFek54WUhCaXNCSWljbU5UUTNOak15RnhZQkVTTVJOQ2NtSXlJSEJnY0dGUkVqTmpVMEx3RXpGU00yTnpZM05qYzJNeklYRmhYSHZMd01BUjBlTUFFdkhCMGRIaTh3SEIwQ203d1hHREVrR0JnTUI3d0NBUUc4QVF3TURCUVVIaDBrWWpzOEFsTDl5UUkzcnlvY0hCd2NLaW9jR3hzYy9qWCt1d0V2UENJaUV4UWRFUjcreE9TT2poc2NVeE1ORGhBUUNRbEJRWDBBQWdBQUFFa0VBQU1sQUJFQVFRQUFBVFFuSlNZSEJoVVJGQmNXTXpJM0pUWTFJUlFIRkFjR0J3WUhCZ2NHSVNBbkppY21KeVluSmpVbU5UUTNORGMyTnpZM05qYzJJU0FYRmhjV0Z4WVhGaFVXQXRzUi90d1NFeE1UQ1FnTUNBRWtFUUVsQVFRRkNBa2ZIaWwrL3YvKy8zNHBIeDRKQ0FVRUFRRUVCUWdKSHg0cGZnRUJBUUYrS1I4ZUNRZ0ZCQUVCdHhVS3R3c0tDeFgra2hZS0JRYTNDaFUzSHg4dkx5VXFIQjBGRGc0RkhSd3FKUzh2SHg4M054OGVNQzhsS2h3ZEJBOFBCQjBjS2lVdk1CNGZBQUFBQUFVQUFBQUFBMjREYmdBUEFDQUFNUUNTQUxJQUFBRTBKeVlqSWdjR0ZSUVhGak15TnpZM0ZBY0dJeUluSmpVME56WXpNaGNXRlRjVUJ3WWpJaWNtTlRRM05qTXlGeFlWSlNJaklpTWlCd1lIQmdjR0J3WUhCZ2NHQndZVkJoY1VGUlFWQmhjVUZ4WVhGaGNXRnhZWEZoY1dGeFl6RmpjeU16SXpGamN5TnpZM05qYzJOelkzTmpjMk56WTFORFUwTlRRMU5EVTBKeVluSmljbUp5WW5KaWNtSnlZaklpTWlJd0VVQndZSEJnY0dJeUluSmljbUp5WTFORGMyTnpZM05qTXlGeFlYRmhjV0Fra3JLenc5S3lvcUt6MDhLeXRQUWtGZVhrSkJRVUplWGtGQ1BoQVBGaFlQRHc4UEZoWVBFUDdoQkNnb0ZCVWlJeGdZRVIwVkZnc0hCQVFDQVFFQkFRRUJBZ1FFQndzV0ZSMFJHQmdqSWhVVUtDZ0VCQ2duRlJRakl4Z1lFUndXRmdzR0JRUUJBZ0lCQkFVR0N4WVdIQkVZR0NNakZCVW5LQVFCdHdNR1FVRjNNb09ETW5kQlFRWURBd1pCUVhjeWc0TXlkMEZCQmdNQnR6d3JLeXNyUEQwcktpb3JQVjVDUVVGQ1hsNUJRa0pCWHVvV0R3OFBEeFlXRHhBUUR4WitBZ0VFQlFZTEZoWWNFUmdZSXlNVUZTY29CQVFvS0JRVklpTVlHQkVkRlJZTEJ3UUVBZ0VCQVFFQkFRSUVCQWNMRmhVZEVSZ1lJeUlWRkNnb0JBUW9KeFVVSXlNWUdCRWNGaFlMQmdVRUFRTCttSU15ZDBGQkJnTURCa0ZCZHpLRGd6SjNRVUVHQXdNR1FVRjNNZ0FBQUFNQUFBQUFBMjREYmdBVEFDUUFOUUFBQVRJWEZoVVJGQWNHSXlFaUp5WTFFVFEzTmpNVE5DY21JeUlIQmhVVUZ4WXpNamMyTlNFMEp5WWpJZ2NHRlJRWEZqTXlOelkxQXNsRU1ERXhNRVQ5M0VReE1EQXhST29rSXpJekl5TWpJek15SXlRQlFpTWtNaklrSXlNa01qSWtJd051TVRCRS9keEVNVEF3TVVRQ0pFUXdNZjVKTWlRakl5UXlNaVFqSXlReU1pUWpJeVF5TWlRakl5UXlBQUFJQUFBQUFBTnVBMjRBRXdBckFEUUFQUUJCQUZBQWRBQ05BQUFsSmljckFRWUhCZ2NHQndZSEJnY25Gak15TndNbUp3WWpCaFVVRnhZWE5qYzJOelkzTmo4Qk5qYzJOeWNtSndZSEJnY3lOd1VtQnhZWE5qYzJOd0V3QnpZRkppTWlCeFlYTmpjMk56WTNOamNUSmljakJnY0dCd1lIQmdjR0J4WVhGaGNXRnpZM05qTXlGeFlYRmhjV0Z4WVhGaGNYRkFjR0J3WWpJaWNtSnlZMU5EYzJOell6TWhjV0Z4WVZBa2tZT0FFQkNSQVBLaXNrSkNjbUZBbHBoa3RIYWd3U3NzNEJHUmt1SFNvcUp5Y2tJeFVXQWdVRkFqMUVSMDgzTnhLdHJRR0hlSEl5R0Q4cUt3eitOQUVCQVZGcGppd3RTMEluSXlNVUZSRVJCSWNDVXdFRkJnWVRFeFVXSXlRb0R3c0JBZ01DRkJZV0ZCUVVFeEVSRHhBTURBa0lCa1k3TzJWbGQzaGtaVHM3T3p0bFpIaDNaV1U3TzE2Smt3UUdCaFlXR1JncEtTd0hWaDRCV3h3ak5RUUlSMEJCTWpJdExCc2JFeFFJQndFQkFRSjVlVjhsUmtWV0xyY2pFb21ESzBGQ1RRR29BUUZUWGd0aGVRNFVGQThRRVJFRy92V0VaZ2NIQ0JJU0VCRVZGQkFmR0FNSEJnTURBUUVCQVFFQ0FRSUNBZ0VDQVFWNFpHVTdPenM3WldSNGQyVmxPenM3TzJWbGR3QUFBQUVBQUFBQUExd0RiZ0EyQUFBQklSWVZGQWNHQndZaklpY21KeVluSmpVME56WTNOamMyTXpJWEJ5WWpJZ2NHQndZVkZCY1dGeFl6TWpjMk56WTNOamMyTnlNMUFiY0JuZ2MwTkdCaGZGcFJVVHM3SWlNaklqczdVVkZhcTN0M1IyaEtQajhsSkNRbFB6NUtNaWtxR3hzVUZBa0tBL2tCOWljaWZHSmhOemNqSWpzN1VWRmFXbEZST3pzaUkzTnpSQ1VsUUVCTFREOUFKU1VORGhVVUd4b1hHQldYQUFBQUFBRUFBQUFBQXRzRHR3QnlBQUFUTkRjMk56WTNOamMyTXpJWEZoY1dGUlFIQmdjR0J3WUhCaU1pSnlZbkJnY0dCd1lIQmdjR0J3WUhCZzhCSnlZMU5EYzJOelkzSmpVME56WXpNaGNXRlJRSEJoVVVGeFl6TWpjMk56WTNOamMyTnpZMU5DY21JeUlIQmhVVUZ4WVhGaGNXRlJRSEJpTWlKeVluSmljbUp5WTFBQlVXSmlVeE1qZzVPMXBPVFRFd0Nnc1lGeUlpTVRFN0p5WW1FUVVMQ2dNRENRZ0hCZ3dNRGc4VkNBVUlEQXdhR2dRVEhoNHRJeFFUR1JrYUdTVWZHeHNTRWc0T0NBY0VCRDgrWlhKTlRBY0hDQWtIQndrSURRRUpIUllYREF3SEJnSmlQVGMzS0NrZEhnOFBKaVpKU0Z3M05EVXdNU1VsRmhZVEVpQVdLaW9OREJ3Y0RRd1hHQlVWSEFNR1dSSTFRVUppWXhFbU95OHFLaGNYSkNaSFJ5UWtHQmNPRGhrWUhoNGhJaDRlRzJJNE4wcEtjaGtZRnc0TkRRd0ZFQm9hQWdrWEdCNGZIeDhlQUFBQUFnQUFBQUFEMXdOdUFCc0FOQUFBQVRJWEZoVVJGQWNHQndZSEJpTWlKeVluSmljbU5SRTBOell6SVFFeVB3RTJOVFFuSmlNaUR3RW5KaU1pQndZVkZCOEJGak1EZmlVYUdpY25RVUpiVzJSbFcxdENRU2NuR2hza0F5WCtiaHNVNXhVVUZCd2FGTG01RkJvY0ZCTVU2Qk1iQTI0YUdpWCsxMlZiVzBKQ0ppY25Ka0pDVzF0bEFTa2tHaHY5b0JQZEZCMGNGQk1Uc2JFVEV4UWNIUlRkRXdBQUFBQUVBQUQvOEFRQUE3Y0FRQUJRQUhVQWhnQUFBUlFIQmdjV0ZSUUhCZ2NHSXlJbkppY21OVFEzSmljbU5UUTNOak15RnpZM0V6WTNOaDhCTmpjMk16SVhGaFVVQndZaklpY21OU2NERmhjMk16SVhGaFVGRkJjV016STNOalUwSnlZaklnY0dCVFkxTkNjbUl5SUhCZ2NHSXlJbkppY21JeUlIQmhVVUZ4WVhGaGNXTXpJM05qYzJOeWN5TnpZMU5DY21JeUlIQmhVVUZ4WXpCQUFSRVJ3SFBUMXBhWHg3YVdrOVBRY2VFUkloSVRBd0kzeXFRZ0lIQndqU0N4UVZHQ1FaR1JrWkpDTVpHYjg3cTM0aE1EQWhJZnp2R1Jrakl4b1pHUm9qSXhrWkFjOEdCZ1lKQ0FZWUxpMHVMaTB1R0FZSUNRWUdCaGtyS3hzYkdSa2JHeXNyR1FJakdSa1pHU01qR2hrWkdpTUIweUViR3c0YkhGbExUQ3NzTEN0TVMxa2JHdzRjR3lFdklpRWtWd1lCS1FnRUJRSXVGUTBOR1JrakpCa1pHUmtqS3Y3ekJWY2pJU0l2Y1NRWkdSa1pKQ01aR1JrWjdnWUpDQWNGQlJnTUN3c01HQVVGQmdrSkJoa09EZ01DQWdNT0RobDFHUmtrSXhrWkdSa2pKQmtaQUFBQkFBQUFBUUFBZisxWGoxOFBQUFVBQ3dRQUFBQUFBTk5rRUVRQUFBQUEwMlFRUkFBQS84QUVBQVBBQUFBQUNBQUNBQUFBQUFBQUFBRUFBQVBBLzhBQUFBUUFBQUFBQUFRQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBZEJBQUFBQUFBQUFBQUFBQUFBZ0FBQUFRQUFGWUVBQUNxQkFBQVZnUUFBS29FQUFDcUJBQUExZ1FBQUlBRUFBQ0FCQUFBVmdRQUFGWUVBQUNBQkFBQUFBSkpBQUFEdHdBWkFsb0FOZ051QUFBRGJnQUFCQUFBQUFOdUFBQURiZ0FBQTI0QUFBTmNBQUFDMndBQUE5Y0FBQVFBQUFBQUFBQUFBQW9BRkFBZUFFSUFlQUM4QU5RQTdBRUdBU0FCYkFHTUFiZ0I5QUkrQW53QzFnTDhCQWdFWGdUR0JjSUdFZ2J1QjBJSDZBZzZDUG9BQVFBQUFCMEFzd0FJQUFBQUFBQUNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQTRBcmdBQkFBQUFBQUFCQUFjQUFBQUJBQUFBQUFBQ0FBY0FZQUFCQUFBQUFBQURBQWNBTmdBQkFBQUFBQUFFQUFjQWRRQUJBQUFBQUFBRkFBc0FGUUFCQUFBQUFBQUdBQWNBU3dBQkFBQUFBQUFLQUJvQWlnQURBQUVFQ1FBQkFBNEFCd0FEQUFFRUNRQUNBQTRBWndBREFBRUVDUUFEQUE0QVBRQURBQUVFQ1FBRUFBNEFmQUFEQUFFRUNRQUZBQllBSUFBREFBRUVDUUFHQUE0QVVnQURBQUVFQ1FBS0FEUUFwRzFoY0dGamFHVUFiUUJoQUhBQVlRQmpBR2dBWlZabGNuTnBiMjRnTVM0d0FGWUFaUUJ5QUhNQWFRQnZBRzRBSUFBeEFDNEFNRzFoY0dGamFHVUFiUUJoQUhBQVlRQmpBR2dBWlcxaGNHRmphR1VBYlFCaEFIQUFZUUJqQUdnQVpWSmxaM1ZzWVhJQVVnQmxBR2NBZFFCc0FHRUFjbTFoY0dGamFHVUFiUUJoQUhBQVlRQmpBR2dBWlVadmJuUWdaMlZ1WlhKaGRHVmtJR0o1SUVsamIwMXZiMjR1QUVZQWJ3QnVBSFFBSUFCbkFHVUFiZ0JsQUhJQVlRQjBBR1VBWkFBZ0FHSUFlUUFnQUVrQVl3QnZBRTBBYndCdkFHNEFMZ0FBQUFNQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT1cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hc3NldHMvZm9udHMvbWFwYWNoZS50dGZcbiAqKiBtb2R1bGUgaWQgPSA5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiZGF0YTphcHBsaWNhdGlvbi9mb250LXdvZmY7YmFzZTY0LGQwOUdSZ0FCQUFBQUFCYzBBQXNBQUFBQUZ1Z0FBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCUFV5OHlBQUFCQ0FBQUFHQUFBQUJnRHhJUFJHTnRZWEFBQUFGb0FBQUEvQUFBQVB3ZnpoZWRaMkZ6Y0FBQUFtUUFBQUFJQUFBQUNBQUFBQkJuYkhsbUFBQUNiQUFBRWZRQUFCSDB4TldWU1dobFlXUUFBQlJnQUFBQU5nQUFBRFlKNTJVRmFHaGxZUUFBRkpnQUFBQWtBQUFBSkFmQ0E5NW9iWFI0QUFBVXZBQUFBSFFBQUFCMFlZNEYrMnh2WTJFQUFCVXdBQUFBUEFBQUFEd3BEaTRHYldGNGNBQUFGV3dBQUFBZ0FBQUFJQUFtQUxWdVlXMWxBQUFWakFBQUFZWUFBQUdHVHYrL3NYQnZjM1FBQUJjVUFBQUFJQUFBQUNBQUF3QUFBQU1EbVFHUUFBVUFBQUtaQXN3QUFBQ1BBcGtDekFBQUFlc0FNd0VKQUFBQUFBQUFBQUFBQUFBQUFBQUFBUkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFRQUFBOG9FRHdQL0FBRUFEd0FCQUFBQUFBUUFBQUFBQUFBQUFBQUFBSUFBQUFBQUFBd0FBQUFNQUFBQWNBQUVBQXdBQUFCd0FBd0FCQUFBQUhBQUVBT0FBQUFBMEFDQUFCQUFVQUFFQUlPREw0T1hoVitYRTVjamx6ZVhTNkEzb2IraDk2TGJwZ3ZCQjhKdnc0ZkZxOFc3eGZmR2c4akh5WmZLQi8vMy8vd0FBQUFBQUlPREw0T1hoVitYRTVjamx6ZVhTNkEzb2IraDk2TGJwZ3ZCQjhKbnc0ZkZxOFczeGZmR2c4akh5WmZLQi8vMy8vd0FCLytNZk9SOGdIcThhUXhwQUdqd2FPQmYrRjUwWGtCZFlGbzBQenc5NER6TU9xdzZwRHBzT2VRM3BEYllObXdBREFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBZi8vQUE4QUFRQUFBQUFBQUFBQUFBSUFBRGM1QVFBQUFBQUJBQUFBQUFBQUFBQUFBZ0FBTnprQkFBQUFBQUVBQUFBQUFBQUFBQUFDQUFBM09RRUFBQUFBQWdCV0FBRURxZ05WQUFRQUVnQUFBUkVoRVRjQk1oWVZFUlFHSXlFSEVUUTJNd05XL1ZSV0FsWWlNakVqL2FxcU1TTUJBUUlBL2FwV0FsUXlJdjRBSXpPcUF3QWlNZ0FBQXdDcUFGVURRZ0x0QUFzQUZ3QWpBQUFUTWg0Q0ZTTTBMZ0lqRVRJZUFoVWpOQzRDSXhFME5qTXlGaFVVQmlNaUpxcFltbk5EZWpCU2JqNko4clJwZUZhVHhuRTNKeWMxTlNjbk53SDlRM09iVno1dVVqQUJhbW0wOG9sd3hwUlcvajRuTlRVbkp6YzNBQUFBQXdCV0FOVURxZ0tCQUJVQUdRQXZBQUFCTWg0Q0ZSUU9BaXNCTlRNeU5qVTBKaXNCTlFNMUlSVWxGQlk3QVJVaklpNENOVFErQWpzQkZTTWlCZ0xXTEU0NUlTRTVUaXlzckRaT1RqYXMxQUZVL2Z4T05xeXNMRTQ1SVNFNVRpeXNyRFpPQW9FaU9rNHNMVTQ2SVZKT05qWk9VdjhBVkZRcU5rNVNJVHBPTFN4T09pSlNUZ0FBQUFFQXFnQlZBMVlEQVFBSUFBQUJGU0VYQndrQkZ3Y0RWdjM0N2p6K3FnRldQTzRCMVZUd1BBRldBVlk4OEFBQUFBRUFxZ0JWQTFZREFRQUlBQUFKQWljM0lUVWhKd0lBQVZiK3FqenUvZmdDQ080REFmNnEvcW84OEZUd0FBQUFBQUVBMWdDQkF5b0MxUUFMQUFBQkJ4Y0hKd2NuTnljM0Z6Y0RLdTd1UE83dVBPN3VQTzd1QXBudTdqenU3anp1N2p6dTdnQURBSUFBcXdPQUFxc0FBd0FIQUFzQUFCTWhGU0VWTlNFVkJUVWhGWUFEQVAwQUF3RDlBQU1BQXF0VzFGUlUxbFpXQUFBQUFRQ0FBQU1EZ0FOVkFETUFBQ1V5RmhVVUJpTWlKalU4QVRjbERnRWpJaVkxTkRZek1oWVhKUzRCTlRRMk16SVdGUlFHSXlJbUp3VWVBUlVVQmdjRlBnRURBRE5KU1RNelNRTCswaElzR2pSTVN6VVpMUklCTEFFRFN6VTBURXMxR1MwUy90UUJBd0lDQVRBUUxQMUpNek5MU3pNSER3YXdFUkZMTlRSTUVoQ3VCdzhJTkV4TU5EVkxFeEd3Q0E4SENBOEhzQThSQUFBQ0FGWUFxd09xQXFzQUJRQUxBQUFsTnljM0NRRWxCd2tCRndjQ2JzYkdQQUVBL3dEKzZEei9BQUVBUE1ibnhNUTgvd0QvQUR3OEFRQUJBRHpFQUFBQUFRQldBQjBEcWdNckFCc0FBQ1VuTGdNMU5ENENNeklXRno0Qk16SWVBaFVVRGdJSEFnQStVb2RmTkNRL1ZUSTNaaU1pWmpneFZqOGtORitHVXgwNFMzOTBjVDB4Vmo4a01pZ29NaVEvVmpFOWNYWi9Td0FBQUFJQWdBQkJBMm9ES3dBTEFDY0FBQUV5TmpVMEppTWlCaFVVRmlFWEJ5YzFKdzRCSXlJdUFqVTBQZ0l6TWg0Q0ZSUUdCeGNCbGs5eGNGQlBjWEFCVU5SQTFBd2tYVE02WlVzc0xFdGxPanBrU3lzaUlBd0JWWEJRVDNGeFQxQncxRURVSWd3Z0lpdEtaVG81Wmtzc0xFdG1PVE5kSkF3QUFBSUFBUC9BQkFBRHdBQVpBRE1BQUFFaURnSUhQZ016TWg0Q0ZSUVdNekkyTlRRdUFnTXlQZ0kzRGdNaklpNENOVFFtSXlJR0ZSUWVBZ0lBYWJpS1VnTUNRM0dWVlZhWWNVRTRLQ2c0VUl1N2FtbTRpbElEQWtOeGxWVldtSEZCT0Nnb09GQ0x1d1BBVG9pMmFGdWZka1JHZXFOZEtEZzRLR3E3aTFEOEFFNkl0bWhibjNaRVJucWpYU2c0T0NocXU0dFFBQUFDQUFBQUFBSkpBMjRBRUFBbkFBQUJOQ2NtSXlJSEJoVVVGeFl6TWpjMk5UTVVCd01HQndZaklpY21Kd01tTlRRM05qTXlGeFlWQWJjckt6dzlLeXNyS3owOEt5dVNFOUFKRWhJVUZSSVNDZEFUVmxWNmVWVldBa2s5S3lvcUt6MDhLeXNyS3p3K0tQNUdFd3NMQ3dzVEFib29QbmxXVmxaV2VRQUFBUUFaQUVrRG5nTWxBRHNBQUFFR0J4WVZGQWNHQndZSEJnY0dJeUluRmpNeU55WW5KaWNXTXpJM0ppY21QUUVXRnlZbkpqVTBOeFlYRmhjbU5UUTNOak15RnpZM0JnYzJOd09lSnpZQkZoWXNMRDArVmxaaW00RVVHWUJsUERBdkVoTVFHUmhBS2lvbkxDWVdGaGxGWTJOeUJUWTJUVkEyUHpjV1BEWTFBczQ0S0FnUVNrcEtSRVEwTlI4ZlV3SlBBU01rT0FNR0RUTXlRd0lWQWhrcEtEQXlLMVV6TkFVVkZVMDJOanNNSVVJa0JoY0FBUUEyQUFBQ0pBTzNBQmNBQUFFVkl5SUhCaDBCTXdjakVTTVJJelV6TlRRM05qTXlGd0lrV2pFUkVhY1drYStTa2pzOFkxUXVBN0NYRkJVcGJLbitUZ0d5cVh4ck9qc0hBQUFBQUFnQUFBQVdBMjREYmdCM0FIOEFod0NQQUpjQW9BQ3BBTElBQUFFeUZ4WVhGaFVVQndZSEJpY21OVFEzTkRVMEp6WTNOamMyTnpZM05qVTBKelluSmdjR0R3RW1JeUlISmljbUp5WUhCaGNHRlJRWEZoY1dGeFlYRmhjR0J3WUhCaU1pSnlZbkppY21Md0VpQndZWEZoY1dId0VXRnhZZkFSWVhGaGNXTXpJL0FSUVZGQlVVQndZbkppY21OVFEzTmpjMk13RTJKeVlIQmhjV0Z6WW5KZ2NHRnhZWE5pY21Cd1lYRmhjMkp5WUhCaGNXRnpZbkpnY0dGeFkzRnpRSEloVVVOekkxTnlZSEJoY1dOelluQWJkM1pXVTdPMVJVaEJBSENBRWVJUm9hSEJzVEVnd01MUlVhRUI0ZUZ4VTJPRGsxQ1E4UElTQVFHaFV0REFzVEVod2JHaG9oRmdZTURnNFNFeE1TRGdvUkVRd0xEQVVFQWdFRUF3UUVEUXdNQmdZSEVoSVVGUk1URFEwSENBK0ZVMVE3TzJWa2VQN3ZBZ1lGQWdJR0JSUUVCUVlEQkFVR0ZBVUZCQVlGQlFZY0JRY0hCUVVJQnlVQkNRZ0RBZ29JQXlRS0NRb0pJUUVKQ2dJQkNRa0JBMjQ3TzJWbGQ1QnljeXdEQndjS0Fpb3FJemNhQkFZSEVBOFhGaVlsTVVReE5FRUZDd3dORGc4UEJna0pEUTBGUVRReFJERWxKUmNYRHhBSEJnUVVKd1VEQXd3TUdCSU1Dd0lDQXdJRUJBUUVBd01HRUJBTkRSWU5EUVFFQWdJV0hCMERDZ2NIQXl4emNwQjNaV1U3Ty8ySkJBTUNBd1FEQXc4REJnVURBd1lHRmdRSENBUURDQWNWQlFZSEJRVUdCd2tHQXdJR0JnSUVCd01JQWdZSEFRWUdCZ0VDQndZQ0FnWUFBd0FBQUJzRGJnTmlBQVFBRlFBNUFBQVRFU01STXpjV0J3WXJBU0luSmpVME56WXpNaGNXQVJFakVUUW5KaU1pQndZSEJoVVJJelkxTkM4Qk14VWpOamMyTnpZM05qTXlGeFlWeDd5OERBRWRIakFCTHh3ZEhSNHZNQndkQXB1OEZ4Z3hKQmdZREFlOEFnRUJ2QUVNREF3VUZCNGRKR0k3UEFKUy9ja0NONjhxSEJ3Y0hDb3FIQnNiSFA0MS9yc0JMendpSWhNVUhSRWUvc1Rram80YkhGTVREUTRRRUFrSlFVRjlBQUlBQUFCSkJBQURKUUFSQUVFQUFBRTBKeVVtQndZVkVSUVhGak15TnlVMk5TRVVCeFFIQmdjR0J3WUhCaUVnSnlZbkppY21KeVkxSmpVME56UTNOamMyTnpZM05pRWdGeFlYRmhjV0Z4WVZGZ0xiRWY3Y0VoTVRFd2tJREFnQkpCRUJKUUVFQlFnSkh4NHBmdjcvL3Y5K0tSOGVDUWdGQkFFQkJBVUlDUjhlS1g0QkFRRUJmaWtmSGdrSUJRUUJBYmNWQ3JjTENnc1YvcElXQ2dVR3R3b1ZOeDhmTHk4bEtod2RCUTRPQlIwY0tpVXZMeDhmTnpjZkhqQXZKU29jSFFRUER3UWRIQ29sTHpBZUh3QUFBQUFGQUFBQUFBTnVBMjRBRHdBZ0FERUFrZ0N5QUFBQk5DY21JeUlIQmhVVUZ4WXpNamMyTnhRSEJpTWlKeVkxTkRjMk16SVhGaFUzRkFjR0l5SW5KalUwTnpZek1oY1dGU1VpSXlJaklnY0dCd1lIQmdjR0J3WUhCZ2NHRlFZWEZCVVVGUVlYRkJjV0Z4WVhGaGNXRnhZWEZoY1dNeFkzTWpNeU14WTNNamMyTnpZM05qYzJOelkzTmpjMk5UUTFORFUwTlRRMU5DY21KeVluSmljbUp5WW5KaWNtSXlJaklpTUJGQWNHQndZSEJpTWlKeVluSmljbU5UUTNOamMyTnpZek1oY1dGeFlYRmdKSkt5czhQU3NxS2lzOVBDc3JUMEpCWGw1Q1FVRkNYbDVCUWo0UUR4WVdEdzhQRHhZV0R4RCs0UVFvS0JRVklpTVlHQkVkRlJZTEJ3UUVBZ0VCQVFFQkFRSUVCQWNMRmhVZEVSZ1lJeUlWRkNnb0JBUW9KeFVVSXlNWUdCRWNGaFlMQmdVRUFRSUNBUVFGQmdzV0Zod1JHQmdqSXhRVkp5Z0VBYmNEQmtGQmR6S0RnekozUVVFR0F3TUdRVUYzTW9PRE1uZEJRUVlEQWJjOEt5c3JLenc5S3lvcUt6MWVRa0ZCUWw1ZVFVSkNRVjdxRmc4UER3OFdGZzhRRUE4V2ZnSUJCQVVHQ3hZV0hCRVlHQ01qRkJVbktBUUVLQ2dVRlNJakdCZ1JIUlVXQ3djRUJBSUJBUUVCQVFFQ0JBUUhDeFlWSFJFWUdDTWlGUlFvS0FRRUtDY1ZGQ01qR0JnUkhCWVdDd1lGQkFFQy9waURNbmRCUVFZREF3WkJRWGN5ZzRNeWQwRkJCZ01EQmtGQmR6SUFBQUFEQUFBQUFBTnVBMjRBRXdBa0FEVUFBQUV5RnhZVkVSUUhCaU1oSWljbU5SRTBOell6RXpRbkppTWlCd1lWRkJjV016STNOalVoTkNjbUl5SUhCaFVVRnhZek1qYzJOUUxKUkRBeE1UQkUvZHhFTVRBd01VVHFKQ015TXlNakl5TXpNaU1rQVVJakpESXlKQ01qSkRJeUpDTURiakV3UlAzY1JERXdNREZFQWlSRU1ESCtTVElrSXlNa01qSWtJeU1rTWpJa0l5TWtNaklrSXlNa01nQUFDQUFBQUFBRGJnTnVBQk1BS3dBMEFEMEFRUUJRQUhRQWpRQUFKU1luS3dFR0J3WUhCZ2NHQndZSEp4WXpNamNESmljR0l3WVZGQmNXRnpZM05qYzJOelkvQVRZM05qY25KaWNHQndZSE1qY0ZKZ2NXRnpZM05qY0JNQWMyQlNZaklnY1dGelkzTmpjMk56WTNFeVluSXdZSEJnY0dCd1lIQmdjV0Z4WVhGaGMyTnpZek1oY1dGeFlYRmhjV0Z4WVhGeFFIQmdjR0l5SW5KaWNtTlRRM05qYzJNeklYRmhjV0ZRSkpHRGdCQVFrUUR5b3JKQ1FuSmhRSmFZWkxSMm9NRXJMT0FSa1pMaDBxS2ljbkpDTVZGZ0lGQlFJOVJFZFBOemNTcmEwQmgzaHlNaGcvS2lzTS9qUUJBUUZSYVk0c0xVdENKeU1qRkJVUkVRU0hBbE1CQlFZR0V4TVZGaU1rS0E4TEFRSURBaFFXRmhRVUZCTVJFUThRREF3SkNBWkdPenRsWlhkNFpHVTdPenM3WldSNGQyVmxPenRlaVpNRUJnWVdGaGtZS1Nrc0IxWWVBVnNjSXpVRUNFZEFRVEl5TFN3Ykd4TVVDQWNCQVFFQ2VYbGZKVVpGVmk2M0l4S0pneXRCUWswQnFBRUJVMTRMWVhrT0ZCUVBFQkVSQnY3MWhHWUhCd2dTRWhBUkZSUVFIeGdEQndZREF3RUJBUUVCQWdFQ0FnSUJBZ0VGZUdSbE96czdPMlZrZUhkbFpUczdPenRsWlhjQUFBQUJBQUFBQUFOY0EyNEFOZ0FBQVNFV0ZSUUhCZ2NHSXlJbkppY21KeVkxTkRjMk56WTNOak15RndjbUl5SUhCZ2NHRlJRWEZoY1dNekkzTmpjMk56WTNOamNqTlFHM0FaNEhORFJnWVh4YVVWRTdPeUlqSXlJN08xRlJXcXQ3ZDBkb1NqNC9KU1FrSlQ4K1NqSXBLaHNiRkJRSkNnUDVBZlluSW54aVlUYzNJeUk3TzFGUldscFJVVHM3SWlOemMwUWxKVUJBUzB3L1FDVWxEUTRWRkJzYUZ4Z1Zsd0FBQUFBQkFBQUFBQUxiQTdjQWNnQUFFelEzTmpjMk56WTNOak15RnhZWEZoVVVCd1lIQmdjR0J3WWpJaWNtSndZSEJnY0dCd1lIQmdjR0J3WVBBU2NtTlRRM05qYzJOeVkxTkRjMk16SVhGaFVVQndZVkZCY1dNekkzTmpjMk56WTNOamMyTlRRbkppTWlCd1lWRkJjV0Z4WVhGaFVVQndZaklpY21KeVluSmljbU5RQVZGaVlsTVRJNE9UdGFUazB4TUFvTEdCY2lJakV4T3ljbUpoRUZDd29EQXdrSUJ3WU1EQTRQRlFnRkNBd01HaG9FRXg0ZUxTTVVFeGtaR2hrbEh4c2JFaElPRGdnSEJBUS9QbVZ5VFV3SEJ3Z0pCd2NKQ0EwQkNSMFdGd3dNQndZQ1lqMDNOeWdwSFI0UER5WW1TVWhjTnpRMU1ERWxKUllXRXhJZ0Zpb3FEUXdjSEEwTUZ4Z1ZGUndEQmxrU05VRkNZbU1SSmpzdktpb1hGeVFtUjBja0pCZ1hEZzRaR0I0ZUlTSWVIaHRpT0RkS1NuSVpHQmNPRFEwTUJSQWFHZ0lKRnhnZUh4OGZIZ0FBQUFJQUFBQUFBOWNEYmdBYkFEUUFBQUV5RnhZVkVSUUhCZ2NHQndZaklpY21KeVluSmpVUk5EYzJNeUVCTWo4Qk5qVTBKeVlqSWc4Qkp5WWpJZ2NHRlJRZkFSWXpBMzRsR2hvbkowRkNXMXRrWlZ0YlFrRW5KeG9iSkFNbC9tNGJGT2NWRkJRY0doUzV1UlFhSEJRVEZPZ1RHd051R2hvbC90ZGxXMXRDUWlZbkp5WkNRbHRiWlFFcEpCb2IvYUFUM1JRZEhCUVRFN0d4RXhNVUhCMFUzUk1BQUFBQUJBQUEvL0FFQUFPM0FFQUFVQUIxQUlZQUFBRVVCd1lIRmhVVUJ3WUhCaU1pSnlZbkpqVTBOeVluSmpVME56WXpNaGMyTnhNMk56WWZBVFkzTmpNeUZ4WVZGQWNHSXlJbkpqVW5BeFlYTmpNeUZ4WVZCUlFYRmpNeU56WTFOQ2NtSXlJSEJnVTJOVFFuSmlNaUJ3WUhCaU1pSnlZbkppTWlCd1lWRkJjV0Z4WVhGak15TnpZM05qY25NamMyTlRRbkppTWlCd1lWRkJjV013UUFFUkVjQnowOWFXbDhlMmxwUFQwSEhoRVNJU0V3TUNOOHFrSUNCd2NJMGdzVUZSZ2tHUmtaR1NRakdSbS9PNnQrSVRBd0lTSDg3eGtaSXlNYUdSa2FJeU1aR1FIUEJnWUdDUWdHR0M0dExpNHRMaGdHQ0FrR0JnWVpLeXNiR3hrWkd4c3JLeGtDSXhrWkdSa2pJeG9aR1JvakFkTWhHeHNPR3h4WlMwd3JMQ3dyVEV0Wkd4c09IQnNoTHlJaEpGY0dBU2tJQkFVQ0xoVU5EUmtaSXlRWkdSa1pJeXIrOHdWWEl5RWlMM0VrR1JrWkdTUWpHUmtaR2U0R0NRZ0hCUVVZREFzTERCZ0ZCUVlKQ1FZWkRnNERBZ0lERGc0WmRSa1pKQ01aR1JrWkl5UVpHUUFBQVFBQUFBRUFBSC90VjQ5ZkR6ejFBQXNFQUFBQUFBRFRaQkJFQUFBQUFOTmtFRVFBQVAvQUJBQUR3QUFBQUFnQUFnQUFBQUFBQUFBQkFBQUR3UC9BQUFBRUFBQUFBQUFFQUFBQkFBQUFBQUFBQUFBQUFBQUFBQUFBSFFRQUFBQUFBQUFBQUFBQUFBSUFBQUFFQUFCV0JBQUFxZ1FBQUZZRUFBQ3FCQUFBcWdRQUFOWUVBQUNBQkFBQWdBUUFBRllFQUFCV0JBQUFnQVFBQUFBQ1NRQUFBN2NBR1FKYUFEWURiZ0FBQTI0QUFBUUFBQUFEYmdBQUEyNEFBQU51QUFBRFhBQUFBdHNBQUFQWEFBQUVBQUFBQUFBQUFBQUtBQlFBSGdCQ0FIZ0F2QURVQU93QkJnRWdBV3dCakFHNEFmUUNQZ0o4QXRZQy9BUUlCRjRFeGdYQ0JoSUc3Z2RDQitnSU9najZBQUVBQUFBZEFMTUFDQUFBQUFBQUFnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU9BSzRBQVFBQUFBQUFBUUFIQUFBQUFRQUFBQUFBQWdBSEFHQUFBUUFBQUFBQUF3QUhBRFlBQVFBQUFBQUFCQUFIQUhVQUFRQUFBQUFBQlFBTEFCVUFBUUFBQUFBQUJnQUhBRXNBQVFBQUFBQUFDZ0FhQUlvQUF3QUJCQWtBQVFBT0FBY0FBd0FCQkFrQUFnQU9BR2NBQXdBQkJBa0FBd0FPQUQwQUF3QUJCQWtBQkFBT0FId0FBd0FCQkFrQUJRQVdBQ0FBQXdBQkJBa0FCZ0FPQUZJQUF3QUJCQWtBQ2dBMEFLUnRZWEJoWTJobEFHMEFZUUJ3QUdFQVl3Qm9BR1ZXWlhKemFXOXVJREV1TUFCV0FHVUFjZ0J6QUdrQWJ3QnVBQ0FBTVFBdUFEQnRZWEJoWTJobEFHMEFZUUJ3QUdFQVl3Qm9BR1Z0WVhCaFkyaGxBRzBBWVFCd0FHRUFZd0JvQUdWU1pXZDFiR0Z5QUZJQVpRQm5BSFVBYkFCaEFISnRZWEJoWTJobEFHMEFZUUJ3QUdFQVl3Qm9BR1ZHYjI1MElHZGxibVZ5WVhSbFpDQmllU0JKWTI5TmIyOXVMZ0JHQUc4QWJnQjBBQ0FBWndCbEFHNEFaUUJ5QUdFQWRBQmxBR1FBSUFCaUFIa0FJQUJKQUdNQWJ3Qk5BRzhBYndCdUFDNEFBQUFEQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2Fzc2V0cy9mb250cy9tYXBhY2hlLndvZmZcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMzhiMGY3MjRiODdjYTU3ZDlkZDBkYzJlNWZkOGFlYzcuc3ZnXCI7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2Fzc2V0cy9mb250cy9tYXBhY2hlLnN2Z1xuICoqIG1vZHVsZSBpZCA9IDExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKlxyXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG4qL1xyXG52YXIgc3R5bGVzSW5Eb20gPSB7fSxcclxuXHRtZW1vaXplID0gZnVuY3Rpb24oZm4pIHtcclxuXHRcdHZhciBtZW1vO1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHRcdFx0cmV0dXJuIG1lbW87XHJcblx0XHR9O1xyXG5cdH0sXHJcblx0aXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gL21zaWUgWzYtOV1cXGIvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7XHJcblx0fSksXHJcblx0Z2V0SGVhZEVsZW1lbnQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcclxuXHR9KSxcclxuXHRzaW5nbGV0b25FbGVtZW50ID0gbnVsbCxcclxuXHRzaW5nbGV0b25Db3VudGVyID0gMCxcclxuXHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XHJcblx0aWYodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XHJcblx0XHRpZih0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcclxuXHR9XHJcblxyXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxyXG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcclxuXHRpZiAodHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uID09PSBcInVuZGVmaW5lZFwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcclxuXHJcblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIDxoZWFkPi5cclxuXHRpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidW5kZWZpbmVkXCIpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xyXG5cclxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QpO1xyXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XHJcblxyXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xyXG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcclxuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XHJcblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcclxuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xyXG5cdFx0fVxyXG5cdFx0aWYobmV3TGlzdCkge1xyXG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QpO1xyXG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XHJcblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcclxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspXHJcblx0XHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXSgpO1xyXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcclxuXHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcclxuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0aWYoZG9tU3R5bGUpIHtcclxuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xyXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyhsaXN0KSB7XHJcblx0dmFyIHN0eWxlcyA9IFtdO1xyXG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcclxuXHRmb3IodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xyXG5cdFx0dmFyIGlkID0gaXRlbVswXTtcclxuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xyXG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcclxuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xyXG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xyXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pXHJcblx0XHRcdHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XHJcblx0XHRlbHNlXHJcblx0XHRcdG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcclxuXHR9XHJcblx0cmV0dXJuIHN0eWxlcztcclxufVxyXG5cclxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlRWxlbWVudCkge1xyXG5cdHZhciBoZWFkID0gZ2V0SGVhZEVsZW1lbnQoKTtcclxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcFtzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcclxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xyXG5cdFx0aWYoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XHJcblx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgaGVhZC5maXJzdENoaWxkKTtcclxuXHRcdH0gZWxzZSBpZihsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xyXG5cdFx0XHRoZWFkLmluc2VydEJlZm9yZShzdHlsZUVsZW1lbnQsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHRcdH1cclxuXHRcdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGVFbGVtZW50KTtcclxuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcclxuXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcuIE11c3QgYmUgJ3RvcCcgb3IgJ2JvdHRvbScuXCIpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xyXG5cdHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0dmFyIGlkeCA9IHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGVFbGVtZW50KTtcclxuXHRpZihpZHggPj0gMCkge1xyXG5cdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xyXG5cdHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XHJcblx0c3R5bGVFbGVtZW50LnR5cGUgPSBcInRleHQvY3NzXCI7XHJcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlRWxlbWVudCk7XHJcblx0cmV0dXJuIHN0eWxlRWxlbWVudDtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucykge1xyXG5cdHZhciBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xyXG5cdGxpbmtFbGVtZW50LnJlbCA9IFwic3R5bGVzaGVldFwiO1xyXG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rRWxlbWVudCk7XHJcblx0cmV0dXJuIGxpbmtFbGVtZW50O1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcclxuXHR2YXIgc3R5bGVFbGVtZW50LCB1cGRhdGUsIHJlbW92ZTtcclxuXHJcblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XHJcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcclxuXHRcdHN0eWxlRWxlbWVudCA9IHNpbmdsZXRvbkVsZW1lbnQgfHwgKHNpbmdsZXRvbkVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xyXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpO1xyXG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSk7XHJcblx0fSBlbHNlIGlmKG9iai5zb3VyY2VNYXAgJiZcclxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xyXG5cdFx0c3R5bGVFbGVtZW50ID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XHJcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KTtcclxuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcclxuXHRcdFx0aWYoc3R5bGVFbGVtZW50LmhyZWYpXHJcblx0XHRcdFx0VVJMLnJldm9rZU9iamVjdFVSTChzdHlsZUVsZW1lbnQuaHJlZik7XHJcblx0XHR9O1xyXG5cdH0gZWxzZSB7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XHJcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KTtcclxuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHR1cGRhdGUob2JqKTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xyXG5cdFx0aWYobmV3T2JqKSB7XHJcblx0XHRcdGlmKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcClcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmVtb3ZlKCk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcclxuXHR2YXIgdGV4dFN0b3JlID0gW107XHJcblxyXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XHJcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XHJcblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcclxuXHR9O1xyXG59KSgpO1xyXG5cclxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xyXG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcclxuXHJcblx0aWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcclxuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXM7XHJcblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XHJcblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlRWxlbWVudCwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IG9iai5jc3M7XHJcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xyXG5cclxuXHRpZihtZWRpYSkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxyXG5cdH1cclxuXHJcblx0aWYoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XHJcblx0fSBlbHNlIHtcclxuXHRcdHdoaWxlKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XHJcblx0XHR9XHJcblx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVMaW5rKGxpbmtFbGVtZW50LCBvYmopIHtcclxuXHR2YXIgY3NzID0gb2JqLmNzcztcclxuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuXHJcblx0aWYoc291cmNlTWFwKSB7XHJcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxyXG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xyXG5cdH1cclxuXHJcblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XHJcblxyXG5cdHZhciBvbGRTcmMgPSBsaW5rRWxlbWVudC5ocmVmO1xyXG5cclxuXHRsaW5rRWxlbWVudC5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHJcblx0aWYob2xkU3JjKVxyXG5cdFx0VVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xyXG59XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==