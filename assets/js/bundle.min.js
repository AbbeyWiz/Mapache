/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _prism = __webpack_require__(1);
	
	var _prism2 = _interopRequireDefault(_prism);
	
	var _jqueryGhostHunter = __webpack_require__(2);
	
	var _jqueryGhostHunter2 = _interopRequireDefault(_jqueryGhostHunter);
	
	var _app = __webpack_require__(3);
	
	var _app2 = _interopRequireDefault(_app);
	
	var _app3 = __webpack_require__(4);
	
	var _app4 = _interopRequireDefault(_app3);
	
	var _app5 = __webpack_require__(5);
	
	var _app6 = _interopRequireDefault(_app5);
	
	var _appRelated = __webpack_require__(6);
	
	var _appRelated2 = _interopRequireDefault(_appRelated);
	
	__webpack_require__(7);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function () {
	
	    /* 2. variables globals */
	    var $gd_header = $('#header'),
	        $gd_menu = $('#menu-mobile'),
	        $gd_cover = $('#cover'),
	        $gd_search_btn = $('#search-btn'),
	        $gd_search = $('#header-search'),
	        $gd_search_input = $('.search-field'),
	        $gd_comments = $('#comments'),
	        $gd_related = $('#related'),
	        $gd_comment_count = $('.gd-comment_count'),
	        $gd_share_count = $('.share-count'),
	        url_regexp = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
	
	    var $document = $(document),
	        $window = $(window);
	
	    var overlay = {
	        opacity: 1,
	        visibility: 'visible'
	    };
	
	    /**
	     * Post related
	     */
	    $document.on('ready', function () {
	        var related = new _appRelated2.default($gd_related);
	        related.mapacheGet();
	    });
	
	    /**
	     * Functions
	     */
	    $('.share').bind('click', shareSocial);
	    $document.on('mouseup', mouseUp);
	
	    /**
	     * menu Mobile open
	     */
	    $('#menu-open').on('click', function (e) {
	        e.preventDefault();
	        $('html').attr('mapache-state', 'no-scroll');
	        $('.overlay').css(overlay);
	        $gd_menu.addClass('open');
	    });
	
	    /**
	     * Menu Close Mobile
	     */
	    function menuClose(e) {
	        e.preventDefault();
	        $('html').removeAttr('mapache-state');
	        $('.overlay').removeAttr('style');
	        $gd_menu.removeClass('open');
	    }
	
	    /**
	     *  Functions MouseUp
	     */
	    function mouseUp(e) {
	        if ($gd_menu.hasClass('open') && $gd_menu.has(e.target).length === 0) {
	            menuClose(e);
	        }
	    }
	
	    /**
	     *  Search Open and close mobile
	     */
	    $gd_search_btn.on('click', function (e) {
	        e.preventDefault();
	        $(this).toggleClass('i-search');
	        $gd_header.toggleClass('responsive-search-open');
	        $gd_search_input.focus();
	    });
	
	    /**
	     * Search open an close desktop.
	     * Api ghost for search
	     */
	    $document.on('ready', function () {
	
	        $gd_search_input.focus(function () {
	            $gd_header.addClass('search-active');
	            $('.search-popout').removeClass('closed');
	        });
	
	        $gd_search_input.blur(function () {
	            setTimeout(function () {
	                $gd_header.removeClass('search-active');
	                $('.search-popout').addClass('closed');
	            }, 100);
	        });
	
	        $gd_search_input.keyup(function () {
	            $('.search-suggest-results').css('display', 'block');
	        });
	
	        $gd_search_input.ghostHunter({
	            results: "#search-results",
	            zeroResultsInfo: false,
	            displaySearchInfo: false,
	            result_template: '<a href="{{link}}">{{title}}</a>',
	            onKeyUp: true
	        });
	    });
	
	    /**
	     * Header box shadow and transparent
	     */
	    $document.on('ready', function () {
	
	        if ($gd_cover.length > 0) {
	            $gd_header.css('background', 'transparent');
	            $window.scroll(function () {
	                coverScroll();
	            });
	        } else {
	            $gd_header.addClass('toolbar-shadow');
	        }
	
	        function coverScroll() {
	            var scrollTop = $window.scrollTop(),
	                gd_cover_height = $gd_cover.height() - $gd_header.height(),
	                gd_cover_wrap = (gd_cover_height - scrollTop) / gd_cover_height;
	
	            if (scrollTop >= gd_cover_height) {
	                $gd_header.addClass('toolbar-shadow').removeAttr('style');
	            } else {
	                $gd_header.removeClass('toolbar-shadow').css({ 'background': 'transparent' });
	            }
	
	            $('.cover-wrap').css('opacity', gd_cover_wrap);
	        }
	    });
	
	    /**
	     * Video Responsive Youtube
	     */
	
	    $('.post-content').each(function () {
	        var selectors = ['iframe[src*="player.vimeo.com"]', 'iframe[src*="youtube.com"]', 'iframe[src*="youtube-nocookie.com"]', 'iframe[src*="kickstarter.com"][src*="video.html"]'];
	
	        var $allVideos = $(this).find(selectors.join(','));
	
	        $allVideos.each(function () {
	            $(this).wrap('<aside class="video-responsive"></aside>');
	        });
	    });
	
	    /**
	     * Share Social
	     */
	    function shareSocial(e) {
	        e.preventDefault();
	        var share = new _app2.default($(this));
	        share.godoShare();
	    }
	
	    /**
	     * Share Social Count
	     */
	    function shareConter() {
	        if ($gd_share_count.length > 0) {
	            var share_count = new _app4.default($gd_share_count);
	            share_count.godoCount();
	        }
	    }
	
	    /**
	     * Header Social Links
	     */
	    function socialLink(links) {
	        $.each(links, function (type, url) {
	            if (typeof url === 'string' && url_regexp.test(url)) {
	                var template = '<a title="' + type + '" href="' + url + '" target="_blank" class="i-' + type + '"></a>';
	                $('.header-social').append(template);
	            }
	        });
	    }
	
	    /**
	     * Disqus Comment
	     */
	    function disqusComments() {
	        if (typeof disqus_shortname != 'undefined') {
	            $gd_comments.removeAttr('style');
	            var d = document,
	                s = d.createElement('script');
	            s.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            s.setAttribute('data-timestamp', +new Date());
	            (d.head || d.body).appendChild(s);
	        }
	    }
	
	    /**
	     * Comments Count Disqus
	     */
	    function commentsCount() {
	        $gd_comment_count.each(function () {
	            var _this = this;
	
	            var url = $(this).attr('godo-url');
	            $.ajax({
	                type: 'GET',
	                url: 'https://disqus.com/api/3.0/threads/set.jsonp',
	                data: { api_key: disqusPublicKey, forum: disqus_shortname, thread: 'link:' + url },
	                cache: false,
	                dataType: 'jsonp',
	
	                success: function success(commet) {
	                    for (var i in commet.response) {
	                        var countText = 'Comments';
	                        var count = commet.response[i].posts;
	                        if (count == 1) countText = 'Comment';
	                        $(_this).html(count + ' <span>' + countText + '</span>');
	                    }
	                }
	            });
	        });
	    }
	
	    /**
	     * Scroll btn link
	     */
	    $('.scrolltop').on('click', function (e) {
	        e.preventDefault();
	        $('html, body').animate({ scrollTop: $($(this).attr('href')).offset().top - 70 }, 500, 'linear');
	    });
	
	    /**
	     * Move excerpt
	     */
	    if ($('p.excerpt').length > 0) {
	        $('p.excerpt').insertAfter($('h1.title'));
	    }
	
	    $document.on('ready', function () {
	        shareConter();
	        if (typeof social_link != 'undefined') socialLink(social_link);
	        if ($gd_comments.length > 0) disqusComments();
	        if (typeof disqus_shortname != 'undefined' && typeof disqusPublicKey != 'undefined') commentsCount();
	    });
	})();
	
	// fetch('http://localhost:2368/page/2/')
	//   .then( response => {
	//     return response.text()
	//   })
	//   .then( body => {
	//       let entries = $('.entry-list', body);
	//       $('#entry').append(entries);
	//   })
	//   .catch( err => {
	//     console.log('parsing failed', err)
	//   })

	/* 15. pagination
	====================================================================== */

	// if ( $gd_pagination.attr('data-page') == 1 ) {
	//     $gd_pagination.css({'display':'none'});
	// }

	// var page = 2
	//
	// $gd_pagination.on('click', function(e) {
	//     e.preventDefault();
	//     var that = $(this);
	//     let pageTotal = that.attr('mapache-page');
	//     that.addClass('loading').find('.text').slideUp(320);
	// 	that.find('.pagination-icon').addClass('spin');
	//
	//     if ( page <= pageTotal ){
	//
	//         setTimeout( () => {
	//             let  p = new Pagination(that, page);
	//             p.pagination();
	//             that.removeClass('loading').find('.text').slideDown(320);
	//         	that.find('.pagination-icon').removeClass('spin');
	//             page++
	//         }, 1000);
	//
	//     }else{
	//         that.html('<h3>You reached the end of the line!</h3><p>No more posts to load.');
	//     }
	// });
	// var page = 2;
	// function pagination(e) {
	//     e.preventDefault();
	//     let that = $(this);
	//     let pageTotal = that.data('page');
	//
	//     that.addClass('loading').find('.text').slideUp(320);
	//     that.find('.pagination-icon').addClass('spin');
	//
	//     if( page <= pageTotal ){
	//
	//         $.get( ( url_blog +'/page/'+page ))
	//         .done( (res) =>{
	//             let entries = $('.entry-list',res);
	//             setTimeout( () => {
	//                 $('#entry').append(entries);
	//                 that.removeClass('loading').find('.text').slideDown(320);
	//                 that.find('.pagination-icon').removeClass('spin');
	//                 page++;
	//             }, 1000);
	//         });
	//
	//     }else{
	//         that.html('<h3>You reached the end of the line!</h3><p>No more posts to load.');
	//     }
	// }
	/*
	@package godofredoninja

	========================================================================
	Mapache Javascript Functions
	========================================================================
	*/

	/**
	* Table of Contents:
	*
	*       1. Imports libraris and modules
	*      2. variables Globals
	*      3. Functions
	*      4. Search header
	*      5. Opena and close menu mobile
	*      6. Video Responsive youtube and vimeo
	*      7. header transparent
	*      8. Share social
	*      9. Share count social media
	*      10. Social Link Header
	*      11. Disqus Comments
	*/

	/* 1. Imports and libraris and modules
	====================================================================== */
	// import zepto        from "./lib/zepto.js";
	// import $            from "jQuery";

/***/ },
/* 1 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+aspnet+bash+c+csharp+cpp+ruby+css-extras+git+go+java+json+less+markdown+perl+php+php-extras+python+jsx+scss+sql+swift&plugins=line-numbers */
	var _self = "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {},
	    Prism = function () {
	  var e = /\blang(?:uage)?-(\w+)\b/i,
	      t = 0,
	      n = _self.Prism = { util: { encode: function encode(e) {
	        return e instanceof a ? new a(e.type, n.util.encode(e.content), e.alias) : "Array" === n.util.type(e) ? e.map(n.util.encode) : e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
	      }, type: function type(e) {
	        return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1];
	      }, objId: function objId(e) {
	        return e.__id || Object.defineProperty(e, "__id", { value: ++t }), e.__id;
	      }, clone: function clone(e) {
	        var t = n.util.type(e);switch (t) {case "Object":
	            var a = {};for (var r in e) {
	              e.hasOwnProperty(r) && (a[r] = n.util.clone(e[r]));
	            }return a;case "Array":
	            return e.map && e.map(function (e) {
	              return n.util.clone(e);
	            });}return e;
	      } }, languages: { extend: function extend(e, t) {
	        var a = n.util.clone(n.languages[e]);for (var r in t) {
	          a[r] = t[r];
	        }return a;
	      }, insertBefore: function insertBefore(e, t, a, r) {
	        r = r || n.languages;var l = r[e];if (2 == arguments.length) {
	          a = arguments[1];for (var i in a) {
	            a.hasOwnProperty(i) && (l[i] = a[i]);
	          }return l;
	        }var o = {};for (var s in l) {
	          if (l.hasOwnProperty(s)) {
	            if (s == t) for (var i in a) {
	              a.hasOwnProperty(i) && (o[i] = a[i]);
	            }o[s] = l[s];
	          }
	        }return n.languages.DFS(n.languages, function (t, n) {
	          n === r[e] && t != e && (this[t] = o);
	        }), r[e] = o;
	      }, DFS: function DFS(e, t, a, r) {
	        r = r || {};for (var l in e) {
	          e.hasOwnProperty(l) && (t.call(e, l, e[l], a || l), "Object" !== n.util.type(e[l]) || r[n.util.objId(e[l])] ? "Array" !== n.util.type(e[l]) || r[n.util.objId(e[l])] || (r[n.util.objId(e[l])] = !0, n.languages.DFS(e[l], t, l, r)) : (r[n.util.objId(e[l])] = !0, n.languages.DFS(e[l], t, null, r)));
	        }
	      } }, plugins: {}, highlightAll: function highlightAll(e, t) {
	      var a = { callback: t, selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code' };n.hooks.run("before-highlightall", a);for (var r, l = a.elements || document.querySelectorAll(a.selector), i = 0; r = l[i++];) {
	        n.highlightElement(r, e === !0, a.callback);
	      }
	    }, highlightElement: function highlightElement(t, a, r) {
	      for (var l, i, o = t; o && !e.test(o.className);) {
	        o = o.parentNode;
	      }o && (l = (o.className.match(e) || [, ""])[1].toLowerCase(), i = n.languages[l]), t.className = t.className.replace(e, "").replace(/\s+/g, " ") + " language-" + l, o = t.parentNode, /pre/i.test(o.nodeName) && (o.className = o.className.replace(e, "").replace(/\s+/g, " ") + " language-" + l);var s = t.textContent,
	          u = { element: t, language: l, grammar: i, code: s };if (n.hooks.run("before-sanity-check", u), !u.code || !u.grammar) return n.hooks.run("complete", u), void 0;if (n.hooks.run("before-highlight", u), a && _self.Worker) {
	        var c = new Worker(n.filename);c.onmessage = function (e) {
	          u.highlightedCode = e.data, n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(u.element), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
	        }, c.postMessage(JSON.stringify({ language: u.language, code: u.code, immediateClose: !0 }));
	      } else u.highlightedCode = n.highlight(u.code, u.grammar, u.language), n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(t), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
	    }, highlight: function highlight(e, t, r) {
	      var l = n.tokenize(e, t);return a.stringify(n.util.encode(l), r);
	    }, tokenize: function tokenize(e, t) {
	      var a = n.Token,
	          r = [e],
	          l = t.rest;if (l) {
	        for (var i in l) {
	          t[i] = l[i];
	        }delete t.rest;
	      }e: for (var i in t) {
	        if (t.hasOwnProperty(i) && t[i]) {
	          var o = t[i];o = "Array" === n.util.type(o) ? o : [o];for (var s = 0; s < o.length; ++s) {
	            var u = o[s],
	                c = u.inside,
	                g = !!u.lookbehind,
	                h = !!u.greedy,
	                f = 0,
	                d = u.alias;u = u.pattern || u;for (var p = 0; p < r.length; p++) {
	              var m = r[p];if (r.length > e.length) break e;if (!(m instanceof a)) {
	                u.lastIndex = 0;var y = u.exec(m),
	                    v = 1;if (!y && h && p != r.length - 1) {
	                  var b = r[p + 1].matchedStr || r[p + 1],
	                      k = m + b;if (p < r.length - 2 && (k += r[p + 2].matchedStr || r[p + 2]), u.lastIndex = 0, y = u.exec(k), !y) continue;var w = y.index + (g ? y[1].length : 0);if (w >= m.length) continue;var _ = y.index + y[0].length,
	                      P = m.length + b.length;if (v = 3, P >= _) {
	                    if (r[p + 1].greedy) continue;v = 2, k = k.slice(0, P);
	                  }m = k;
	                }if (y) {
	                  g && (f = y[1].length);var w = y.index + f,
	                      y = y[0].slice(f),
	                      _ = w + y.length,
	                      S = m.slice(0, w),
	                      O = m.slice(_),
	                      j = [p, v];S && j.push(S);var A = new a(i, c ? n.tokenize(y, c) : y, d, y, h);j.push(A), O && j.push(O), Array.prototype.splice.apply(r, j);
	                }
	              }
	            }
	          }
	        }
	      }return r;
	    }, hooks: { all: {}, add: function add(e, t) {
	        var a = n.hooks.all;a[e] = a[e] || [], a[e].push(t);
	      }, run: function run(e, t) {
	        var a = n.hooks.all[e];if (a && a.length) for (var r, l = 0; r = a[l++];) {
	          r(t);
	        }
	      } } },
	      a = n.Token = function (e, t, n, a, r) {
	    this.type = e, this.content = t, this.alias = n, this.matchedStr = a || null, this.greedy = !!r;
	  };if (a.stringify = function (e, t, r) {
	    if ("string" == typeof e) return e;if ("Array" === n.util.type(e)) return e.map(function (n) {
	      return a.stringify(n, t, e);
	    }).join("");var l = { type: e.type, content: a.stringify(e.content, t, r), tag: "span", classes: ["token", e.type], attributes: {}, language: t, parent: r };if ("comment" == l.type && (l.attributes.spellcheck = "true"), e.alias) {
	      var i = "Array" === n.util.type(e.alias) ? e.alias : [e.alias];Array.prototype.push.apply(l.classes, i);
	    }n.hooks.run("wrap", l);var o = "";for (var s in l.attributes) {
	      o += (o ? " " : "") + s + '="' + (l.attributes[s] || "") + '"';
	    }return "<" + l.tag + ' class="' + l.classes.join(" ") + '" ' + o + ">" + l.content + "</" + l.tag + ">";
	  }, !_self.document) return _self.addEventListener ? (_self.addEventListener("message", function (e) {
	    var t = JSON.parse(e.data),
	        a = t.language,
	        r = t.code,
	        l = t.immediateClose;_self.postMessage(n.highlight(r, n.languages[a], a)), l && _self.close();
	  }, !1), _self.Prism) : _self.Prism;var r = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();return r && (n.filename = r.src, document.addEventListener && !r.hasAttribute("data-manual") && document.addEventListener("DOMContentLoaded", n.highlightAll)), _self.Prism;
	}();"undefined" != typeof module && module.exports && (module.exports = Prism), "undefined" != typeof global && (global.Prism = Prism);
	Prism.languages.markup = { comment: /<!--[\w\W]*?-->/, prolog: /<\?[\w\W]+?\?>/, doctype: /<!DOCTYPE[\w\W]+?>/, cdata: /<!\[CDATA\[[\w\W]*?]]>/i, tag: { pattern: /<\/?(?!\d)[^\s>\/=.$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, inside: { tag: { pattern: /^<\/?[^\s>\/]+/i, inside: { punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/ } }, "attr-value": { pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i, inside: { punctuation: /[=>"']/ } }, punctuation: /\/?>/, "attr-name": { pattern: /[^\s>\/]+/, inside: { namespace: /^[^\s>\/:]+:/ } } } }, entity: /&#?[\da-z]{1,8};/i }, Prism.hooks.add("wrap", function (a) {
	  "entity" === a.type && (a.attributes.title = a.content.replace(/&amp;/, "&"));
	}), Prism.languages.xml = Prism.languages.markup, Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup;
	Prism.languages.css = { comment: /\/\*[\w\W]*?\*\//, atrule: { pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i, inside: { rule: /@[\w-]+/ } }, url: /url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i, selector: /[^\{\}\s][^\{\};]*?(?=\s*\{)/, string: /("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/, property: /(\b|\B)[\w-]+(?=\s*:)/i, important: /\B!important\b/i, "function": /[-a-z0-9]+(?=\()/i, punctuation: /[(){};:]/ }, Prism.languages.css.atrule.inside.rest = Prism.util.clone(Prism.languages.css), Prism.languages.markup && (Prism.languages.insertBefore("markup", "tag", { style: { pattern: /(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i, lookbehind: !0, inside: Prism.languages.css, alias: "language-css" } }), Prism.languages.insertBefore("inside", "attr-value", { "style-attr": { pattern: /\s*style=("|').*?\1/i, inside: { "attr-name": { pattern: /^\s*style/i, inside: Prism.languages.markup.tag.inside }, punctuation: /^\s*=\s*['"]|['"]\s*$/, "attr-value": { pattern: /.+/i, inside: Prism.languages.css } }, alias: "language-css" } }, Prism.languages.markup.tag));
	Prism.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\w\W]*?\*\//, lookbehind: !0 }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: !0 }], string: { pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: !0 }, "class-name": { pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i, lookbehind: !0, inside: { punctuation: /(\.|\\)/ } }, keyword: /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, "boolean": /\b(true|false)\b/, "function": /[a-z0-9_]+(?=\()/i, number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation: /[{}[\];(),.:]/ };
	Prism.languages.javascript = Prism.languages.extend("clike", { keyword: /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/, number: /\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/, "function": /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i }), Prism.languages.insertBefore("javascript", "keyword", { regex: { pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/, lookbehind: !0, greedy: !0 } }), Prism.languages.insertBefore("javascript", "class-name", { "template-string": { pattern: /`(?:\\\\|\\?[^\\])*?`/, greedy: !0, inside: { interpolation: { pattern: /\$\{[^}]+\}/, inside: { "interpolation-punctuation": { pattern: /^\$\{|\}$/, alias: "punctuation" }, rest: Prism.languages.javascript } }, string: /[\s\S]+/ } } }), Prism.languages.markup && Prism.languages.insertBefore("markup", "tag", { script: { pattern: /(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind: !0, inside: Prism.languages.javascript, alias: "language-javascript" } }), Prism.languages.js = Prism.languages.javascript;
	Prism.languages.aspnet = Prism.languages.extend("markup", { "page-directive tag": { pattern: /<%\s*@.*%>/i, inside: { "page-directive tag": /<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i, rest: Prism.languages.markup.tag.inside } }, "directive tag": { pattern: /<%.*%>/i, inside: { "directive tag": /<%\s*?[$=%#:]{0,2}|%>/i, rest: Prism.languages.csharp } } }), Prism.languages.aspnet.tag.pattern = /<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, Prism.languages.insertBefore("inside", "punctuation", { "directive tag": Prism.languages.aspnet["directive tag"] }, Prism.languages.aspnet.tag.inside["attr-value"]), Prism.languages.insertBefore("aspnet", "comment", { "asp comment": /<%--[\w\W]*?--%>/ }), Prism.languages.insertBefore("aspnet", Prism.languages.javascript ? "script" : "tag", { "asp script": { pattern: /(<script(?=.*runat=['"]?server['"]?)[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind: !0, inside: Prism.languages.csharp || {} } });
	!function (e) {
	  var t = { variable: [{ pattern: /\$?\(\([\w\W]+?\)\)/, inside: { variable: [{ pattern: /(^\$\(\([\w\W]+)\)\)/, lookbehind: !0 }, /^\$\(\(/], number: /\b-?(?:0x[\dA-Fa-f]+|\d*\.?\d+(?:[Ee]-?\d+)?)\b/, operator: /--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/, punctuation: /\(\(?|\)\)?|,|;/ } }, { pattern: /\$\([^)]+\)|`[^`]+`/, inside: { variable: /^\$\(|^`|\)$|`$/ } }, /\$(?:[a-z0-9_#\?\*!@]+|\{[^}]+\})/i] };e.languages.bash = { shebang: { pattern: /^#!\s*\/bin\/bash|^#!\s*\/bin\/sh/, alias: "important" }, comment: { pattern: /(^|[^"{\\])#.*/, lookbehind: !0 }, string: [{ pattern: /((?:^|[^<])<<\s*)(?:"|')?(\w+?)(?:"|')?\s*\r?\n(?:[\s\S])*?\r?\n\2/g, lookbehind: !0, greedy: !0, inside: t }, { pattern: /(["'])(?:\\\\|\\?[^\\])*?\1/g, greedy: !0, inside: t }], variable: t.variable, "function": { pattern: /(^|\s|;|\||&)(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|\s|;|\||&)/, lookbehind: !0 }, keyword: { pattern: /(^|\s|;|\||&)(?:let|:|\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|\s|;|\||&)/, lookbehind: !0 }, "boolean": { pattern: /(^|\s|;|\||&)(?:true|false)(?=$|\s|;|\||&)/, lookbehind: !0 }, operator: /&&?|\|\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/, punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];]/ };var a = t.variable[1].inside;a["function"] = e.languages.bash["function"], a.keyword = e.languages.bash.keyword, a.boolean = e.languages.bash.boolean, a.operator = e.languages.bash.operator, a.punctuation = e.languages.bash.punctuation;
	}(Prism);
	Prism.languages.c = Prism.languages.extend("clike", { keyword: /\b(asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/, operator: /\-[>-]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|?\||[~^%?*\/]/, number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)[ful]*\b/i }), Prism.languages.insertBefore("c", "string", { macro: { pattern: /(^\s*)#\s*[a-z]+([^\r\n\\]|\\.|\\(?:\r\n?|\n))*/im, lookbehind: !0, alias: "property", inside: { string: { pattern: /(#\s*include\s*)(<.+?>|("|')(\\?.)+?\3)/, lookbehind: !0 }, directive: { pattern: /(#\s*)\b(define|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\b/, lookbehind: !0, alias: "keyword" } } }, constant: /\b(__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|stdin|stdout|stderr)\b/ }), delete Prism.languages.c["class-name"], delete Prism.languages.c["boolean"];
	Prism.languages.csharp = Prism.languages.extend("clike", { keyword: /\b(abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while|add|alias|ascending|async|await|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|where|yield)\b/, string: [/@("|')(\1\1|\\\1|\\?(?!\1)[\s\S])*\1/, /("|')(\\?.)*?\1/], number: /\b-?(0x[\da-f]+|\d*\.?\d+f?)\b/i }), Prism.languages.insertBefore("csharp", "keyword", { "generic-method": { pattern: /[a-z0-9_]+\s*<[^>\r\n]+?>\s*(?=\()/i, alias: "function", inside: { keyword: Prism.languages.csharp.keyword, punctuation: /[<>(),.:]/ } }, preprocessor: { pattern: /(^\s*)#.*/m, lookbehind: !0, alias: "property", inside: { directive: { pattern: /(\s*#)\b(define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\b/, lookbehind: !0, alias: "keyword" } } } });
	Prism.languages.cpp = Prism.languages.extend("c", { keyword: /\b(alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/, "boolean": /\b(true|false)\b/, operator: /[-+]{1,2}|!=?|<{1,2}=?|>{1,2}=?|\->|:{1,2}|={1,2}|\^|~|%|&{1,2}|\|?\||\?|\*|\/|\b(and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/ }), Prism.languages.insertBefore("cpp", "keyword", { "class-name": { pattern: /(class\s+)[a-z0-9_]+/i, lookbehind: !0 } });
	!function (e) {
	  e.languages.ruby = e.languages.extend("clike", { comment: /#(?!\{[^\r\n]*?\}).*/, keyword: /\b(alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\b/ });var n = { pattern: /#\{[^}]+\}/, inside: { delimiter: { pattern: /^#\{|\}$/, alias: "tag" }, rest: e.util.clone(e.languages.ruby) } };e.languages.insertBefore("ruby", "keyword", { regex: [{ pattern: /%r([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\((?:[^()\\]|\\[\s\S])*\)[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\[(?:[^\[\]\\]|\\[\s\S])*\][gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r<(?:[^<>\\]|\\[\s\S])*>[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\r\n])+\/[gim]{0,3}(?=\s*($|[\r\n,.;})]))/, lookbehind: !0 }], variable: /[@$]+[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\b)/, symbol: /:[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\b)/ }), e.languages.insertBefore("ruby", "number", { builtin: /\b(Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|File|Fixnum|Fload|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/, constant: /\b[A-Z][a-zA-Z_0-9]*(?:[?!]|\b)/ }), e.languages.ruby.string = [{ pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\((?:[^()\\]|\\[\s\S])*\)/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\[(?:[^\[\]\\]|\\[\s\S])*\]/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?<(?:[^<>\\]|\\[\s\S])*>/, inside: { interpolation: n } }, { pattern: /("|')(#\{[^}]+\}|\\(?:\r?\n|\r)|\\?.)*?\1/, inside: { interpolation: n } }];
	}(Prism);
	Prism.languages.css.selector = { pattern: /[^\{\}\s][^\{\}]*(?=\s*\{)/, inside: { "pseudo-element": /:(?:after|before|first-letter|first-line|selection)|::[-\w]+/, "pseudo-class": /:[-\w]+(?:\(.*\))?/, "class": /\.[-:\.\w]+/, id: /#[-:\.\w]+/ } }, Prism.languages.insertBefore("css", "function", { hexcode: /#[\da-f]{3,6}/i, entity: /\\[\da-f]{1,8}/i, number: /[\d%\.]+/ });
	Prism.languages.git = { comment: /^#.*/m, deleted: /^[-–].*/m, inserted: /^\+.*/m, string: /("|')(\\?.)*?\1/m, command: { pattern: /^.*\$ git .*$/m, inside: { parameter: /\s(--|-)\w+/m } }, coord: /^@@.*@@$/m, commit_sha1: /^commit \w{40}$/m };
	Prism.languages.go = Prism.languages.extend("clike", { keyword: /\b(break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/, builtin: /\b(bool|byte|complex(64|128)|error|float(32|64)|rune|string|u?int(8|16|32|64|)|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(ln)?|real|recover)\b/, "boolean": /\b(_|iota|nil|true|false)\b/, operator: /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./, number: /\b(-?(0x[a-f\d]+|(\d+\.?\d*|\.\d+)(e[-+]?\d+)?)i?)\b/i, string: /("|'|`)(\\?.|\r|\n)*?\1/ }), delete Prism.languages.go["class-name"];
	Prism.languages.java = Prism.languages.extend("clike", { keyword: /\b(abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\b/, number: /\b0b[01]+\b|\b0x[\da-f]*\.?[\da-fp\-]+\b|\b\d*\.?\d+(?:e[+-]?\d+)?[df]?\b/i, operator: { pattern: /(^|[^.])(?:\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\|[|=]?|\*=?|\/=?|%=?|\^=?|[?:~])/m, lookbehind: !0 } }), Prism.languages.insertBefore("java", "function", { annotation: { alias: "punctuation", pattern: /(^|[^.])@\w+/, lookbehind: !0 } });
	Prism.languages.json = { property: /".*?"(?=\s*:)/gi, string: /"(?!:)(\\?[^"])*?"(?!:)/g, number: /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/g, punctuation: /[{}[\]);,]/g, operator: /:/g, "boolean": /\b(true|false)\b/gi, "null": /\bnull\b/gi }, Prism.languages.jsonp = Prism.languages.json;
	Prism.languages.less = Prism.languages.extend("css", { comment: [/\/\*[\w\W]*?\*\//, { pattern: /(^|[^\\])\/\/.*/, lookbehind: !0 }], atrule: { pattern: /@[\w-]+?(?:\([^{}]+\)|[^(){};])*?(?=\s*\{)/i, inside: { punctuation: /[:()]/ } }, selector: { pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\([^{}]*\)|[^{};@])*?(?=\s*\{)/, inside: { variable: /@+[\w-]+/ } }, property: /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/i, punctuation: /[{}();:,]/, operator: /[+\-*\/]/ }), Prism.languages.insertBefore("less", "punctuation", { "function": Prism.languages.less.function }), Prism.languages.insertBefore("less", "property", { variable: [{ pattern: /@[\w-]+\s*:/, inside: { punctuation: /:/ } }, /@@?[\w-]+/], "mixin-usage": { pattern: /([{;]\s*)[.#](?!\d)[\w-]+.*?(?=[(;])/, lookbehind: !0, alias: "function" } });
	Prism.languages.markdown = Prism.languages.extend("markup", {}), Prism.languages.insertBefore("markdown", "prolog", { blockquote: { pattern: /^>(?:[\t ]*>)*/m, alias: "punctuation" }, code: [{ pattern: /^(?: {4}|\t).+/m, alias: "keyword" }, { pattern: /``.+?``|`[^`\n]+`/, alias: "keyword" }], title: [{ pattern: /\w+.*(?:\r?\n|\r)(?:==+|--+)/, alias: "important", inside: { punctuation: /==+$|--+$/ } }, { pattern: /(^\s*)#+.+/m, lookbehind: !0, alias: "important", inside: { punctuation: /^#+|#+$/ } }], hr: { pattern: /(^\s*)([*-])([\t ]*\2){2,}(?=\s*$)/m, lookbehind: !0, alias: "punctuation" }, list: { pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m, lookbehind: !0, alias: "punctuation" }, "url-reference": { pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/, inside: { variable: { pattern: /^(!?\[)[^\]]+/, lookbehind: !0 }, string: /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/, punctuation: /^[\[\]!:]|[<>]/ }, alias: "url" }, bold: { pattern: /(^|[^\\])(\*\*|__)(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^\*\*|^__|\*\*$|__$/ } }, italic: { pattern: /(^|[^\\])([*_])(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^[*_]|[*_]$/ } }, url: { pattern: /!?\[[^\]]+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)| ?\[[^\]\n]*\])/, inside: { variable: { pattern: /(!?\[)[^\]]+(?=\]$)/, lookbehind: !0 }, string: { pattern: /"(?:\\.|[^"\\])*"(?=\)$)/ } } } }), Prism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic), Prism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold);
	Prism.languages.perl = { comment: [{ pattern: /(^\s*)=\w+[\s\S]*?=cut.*/m, lookbehind: !0 }, { pattern: /(^|[^\\$])#.*/, lookbehind: !0 }], string: [/\b(?:q|qq|qx|qw)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1/, /\b(?:q|qq|qx|qw)\s+([a-zA-Z0-9])(?:[^\\]|\\[\s\S])*?\1/, /\b(?:q|qq|qx|qw)\s*\((?:[^()\\]|\\[\s\S])*\)/, /\b(?:q|qq|qx|qw)\s*\{(?:[^{}\\]|\\[\s\S])*\}/, /\b(?:q|qq|qx|qw)\s*\[(?:[^[\]\\]|\\[\s\S])*\]/, /\b(?:q|qq|qx|qw)\s*<(?:[^<>\\]|\\[\s\S])*>/, /("|`)(?:[^\\]|\\[\s\S])*?\1/, /'(?:[^'\\\r\n]|\\.)*'/], regex: [/\b(?:m|qr)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1[msixpodualngc]*/, /\b(?:m|qr)\s+([a-zA-Z0-9])(?:[^\\]|\\.)*?\1[msixpodualngc]*/, /\b(?:m|qr)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngc]*/, /\b(?:m|qr)\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngc]*/, /\b(?:m|qr)\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngc]*/, /\b(?:m|qr)\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngc]*/, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\2(?:[^\\]|\\[\s\S])*?\2[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s+([a-zA-Z0-9])(?:[^\\]|\\[\s\S])*?\2(?:[^\\]|\\[\s\S])*?\2[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\((?:[^()\\]|\\[\s\S])*\)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\{(?:[^{}\\]|\\[\s\S])*\}\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\[(?:[^[\]\\]|\\[\s\S])*\]\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*<(?:[^<>\\]|\\[\s\S])*>\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngcer]*/, lookbehind: !0 }, /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\b))/], variable: [/[&*$@%]\{\^[A-Z]+\}/, /[&*$@%]\^[A-Z_]/, /[&*$@%]#?(?=\{)/, /[&*$@%]#?((::)*'?(?!\d)[\w$]+)+(::)*/i, /[&*$@%]\d+/, /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/], filehandle: { pattern: /<(?![<=])\S*>|\b_\b/, alias: "symbol" }, vstring: { pattern: /v\d+(\.\d+)*|\d+(\.\d+){2,}/, alias: "string" }, "function": { pattern: /sub [a-z0-9_]+/i, inside: { keyword: /sub/ } }, keyword: /\b(any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\b/, number: /\b-?(0x[\dA-Fa-f](_?[\dA-Fa-f])*|0b[01](_?[01])*|(\d(_?\d)*)?\.?\d(_?\d)*([Ee][+-]?\d+)?)\b/, operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\b/, punctuation: /[{}[\];(),:]/ };
	Prism.languages.php = Prism.languages.extend("clike", { keyword: /\b(and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\b/i, constant: /\b[A-Z0-9_]{2,}\b/, comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0 } }), Prism.languages.insertBefore("php", "class-name", { "shell-comment": { pattern: /(^|[^\\])#.*/, lookbehind: !0, alias: "comment" } }), Prism.languages.insertBefore("php", "keyword", { delimiter: /\?>|<\?(?:php)?/i, variable: /\$\w+\b/i, "package": { pattern: /(\\|namespace\s+|use\s+)[\w\\]+/, lookbehind: !0, inside: { punctuation: /\\/ } } }), Prism.languages.insertBefore("php", "operator", { property: { pattern: /(->)[\w]+/, lookbehind: !0 } }), Prism.languages.markup && (Prism.hooks.add("before-highlight", function (e) {
	  "php" === e.language && (e.tokenStack = [], e.backupCode = e.code, e.code = e.code.replace(/(?:<\?php|<\?)[\w\W]*?(?:\?>)/gi, function (a) {
	    return e.tokenStack.push(a), "{{{PHP" + e.tokenStack.length + "}}}";
	  }));
	}), Prism.hooks.add("before-insert", function (e) {
	  "php" === e.language && (e.code = e.backupCode, delete e.backupCode);
	}), Prism.hooks.add("after-highlight", function (e) {
	  if ("php" === e.language) {
	    for (var a, n = 0; a = e.tokenStack[n]; n++) {
	      e.highlightedCode = e.highlightedCode.replace("{{{PHP" + (n + 1) + "}}}", Prism.highlight(a, e.grammar, "php").replace(/\$/g, "$$$$"));
	    }e.element.innerHTML = e.highlightedCode;
	  }
	}), Prism.hooks.add("wrap", function (e) {
	  "php" === e.language && "markup" === e.type && (e.content = e.content.replace(/(\{\{\{PHP[0-9]+\}\}\})/g, '<span class="token php">$1</span>'));
	}), Prism.languages.insertBefore("php", "comment", { markup: { pattern: /<[^?]\/?(.*?)>/, inside: Prism.languages.markup }, php: /\{\{\{PHP[0-9]+\}\}\}/ }));
	Prism.languages.insertBefore("php", "variable", { "this": /\$this\b/, global: /\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)/, scope: { pattern: /\b[\w\\]+::/, inside: { keyword: /(static|self|parent)/, punctuation: /(::|\\)/ } } });
	Prism.languages.python = { "triple-quoted-string": { pattern: /"""[\s\S]+?"""|'''[\s\S]+?'''/, alias: "string" }, comment: { pattern: /(^|[^\\])#.*/, lookbehind: !0 }, string: { pattern: /("|')(?:\\\\|\\?[^\\\r\n])*?\1/, greedy: !0 }, "function": { pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_][a-zA-Z0-9_]*(?=\()/g, lookbehind: !0 }, "class-name": { pattern: /(\bclass\s+)[a-z0-9_]+/i, lookbehind: !0 }, keyword: /\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|with|yield)\b/, "boolean": /\b(?:True|False)\b/, number: /\b-?(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i, operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not)\b/, punctuation: /[{}[\];(),.:]/ };
	!function (a) {
	  var e = a.util.clone(a.languages.javascript);a.languages.jsx = a.languages.extend("markup", e), a.languages.jsx.tag.pattern = /<\/?[\w\.:-]+\s*(?:\s+[\w\.:-]+(?:=(?:("|')(\\?[\w\W])*?\1|[^\s'">=]+|(\{[\w\W]*?\})))?\s*)*\/?>/i, a.languages.jsx.tag.inside["attr-value"].pattern = /=[^\{](?:('|")[\w\W]*?(\1)|[^\s>]+)/i;var s = a.util.clone(a.languages.jsx);delete s.punctuation, s = a.languages.insertBefore("jsx", "operator", { punctuation: /=(?={)|[{}[\];(),.:]/ }, { jsx: s }), a.languages.insertBefore("inside", "attr-value", { script: { pattern: /=(\{(?:\{[^}]*\}|[^}])+\})/i, inside: s, alias: "language-javascript" } }, a.languages.jsx.tag);
	}(Prism);
	Prism.languages.scss = Prism.languages.extend("css", { comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0 }, atrule: { pattern: /@[\w-]+(?:\([^()]+\)|[^(])*?(?=\s+[{;])/, inside: { rule: /@[\w-]+/ } }, url: /(?:[-a-z]+-)*url(?=\()/i, selector: { pattern: /(?=\S)[^@;\{\}\(\)]?([^@;\{\}\(\)]|&|#\{\$[-_\w]+\})+(?=\s*\{(\}|\s|[^\}]+(:|\{)[^\}]+))/m, inside: { placeholder: /%[-_\w]+/ } } }), Prism.languages.insertBefore("scss", "atrule", { keyword: [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, { pattern: /( +)(?:from|through)(?= )/, lookbehind: !0 }] }), Prism.languages.insertBefore("scss", "property", { variable: /\$[-_\w]+|#\{\$[-_\w]+\}/ }), Prism.languages.insertBefore("scss", "function", { placeholder: { pattern: /%[-_\w]+/, alias: "selector" }, statement: /\B!(?:default|optional)\b/i, "boolean": /\b(?:true|false)\b/, "null": /\bnull\b/, operator: { pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|or|not)(?=\s)/, lookbehind: !0 } }), Prism.languages.scss.atrule.inside.rest = Prism.util.clone(Prism.languages.scss);
	Prism.languages.sql = { comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|(?:--|\/\/|#).*)/, lookbehind: !0 }, string: { pattern: /(^|[^@\\])("|')(?:\\?[\s\S])*?\2/, lookbehind: !0 }, variable: /@[\w.$]+|@("|'|`)(?:\\?[\s\S])+?\1/, "function": /\b(?:COUNT|SUM|AVG|MIN|MAX|FIRST|LAST|UCASE|LCASE|MID|LEN|ROUND|NOW|FORMAT)(?=\s*\()/i, keyword: /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR VARYING|CHARACTER (?:SET|VARYING)|CHARSET|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COLUMNS|COMMENT|COMMIT|COMMITTED|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|DATA(?:BASES?)?|DATETIME|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE(?: PRECISION)?|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE KEY|ELSE|ENABLE|ENCLOSED BY|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPE(?:D BY)?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTO|INVOKER|ISOLATION LEVEL|JOIN|KEYS?|KILL|LANGUAGE SQL|LAST|LEFT|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MODIFIES SQL DATA|MODIFY|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL(?: CHAR VARYING| CHARACTER(?: VARYING)?| VARCHAR)?|NATURAL|NCHAR(?: VARCHAR)?|NEXT|NO(?: SQL|CHECK|CYCLE)?|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READ(?:S SQL DATA|TEXT)?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEATABLE|REPLICATION|REQUIRE|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE MODE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|START(?:ING BY)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED BY|TEXT(?:SIZE)?|THEN|TIMESTAMP|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNPIVOT|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?)\b/i, "boolean": /\b(?:TRUE|FALSE|NULL)\b/i, number: /\b-?(?:0x)?\d*\.?[\da-f]+\b/, operator: /[-+*\/=%^~]|&&?|\|?\||!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i, punctuation: /[;[\]()`,.]/ };
	Prism.languages.swift = Prism.languages.extend("clike", { string: { pattern: /("|')(\\(?:\((?:[^()]|\([^)]+\))+\)|\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: !0, inside: { interpolation: { pattern: /\\\((?:[^()]|\([^)]+\))+\)/, inside: { delimiter: { pattern: /^\\\(|\)$/, alias: "variable" } } } } }, keyword: /\b(as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|Protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\b/, number: /\b([\d_]+(\.[\de_]+)?|0x[a-f0-9_]+(\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i, constant: /\b(nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/, atrule: /@\b(IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\b/, builtin: /\b([A-Z]\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\b/ }), Prism.languages.swift.string.inside.interpolation.inside.rest = Prism.util.clone(Prism.languages.swift);
	!function () {
	  "undefined" != typeof self && self.Prism && self.document && Prism.hooks.add("complete", function (e) {
	    if (e.code) {
	      var t = e.element.parentNode,
	          s = /\s*\bline-numbers\b\s*/;if (t && /pre/i.test(t.nodeName) && (s.test(t.className) || s.test(e.element.className)) && !e.element.querySelector(".line-numbers-rows")) {
	        s.test(e.element.className) && (e.element.className = e.element.className.replace(s, "")), s.test(t.className) || (t.className += " line-numbers");var n,
	            a = e.code.match(/\n(?!$)/g),
	            l = a ? a.length + 1 : 1,
	            m = new Array(l + 1);m = m.join("<span></span>"), n = document.createElement("span"), n.className = "line-numbers-rows", n.innerHTML = m, t.hasAttribute("data-start") && (t.style.counterReset = "linenumber " + (parseInt(t.getAttribute("data-start"), 10) - 1)), e.element.appendChild(n);
	      }
	    }
	  });
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * ghostHunter - 0.3.1
	 * Copyright (C) 2014 Jamal Neufeld (jamal@i11u.me)
	 * MIT Licensed
	 * @license
	 */
	(function ($) {
	
		/* The lunr 0.7.0 library is included here to perform the fulltext searching. lunr is copyright (C) 2016 Oliver Nightingale. MIT Licensed */
		var lunr = function lunr(t) {
			var e = new lunr.Index();return e.pipeline.add(lunr.stopWordFilter, lunr.stemmer), t && t.call(e, e), e;
		};lunr.version = "0.4.3", "undefined" != typeof module && (module.exports = lunr), lunr.utils = {}, lunr.utils.warn = function (t) {
			return function (e) {
				t.console && console.warn && console.warn(e);
			};
		}(this), lunr.utils.zeroFillArray = function () {
			var t = [0];return function (e) {
				for (; e > t.length;) {
					t = t.concat(t);
				}return t.slice(0, e);
			};
		}(), lunr.EventEmitter = function () {
			this.events = {};
		}, lunr.EventEmitter.prototype.addListener = function () {
			var t = Array.prototype.slice.call(arguments),
			    e = t.pop(),
			    n = t;if ("function" != typeof e) throw new TypeError("last argument must be a function");n.forEach(function (t) {
				this.hasHandler(t) || (this.events[t] = []), this.events[t].push(e);
			}, this);
		}, lunr.EventEmitter.prototype.removeListener = function (t, e) {
			if (this.hasHandler(t)) {
				var n = this.events[t].indexOf(e);this.events[t].splice(n, 1), this.events[t].length || delete this.events[t];
			}
		}, lunr.EventEmitter.prototype.emit = function (t) {
			if (this.hasHandler(t)) {
				var e = Array.prototype.slice.call(arguments, 1);this.events[t].forEach(function (t) {
					t.apply(void 0, e);
				});
			}
		}, lunr.EventEmitter.prototype.hasHandler = function (t) {
			return t in this.events;
		}, lunr.tokenizer = function (t) {
			if (!arguments.length || null == t || void 0 == t) return [];if (Array.isArray(t)) return t.map(function (t) {
				return t.toLowerCase();
			});for (var e = ("" + t).replace(/^\s+/, ""), n = e.length - 1; n >= 0; n--) {
				if (/\S/.test(e.charAt(n))) {
					e = e.substring(0, n + 1);break;
				}
			}return e.split(/\s+/).map(function (t) {
				return t.replace(/^\W+/, "").replace(/\W+$/, "").toLowerCase();
			});
		}, lunr.Pipeline = function () {
			this._stack = [];
		}, lunr.Pipeline.registeredFunctions = {}, lunr.Pipeline.registerFunction = function (t, e) {
			e in this.registeredFunctions && lunr.utils.warn("Overwriting existing registered function: " + e), t.label = e, lunr.Pipeline.registeredFunctions[t.label] = t;
		}, lunr.Pipeline.warnIfFunctionNotRegistered = function (t) {
			var e = t.label && t.label in this.registeredFunctions;e || lunr.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n", t);
		}, lunr.Pipeline.load = function (t) {
			var e = new lunr.Pipeline();return t.forEach(function (t) {
				var n = lunr.Pipeline.registeredFunctions[t];if (!n) throw Error("Cannot load un-registered function: " + t);e.add(n);
			}), e;
		}, lunr.Pipeline.prototype.add = function () {
			var t = Array.prototype.slice.call(arguments);t.forEach(function (t) {
				lunr.Pipeline.warnIfFunctionNotRegistered(t), this._stack.push(t);
			}, this);
		}, lunr.Pipeline.prototype.after = function (t, e) {
			lunr.Pipeline.warnIfFunctionNotRegistered(e);var n = this._stack.indexOf(t) + 1;this._stack.splice(n, 0, e);
		}, lunr.Pipeline.prototype.before = function (t, e) {
			lunr.Pipeline.warnIfFunctionNotRegistered(e);var n = this._stack.indexOf(t);this._stack.splice(n, 0, e);
		}, lunr.Pipeline.prototype.remove = function (t) {
			var e = this._stack.indexOf(t);this._stack.splice(e, 1);
		}, lunr.Pipeline.prototype.run = function (t) {
			for (var e = [], n = t.length, r = this._stack.length, o = 0; n > o; o++) {
				for (var i = t[o], s = 0; r > s && (i = this._stack[s](i, o, t), void 0 !== i); s++) {}void 0 !== i && e.push(i);
			}return e;
		}, lunr.Pipeline.prototype.toJSON = function () {
			return this._stack.map(function (t) {
				return lunr.Pipeline.warnIfFunctionNotRegistered(t), t.label;
			});
		}, lunr.Vector = function (t) {
			this.elements = t;
		}, lunr.Vector.prototype.magnitude = function () {
			if (this._magnitude) return this._magnitude;for (var t, e = 0, n = this.elements, r = n.length, o = 0; r > o; o++) {
				t = n[o], e += t * t;
			}return this._magnitude = Math.sqrt(e);
		}, lunr.Vector.prototype.dot = function (t) {
			for (var e = this.elements, n = t.elements, r = e.length, o = 0, i = 0; r > i; i++) {
				o += e[i] * n[i];
			}return o;
		}, lunr.Vector.prototype.similarity = function (t) {
			return this.dot(t) / (this.magnitude() * t.magnitude());
		}, lunr.Vector.prototype.toArray = function () {
			return this.elements;
		}, lunr.SortedSet = function () {
			this.length = 0, this.elements = [];
		}, lunr.SortedSet.load = function (t) {
			var e = new this();return e.elements = t, e.length = t.length, e;
		}, lunr.SortedSet.prototype.add = function () {
			Array.prototype.slice.call(arguments).forEach(function (t) {
				~this.indexOf(t) || this.elements.splice(this.locationFor(t), 0, t);
			}, this), this.length = this.elements.length;
		}, lunr.SortedSet.prototype.toArray = function () {
			return this.elements.slice();
		}, lunr.SortedSet.prototype.map = function (t, e) {
			return this.elements.map(t, e);
		}, lunr.SortedSet.prototype.forEach = function (t, e) {
			return this.elements.forEach(t, e);
		}, lunr.SortedSet.prototype.indexOf = function (t, e, n) {
			var e = e || 0,
			    n = n || this.elements.length,
			    r = n - e,
			    o = e + Math.floor(r / 2),
			    i = this.elements[o];return 1 >= r ? i === t ? o : -1 : t > i ? this.indexOf(t, o, n) : i > t ? this.indexOf(t, e, o) : i === t ? o : void 0;
		}, lunr.SortedSet.prototype.locationFor = function (t, e, n) {
			var e = e || 0,
			    n = n || this.elements.length,
			    r = n - e,
			    o = e + Math.floor(r / 2),
			    i = this.elements[o];if (1 >= r) {
				if (i > t) return o;if (t > i) return o + 1;
			}return t > i ? this.locationFor(t, o, n) : i > t ? this.locationFor(t, e, o) : void 0;
		}, lunr.SortedSet.prototype.intersect = function (t) {
			for (var e = new lunr.SortedSet(), n = 0, r = 0, o = this.length, i = t.length, s = this.elements, l = t.elements;;) {
				if (n > o - 1 || r > i - 1) break;s[n] !== l[r] ? s[n] < l[r] ? n++ : s[n] > l[r] && r++ : (e.add(s[n]), n++, r++);
			}return e;
		}, lunr.SortedSet.prototype.clone = function () {
			var t = new lunr.SortedSet();return t.elements = this.toArray(), t.length = t.elements.length, t;
		}, lunr.SortedSet.prototype.union = function (t) {
			var e, n, r;return this.length >= t.length ? (e = this, n = t) : (e = t, n = this), r = e.clone(), r.add.apply(r, n.toArray()), r;
		}, lunr.SortedSet.prototype.toJSON = function () {
			return this.toArray();
		}, lunr.Index = function () {
			this._fields = [], this._ref = "id", this.pipeline = new lunr.Pipeline(), this.documentStore = new lunr.Store(), this.tokenStore = new lunr.TokenStore(), this.corpusTokens = new lunr.SortedSet(), this.eventEmitter = new lunr.EventEmitter(), this._idfCache = {}, this.on("add", "remove", "update", function () {
				this._idfCache = {};
			}.bind(this));
		}, lunr.Index.prototype.on = function () {
			var t = Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter, t);
		}, lunr.Index.prototype.off = function (t, e) {
			return this.eventEmitter.removeListener(t, e);
		}, lunr.Index.load = function (t) {
			t.version !== lunr.version && lunr.utils.warn("version mismatch: current " + lunr.version + " importing " + t.version);var e = new this();return e._fields = t.fields, e._ref = t.ref, e.documentStore = lunr.Store.load(t.documentStore), e.tokenStore = lunr.TokenStore.load(t.tokenStore), e.corpusTokens = lunr.SortedSet.load(t.corpusTokens), e.pipeline = lunr.Pipeline.load(t.pipeline), e;
		}, lunr.Index.prototype.field = function (t, e) {
			var e = e || {},
			    n = { name: t, boost: e.boost || 1 };return this._fields.push(n), this;
		}, lunr.Index.prototype.ref = function (t) {
			return this._ref = t, this;
		}, lunr.Index.prototype.add = function (t, e) {
			var n = {},
			    r = new lunr.SortedSet(),
			    o = t[this._ref],
			    e = void 0 === e ? !0 : e;this._fields.forEach(function (e) {
				var o = this.pipeline.run(lunr.tokenizer(t[e.name]));n[e.name] = o, lunr.SortedSet.prototype.add.apply(r, o);
			}, this), this.documentStore.set(o, r), lunr.SortedSet.prototype.add.apply(this.corpusTokens, r.toArray());for (var i = 0; r.length > i; i++) {
				var s = r.elements[i],
				    l = this._fields.reduce(function (t, e) {
					var r = n[e.name].length;if (!r) return t;var o = n[e.name].filter(function (t) {
						return t === s;
					}).length;return t + o / r * e.boost;
				}, 0);this.tokenStore.add(s, { ref: o, tf: l });
			}e && this.eventEmitter.emit("add", t, this);
		}, lunr.Index.prototype.remove = function (t, e) {
			var n = t[this._ref],
			    e = void 0 === e ? !0 : e;if (this.documentStore.has(n)) {
				var r = this.documentStore.get(n);this.documentStore.remove(n), r.forEach(function (t) {
					this.tokenStore.remove(t, n);
				}, this), e && this.eventEmitter.emit("remove", t, this);
			}
		}, lunr.Index.prototype.update = function (t, e) {
			var e = void 0 === e ? !0 : e;this.remove(t, !1), this.add(t, !1), e && this.eventEmitter.emit("update", t, this);
		}, lunr.Index.prototype.idf = function (t) {
			if (this._idfCache[t]) return this._idfCache[t];var e = this.tokenStore.count(t),
			    n = 1;return e > 0 && (n = 1 + Math.log(this.tokenStore.length / e)), this._idfCache[t] = n;
		}, lunr.Index.prototype.search = function (t) {
			var e = this.pipeline.run(lunr.tokenizer(t)),
			    n = lunr.utils.zeroFillArray(this.corpusTokens.length),
			    r = [],
			    o = this._fields.reduce(function (t, e) {
				return t + e.boost;
			}, 0),
			    i = e.some(function (t) {
				return this.tokenStore.has(t);
			}, this);if (!i) return [];e.forEach(function (t, e, i) {
				var s = 1 / i.length * this._fields.length * o,
				    l = this,
				    u = this.tokenStore.expand(t).reduce(function (e, r) {
					var o = l.corpusTokens.indexOf(r),
					    i = l.idf(r),
					    u = 1,
					    a = new lunr.SortedSet();if (r !== t) {
						var h = Math.max(3, r.length - t.length);u = 1 / Math.log(h);
					}return o > -1 && (n[o] = s * i * u), Object.keys(l.tokenStore.get(r)).forEach(function (t) {
						a.add(t);
					}), e.union(a);
				}, new lunr.SortedSet());r.push(u);
			}, this);var s = r.reduce(function (t, e) {
				return t.intersect(e);
			}),
			    l = new lunr.Vector(n);return s.map(function (t) {
				return { ref: t, score: l.similarity(this.documentVector(t)) };
			}, this).sort(function (t, e) {
				return e.score - t.score;
			});
		}, lunr.Index.prototype.documentVector = function (t) {
			for (var e = this.documentStore.get(t), n = e.length, r = lunr.utils.zeroFillArray(this.corpusTokens.length), o = 0; n > o; o++) {
				var i = e.elements[o],
				    s = this.tokenStore.get(i)[t].tf,
				    l = this.idf(i);r[this.corpusTokens.indexOf(i)] = s * l;
			}return new lunr.Vector(r);
		}, lunr.Index.prototype.toJSON = function () {
			return { version: lunr.version, fields: this._fields, ref: this._ref, documentStore: this.documentStore.toJSON(), tokenStore: this.tokenStore.toJSON(), corpusTokens: this.corpusTokens.toJSON(), pipeline: this.pipeline.toJSON() };
		}, lunr.Store = function () {
			this.store = {}, this.length = 0;
		}, lunr.Store.load = function (t) {
			var e = new this();return e.length = t.length, e.store = Object.keys(t.store).reduce(function (e, n) {
				return e[n] = lunr.SortedSet.load(t.store[n]), e;
			}, {}), e;
		}, lunr.Store.prototype.set = function (t, e) {
			this.store[t] = e, this.length = Object.keys(this.store).length;
		}, lunr.Store.prototype.get = function (t) {
			return this.store[t];
		}, lunr.Store.prototype.has = function (t) {
			return t in this.store;
		}, lunr.Store.prototype.remove = function (t) {
			this.has(t) && (delete this.store[t], this.length--);
		}, lunr.Store.prototype.toJSON = function () {
			return { store: this.store, length: this.length };
		}, lunr.stemmer = function () {
			var t = { ational: "ate", tional: "tion", enci: "ence", anci: "ance", izer: "ize", bli: "ble", alli: "al", entli: "ent", eli: "e", ousli: "ous", ization: "ize", ation: "ate", ator: "ate", alism: "al", iveness: "ive", fulness: "ful", ousness: "ous", aliti: "al", iviti: "ive", biliti: "ble", logi: "log" },
			    e = { icate: "ic", ative: "", alize: "al", iciti: "ic", ical: "ic", ful: "", ness: "" },
			    n = "[^aeiou]",
			    r = "[aeiouy]",
			    o = n + "[^aeiouy]*",
			    i = r + "[aeiou]*",
			    s = "^(" + o + ")?" + i + o,
			    l = "^(" + o + ")?" + i + o + "(" + i + ")?$",
			    u = "^(" + o + ")?" + i + o + i + o,
			    a = "^(" + o + ")?" + r;return function (n) {
				var i, h, c, p, f, d, v;if (3 > n.length) return n;if (c = n.substr(0, 1), "y" == c && (n = c.toUpperCase() + n.substr(1)), p = /^(.+?)(ss|i)es$/, f = /^(.+?)([^s])s$/, p.test(n) ? n = n.replace(p, "$1$2") : f.test(n) && (n = n.replace(f, "$1$2")), p = /^(.+?)eed$/, f = /^(.+?)(ed|ing)$/, p.test(n)) {
					var m = p.exec(n);p = RegExp(s), p.test(m[1]) && (p = /.$/, n = n.replace(p, ""));
				} else if (f.test(n)) {
					var m = f.exec(n);i = m[1], f = RegExp(a), f.test(i) && (n = i, f = /(at|bl|iz)$/, d = RegExp("([^aeiouylsz])\\1$"), v = RegExp("^" + o + r + "[^aeiouwxy]$"), f.test(n) ? n += "e" : d.test(n) ? (p = /.$/, n = n.replace(p, "")) : v.test(n) && (n += "e"));
				}if (p = /^(.+?)y$/, p.test(n)) {
					var m = p.exec(n);i = m[1], p = RegExp(a), p.test(i) && (n = i + "i");
				}if (p = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/, p.test(n)) {
					var m = p.exec(n);i = m[1], h = m[2], p = RegExp(s), p.test(i) && (n = i + t[h]);
				}if (p = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/, p.test(n)) {
					var m = p.exec(n);i = m[1], h = m[2], p = RegExp(s), p.test(i) && (n = i + e[h]);
				}if (p = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/, f = /^(.+?)(s|t)(ion)$/, p.test(n)) {
					var m = p.exec(n);i = m[1], p = RegExp(u), p.test(i) && (n = i);
				} else if (f.test(n)) {
					var m = f.exec(n);i = m[1] + m[2], f = RegExp(u), f.test(i) && (n = i);
				}if (p = /^(.+?)e$/, p.test(n)) {
					var m = p.exec(n);i = m[1], p = RegExp(u), f = RegExp(l), d = RegExp("^" + o + r + "[^aeiouwxy]$"), (p.test(i) || f.test(i) && !d.test(i)) && (n = i);
				}return p = /ll$/, f = RegExp(u), p.test(n) && f.test(n) && (p = /.$/, n = n.replace(p, "")), "y" == c && (n = c.toLowerCase() + n.substr(1)), n;
			};
		}(), lunr.Pipeline.registerFunction(lunr.stemmer, "stemmer"), lunr.stopWordFilter = function (t) {
			return -1 === lunr.stopWordFilter.stopWords.indexOf(t) ? t : void 0;
		}, lunr.stopWordFilter.stopWords = new lunr.SortedSet(), lunr.stopWordFilter.stopWords.length = 119, lunr.stopWordFilter.stopWords.elements = ["", "a", "able", "about", "across", "after", "all", "almost", "also", "am", "among", "an", "and", "any", "are", "as", "at", "be", "because", "been", "but", "by", "can", "cannot", "could", "dear", "did", "do", "does", "either", "else", "ever", "every", "for", "from", "get", "got", "had", "has", "have", "he", "her", "hers", "him", "his", "how", "however", "i", "if", "in", "into", "is", "it", "its", "just", "least", "let", "like", "likely", "may", "me", "might", "most", "must", "my", "neither", "no", "nor", "not", "of", "off", "often", "on", "only", "or", "other", "our", "own", "rather", "said", "say", "says", "she", "should", "since", "so", "some", "than", "that", "the", "their", "them", "then", "there", "these", "they", "this", "tis", "to", "too", "twas", "us", "wants", "was", "we", "were", "what", "when", "where", "which", "while", "who", "whom", "why", "will", "with", "would", "yet", "you", "your"], lunr.Pipeline.registerFunction(lunr.stopWordFilter, "stopWordFilter"), lunr.TokenStore = function () {
			this.root = { docs: {} }, this.length = 0;
		}, lunr.TokenStore.load = function (t) {
			var e = new this();return e.root = t.root, e.length = t.length, e;
		}, lunr.TokenStore.prototype.add = function (t, e, n) {
			var n = n || this.root,
			    r = t[0],
			    o = t.slice(1);return r in n || (n[r] = { docs: {} }), 0 === o.length ? (n[r].docs[e.ref] = e, this.length += 1, void 0) : this.add(o, e, n[r]);
		}, lunr.TokenStore.prototype.has = function (t) {
			if (!t) return !1;for (var e = this.root, n = 0; t.length > n; n++) {
				if (!e[t[n]]) return !1;e = e[t[n]];
			}return !0;
		}, lunr.TokenStore.prototype.getNode = function (t) {
			if (!t) return {};for (var e = this.root, n = 0; t.length > n; n++) {
				if (!e[t[n]]) return {};e = e[t[n]];
			}return e;
		}, lunr.TokenStore.prototype.get = function (t, e) {
			return this.getNode(t, e).docs || {};
		}, lunr.TokenStore.prototype.count = function (t, e) {
			return Object.keys(this.get(t, e)).length;
		}, lunr.TokenStore.prototype.remove = function (t, e) {
			if (t) {
				for (var n = this.root, r = 0; t.length > r; r++) {
					if (!(t[r] in n)) return;n = n[t[r]];
				}delete n.docs[e];
			}
		}, lunr.TokenStore.prototype.expand = function (t, e) {
			var n = this.getNode(t),
			    r = n.docs || {},
			    e = e || [];return Object.keys(r).length && e.push(t), Object.keys(n).forEach(function (n) {
				"docs" !== n && e.concat(this.expand(t + n, e));
			}, this), e;
		}, lunr.TokenStore.prototype.toJSON = function () {
			return { root: this.root, length: this.length };
		};
	
		//This is the main plugin definition
		$.fn.ghostHunter = function (options) {
	
			//Here we use jQuery's extend to set default values if they weren't set by the user
			var opts = $.extend({}, $.fn.ghostHunter.defaults, options);
			if (opts.results) {
				pluginMethods.init(this, opts);
				return pluginMethods;
			}
		};
	
		$.fn.ghostHunter.defaults = {
			results: false,
			onKeyUp: false,
			result_template: "<a href='{{link}}'><p><h2>{{title}}</h2><h4>{{prettyPubDate}}</h4></p></a>",
			info_template: "<p>Number of posts found: {{amount}}</p>",
			displaySearchInfo: true,
			zeroResultsInfo: true,
			before: false,
			onComplete: false
		};
	
		var prettyDate = function prettyDate(date) {
			var d = new Date(date);
			var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
			return d.getDate() + ' ' + monthNames[d.getMonth()] + ' ' + d.getFullYear();
		};
	
		var pluginMethods = {
	
			isInit: false,
	
			init: function init(target, opts) {
	
				var that = this;
				this.target = target;
				this.results = opts.results;
				this.blogData = {};
				this.result_template = opts.result_template;
				this.info_template = opts.info_template;
				this.zeroResultsInfo = opts.zeroResultsInfo;
				this.displaySearchInfo = opts.displaySearchInfo;
				this.before = opts.before;
				this.onComplete = opts.onComplete;
	
				//This is where we'll build the index for later searching. It's not a big deal to build it on every load as it takes almost no space without data
				this.index = lunr(function () {
					this.field('title', { boost: 10 });
					this.field('description');
					this.field('link');
					this.field('markdown', { boost: 5 });
					this.field('pubDate');
					this.field('tag');
					this.ref('id');
				});
	
				target.focus(function () {
					that.loadAPI();
				});
	
				target.closest("form").submit(function (e) {
					e.preventDefault();
					that.find(target.val());
				});
	
				if (opts.onKeyUp) {
					that.loadAPI();
					target.keyup(function () {
						that.find(target.val());
					});
				}
			},
	
			loadAPI: function loadAPI() {
	
				if (this.isInit) return false;
	
				/*	Here we load all of the blog posts to the index.
	   	This function will not call on load to avoid unnecessary heavy
	   	operations on a page if a visitor never ends up searching anything. */
	
				var index = this.index,
				    blogData = this.blogData;
	
				$.get(ghost.url.api('posts', { limit: "all", include: "tags" })).done(function (data) {
					var searchData = data.posts;
					searchData.forEach(function (arrayItem) {
						var tag_arr = arrayItem.tags.map(function (v) {
							return v.name; // `tag` object has an `name` property which is the value of tag. If you also want other info, check API and get that property
						});
						var category = tag_arr.join(", ");
						if (category.length < 1) {
							category = "undefined";
						}
						var parsedData = {
							id: String(arrayItem.id),
							title: String(arrayItem.title),
							description: String(arrayItem.meta_description),
							markdown: String(arrayItem.markdown),
							pubDate: String(arrayItem.created_at),
							tag: category,
							link: String(arrayItem.url)
						};
	
						parsedData.prettyPubDate = prettyDate(parsedData.pubDate);
						var tempdate = prettyDate(parsedData.pubDate);
	
						index.add(parsedData);
						blogData[arrayItem.id] = { title: arrayItem.title, description: arrayItem.meta_description, pubDate: tempdate, link: arrayItem.url };
					});
				});
	
				this.isInit = true;
			},
	
			find: function find(value) {
				var searchResult = this.index.search(value);
				var results = $(this.results);
				var resultsData = [];
				results.empty();
	
				if (this.before) {
					this.before();
				};
	
				if (this.zeroResultsInfo || searchResult.length > 0) {
					if (this.displaySearchInfo) results.append(this.format(this.info_template, { "amount": searchResult.length }));
				}
	
				for (var i = 0; i < searchResult.length; i++) {
					var lunrref = searchResult[i].ref;
					var postData = this.blogData[lunrref];
					results.append(this.format(this.result_template, postData));
					resultsData.push(postData);
				}
	
				if (this.onComplete) {
					this.onComplete(resultsData);
				};
			},
	
			clear: function clear() {
				$(this.results).empty();
				this.target.val("");
			},
	
			format: function format(t, d) {
				return t.replace(/{{([^{}]*)}}/g, function (a, b) {
					var r = d[b];
					return typeof r === 'string' || typeof r === 'number' ? r : a;
				});
			}
		};
	})(jQuery);

/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
	* @package godofredoninja
	* Share social media
	*/
	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GodoShare = function () {
		function GodoShare(elem) {
			_classCallCheck(this, GodoShare);
	
			this.elem = elem;
		}
	
		/**
	    *  @function godoValue
	    *  @description Helper to get the attribute of a DOM element
	    *  @param {String} attr DOM element attribute
	    *  @returns {String|Empty} returns the attr value or empty string
	    */
	
	
		_createClass(GodoShare, [{
			key: 'godoValue',
			value: function godoValue(a) {
				var val = this.elem.attr('godo-' + a);
				return val === undefined || val === null ? false : val;
			}
	
			/**
	      * @event godoShare
	      * @description Main share event. Will pop a window or redirect to a link
	      */
	
		}, {
			key: 'godoShare',
			value: function godoShare() {
				var share_name = this.godoValue('share').toLowerCase(),
				    share_social = {
					facebook: {
						shareUrl: 'https://www.facebook.com/sharer/sharer.php',
						params: { u: this.godoValue('url') }
					},
					twitter: {
						shareUrl: 'https://twitter.com/intent/tweet/',
						params: {
							text: this.godoValue('title'),
							url: this.godoValue('url')
						}
					},
					reddit: {
						shareUrl: 'https://www.reddit.com/submit',
						params: { 'url': this.godoValue('url') }
					},
					pinterest: {
						shareUrl: 'https://www.pinterest.com/pin/create/button/',
						params: {
							url: this.godoValue('url'),
							description: this.godoValue('title')
						}
					},
					pocket: {
						shareUrl: 'https://getpocket.com/save',
						params: {
							url: this.godoValue('url')
						}
					}
				},
				    s = share_social[share_name];
	
				return s !== undefined ? this.godoPopup(s) : false;
			}
	
			/**
	      * @event godoPopup
	      * @param {Object} share
	      */
	
		}, {
			key: 'godoPopup',
			value: function godoPopup(share) {
				var p = share.params || {},
				    keys = Object.keys(p),
				    i,
				    str = keys.length > 0 ? '?' : '';
	
				for (i = 0; i < keys.length; i++) {
					if (str !== '?') {
						str += '&';
					}
					if (p[keys[i]]) {
						str += keys[i] + '=' + encodeURIComponent(p[keys[i]]);
					}
				}
	
				share.shareUrl += str;
	
				if (!share.isLink) {
					var popWidth = share.width || 600,
					    popHeight = share.height || 480,
					    left = window.innerWidth / 2 - popWidth / 2 + window.screenX,
					    top = window.innerHeight / 2 - popHeight / 2 + window.screenY,
					    popParams = 'scrollbars=no, width=' + popWidth + ', height=' + popHeight + ', top=' + top + ', left=' + left,
					    newWindow = window.open(share.shareUrl, '', popParams);
	
					if (window.focus) {
						newWindow.focus();
					}
				} else {
					window.location.href = share.shareUrl;
				}
			}
		}]);
	
		return GodoShare;
	}();
	
	module.exports = GodoShare;

/***/ },
/* 4 */
/***/ function(module, exports) {

	/*
	* @package godofredoninja
	*  Share count social media
	*/
	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GodoShareCount = function () {
		function GodoShareCount(elem) {
			_classCallCheck(this, GodoShareCount);
	
			this.elem = elem;
			this.url = elem.attr('data-url');
			this.total = 0;
		}
	
		/**
	  * @function convertNumber
	  * @description  Return rounded and pretty value of share count.
	  */
	
	
		_createClass(GodoShareCount, [{
			key: 'convertNumber',
			value: function convertNumber(n) {
				if (n >= 1000000000) return (n / 1000000000).toFixed(1) + 'G';
				if (n >= 1000000) return (n / 1000000).toFixed(1) + 'M';
				if (n >= 1000) return (n / 1000).toFixed(1) + 'K';
				return n;
			}
	
			/**
	   * @function updateCounter
	   * @description  adds all the number of shared pages
	   */
	
		}, {
			key: 'addCounter',
			value: function addCounter(n) {
				this.total = this.total + n;
			}
	
			/**
	   * @function updateCounter
	   * @description  update the number of shares.
	   */
	
		}, {
			key: 'updateCounter',
			value: function updateCounter() {
				this.elem.html('<span style="margin-right:5px"><strong>' + this.convertNumber(this.total) + '</strong></span><span>Shares</span>');
			}
		}, {
			key: 'godoCount',
			value: function godoCount() {
				var _this = this;
	
				$.getJSON('https://graph.facebook.com/?id=' + encodeURIComponent(this.url) + '&callback=?', function (response) {
					if (response.shares === undefined) _this.addCounter(0);else _this.addCounter(response.shares);
					_this.updateCounter();
				});
			}
		}]);
	
		return GodoShareCount;
	}();
	
	module.exports = GodoShareCount;

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	$(document).on('ready', function () {
	    var page = 2;
	    var $pagination = $('#pagination');
	
	    /**
	     * If not exist pagination remove element
	     */
	    if ($pagination.attr('mapache-page') == 1) {
	        $pagination.remove();
	    }
	
	    $pagination.on('click', function (e) {
	        e.preventDefault();
	        var that = $(this);
	        var pageTotal = that.attr('mapache-page'),
	            pageLimit = that.attr('mapache-limit'),
	            urlPage = $('link[rel=canonical]').attr('href'),
	            url = urlPage + '/page/' + page;
	
	        that.addClass('loading').find('.text').slideUp(320);
	        that.find('.pagination-icon').addClass('spin');
	
	        if (page <= pageTotal) {
	
	            fetch(url).then(function (res) {
	                return res.text();
	            }).then(function (body) {
	
	                setTimeout(function () {
	                    var entries = $('.entry-list', body);
	                    $('#entry').append(entries);
	                    that.removeClass('loading').find('.text').slideDown(320);
	                    that.find('.pagination-icon').removeClass('spin');
	                    page++;
	                }, 800);
	            });
	        } else {
	            that.html('<h3>You reached the end of the line!</h3><p>No more posts to load.');
	        }
	    });
	});

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var mapacheRelated = function () {
	    function mapacheRelated(elem) {
	        _classCallCheck(this, mapacheRelated);
	
	        this.elem = elem;
	        this.postID = elem.attr('mapache-post-id');
	        this.postTotal = elem.attr('mapache-post-total');
	        this.postTags = elem.attr('mapache-tag');
	        this.urlApi = ghost.url.api('posts', { include: 'tags' });
	        this.count = 0;
	    }
	
	    /**
	     * Display Post
	     * @method mapacheCallback
	     * @param  {res} All post Json
	     * @return {html} Append in #related-wrap
	     */
	
	
	    _createClass(mapacheRelated, [{
	        key: 'mapacheCallback',
	        value: function mapacheCallback(res) {
	            var _this = this;
	
	            var html = '';
	            res.forEach(function (post) {
	                for (var i = 0; i < post.tags.length; i++) {
	                    if (post.tags[i].id == _this.postTags && post.id != _this.postID) {
	                        if (_this.count < _this.postTotal) {
	                            html += _this.mapacheTemplate(post);
	                            _this.count++;
	                        }
	                    }
	                }
	            });
	
	            if (this.count == 0) {
	                this.elem.css('display', 'none');
	            }
	
	            $('#related-wrap').html(html);
	        }
	
	        /**
	         * Template related post
	         * @method mapacheTemplate
	         * @param  {post} Content Json post
	         * @return {html} content related post
	         */
	
	    }, {
	        key: 'mapacheTemplate',
	        value: function mapacheTemplate(post) {
	            var html = '',
	                post_image = '',
	                post_no_cover = 'no-image',
	                post_title = post.title,
	                post_url = post.url;
	
	            if (post.image != null) {
	                post_image = '\n            <figure class="image">\n                <a href="' + post_url + '" class="image-link">\n                    <span class="entries-bg" style="background-image:url(' + post.image + ')"></span>\n                </a>\n            </figure>';
	
	                post_no_cover = '';
	            }
	
	            html = '\n        <div class="col m4 ' + post_no_cover + '">\n            <div class="related-posts-list">\n                ' + post_image + '\n                <h2 class="title"><a href="' + post_url + '">' + post_title + '</a></h2>\n            </div>\n        </div>';
	
	            return html;
	        }
	
	        /**
	         * Get api ghost
	         * @method mapacheGet
	         * @return {res} Json all Post
	         */
	
	    }, {
	        key: 'mapacheGet',
	        value: function mapacheGet() {
	            var _this2 = this;
	
	            fetch(this.urlApi).then(function (res) {
	                return res.json();
	            }).then(function (json) {
	                _this2.mapacheCallback(json.posts);
	            });
	        }
	    }]);
	
	    return mapacheRelated;
	}();
	
	module.exports = mapacheRelated;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(8);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(14)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/resolve-url-loader/index.js!./../../node_modules/autoprefixer-loader/index.js?browsers=last 3 versions!./../../node_modules/sass-loader/index.js?outputStyle=expanded!./main.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/resolve-url-loader/index.js!./../../node_modules/autoprefixer-loader/index.js?browsers=last 3 versions!./../../node_modules/sass-loader/index.js?outputStyle=expanded!./main.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports
	exports.i(__webpack_require__(10), "");
	
	// module
	exports.push([module.id, "@charset \"UTF-8\";\n\n/*\n\t@package godofredoninja\n*/\n\n/* Normalize and icon fonts (libraries)\n========================================================================== */\n\n@font-face {\n  font-family: 'mapache';\n  src: url(" + __webpack_require__(11) + ") format(\"truetype\"), url(" + __webpack_require__(12) + ") format(\"woff\"), url(" + __webpack_require__(13) + ") format(\"svg\");\n  font-weight: normal;\n  font-style: normal;\n}\n\n[class^=\"i-\"]:before,\n[class*=\" i-\"]:before {\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: 'mapache' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.i-download:before {\n  content: \"\\E900\";\n}\n\n.i-cloud_download:before {\n  content: \"\\E2C0\";\n}\n\n.i-star:before {\n  content: \"\\E838\";\n}\n\n.i-keyboard_arrow_up:before {\n  content: \"\\E316\";\n}\n\n.i-open_in_new:before {\n  content: \"\\E89E\";\n}\n\n.i-warning:before {\n  content: \"\\E002\";\n}\n\n.i-back:before {\n  content: \"\\E5C4\";\n}\n\n.i-forward:before {\n  content: \"\\E5C8\";\n}\n\n.i-chat:before {\n  content: \"\\E0CB\";\n}\n\n.i-close:before {\n  content: \"\\E5CD\";\n}\n\n.i-code:before {\n  content: \"\\E86F\";\n}\n\n.i-favorite:before {\n  content: \"\\E87D\";\n}\n\n.i-link:before {\n  content: \"\\E157\";\n}\n\n.i-menu:before {\n  content: \"\\E5D2\";\n}\n\n.i-feed:before {\n  content: \"\\E0E5\";\n}\n\n.i-search:before {\n  content: \"\\E8B6\";\n}\n\n.i-share:before {\n  content: \"\\E80D\";\n}\n\n.i-check_circle:before {\n  content: \"\\E86C\";\n}\n\n.i-spinner:before {\n  content: \"\\E984\";\n}\n\n.i-github:before {\n  content: \"\\F09B\";\n}\n\n.i-linkedin:before {\n  content: \"\\F0E1\";\n}\n\n.i-flickr:before {\n  content: \"\\F16E\";\n}\n\n.i-dribbble:before {\n  content: \"\\F17D\";\n}\n\n.i-pinterest:before {\n  content: \"\\F231\";\n}\n\n.i-map:before {\n  content: \"\\F041\";\n}\n\n.i-twitter:before {\n  content: \"\\F099\";\n}\n\n.i-facebook:before {\n  content: \"\\F09A\";\n}\n\n.i-youtube:before {\n  content: \"\\F16A\";\n}\n\n.i-instagram:before {\n  content: \"\\F16D\";\n}\n\n.i-google:before {\n  content: \"\\F1A0\";\n}\n\n.i-pocket:before {\n  content: \"\\F265\";\n}\n\n.i-reddit:before {\n  content: \"\\F281\";\n}\n\n.i-snapchat:before {\n  content: \"\\F2AC\";\n}\n\n/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+aspnet+bash+c+csharp+cpp+ruby+css-extras+git+go+java+json+less+markdown+perl+php+php-extras+python+jsx+scss+sql+swift&plugins=line-numbers */\n\n/**\r\n * prism.js default theme for JavaScript, CSS and HTML\r\n * Based on dabblet (http://dabblet.com)\r\n * @author Lea Verou\r\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n  color: black;\n  background: none;\n  text-shadow: 0 1px white;\n  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  word-wrap: normal;\n  line-height: 1.5;\n  -moz-tab-size: 4;\n  tab-size: 4;\n  -webkit-hyphens: none;\n  -ms-hyphens: none;\n  hyphens: none;\n}\n\npre[class*=\"language-\"]::-moz-selection,\npre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection,\ncode[class*=\"language-\"] ::-moz-selection {\n  text-shadow: none;\n  background: #b3d4fc;\n}\n\npre[class*=\"language-\"]::selection,\npre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection,\ncode[class*=\"language-\"] ::selection {\n  text-shadow: none;\n  background: #b3d4fc;\n}\n\n@media print {\n  code[class*=\"language-\"],\n  pre[class*=\"language-\"] {\n    text-shadow: none;\n  }\n}\n\n/* Code blocks */\n\npre[class*=\"language-\"] {\n  padding: 1em;\n  margin: .5em 0;\n  overflow: auto;\n}\n\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n  background: #f5f2f0;\n}\n\n/* Inline code */\n\n:not(pre) > code[class*=\"language-\"] {\n  padding: .1em;\n  border-radius: .3em;\n  white-space: normal;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: slategray;\n}\n\n.token.punctuation {\n  color: #999;\n}\n\n.namespace {\n  opacity: .7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: #905;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n  color: #690;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n  color: #a67f59;\n  background: rgba(255, 255, 255, 0.5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n  color: #07a;\n}\n\n.token.function {\n  color: #DD4A68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n  color: #e90;\n}\n\n.token.important,\n.token.bold {\n  font-weight: bold;\n}\n\n.token.italic {\n  font-style: italic;\n}\n\n.token.entity {\n  cursor: help;\n}\n\npre.line-numbers {\n  position: relative;\n  padding-left: 3.8em;\n  counter-reset: linenumber;\n}\n\npre.line-numbers > code {\n  position: relative;\n}\n\n.line-numbers .line-numbers-rows {\n  position: absolute;\n  pointer-events: none;\n  top: 0;\n  font-size: 100%;\n  left: -3.8em;\n  width: 3em;\n  /* works for line-numbers below 1000 lines */\n  letter-spacing: -1px;\n  border-right: 1px solid #999;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.line-numbers-rows > span {\n  pointer-events: none;\n  display: block;\n  counter-increment: linenumber;\n}\n\n.line-numbers-rows > span:before {\n  content: counter(linenumber);\n  color: #999;\n  display: block;\n  padding-right: 0.8em;\n  text-align: right;\n}\n\n/* Mixins & Variables\n========================================================================== */\n\n/*\n@package godofredoninja\n\n\t========================================================================\n\t\tMapache variables styles\n\t========================================================================\n*/\n\n/**\n * Table of Contents:\n *\n *\t\t1. Colors\n */\n\n/* 1. Colors\n========================================================================== */\n\n/* 2. Fonts\n========================================================================== */\n\n/* 3. Typography\n========================================================================== */\n\n/* 4. Header\n========================================================================== */\n\n/* 4. Footer\n========================================================================== */\n\n/* 4. Code Syntax\n========================================================================== */\n\n/* 3. buttons\n========================================================================== */\n\n/* 5. container\n========================================================================== */\n\n/* 10. Grid\n========================================================================== */\n\n/* 11. Media Query Ranges\n========================================================================== */\n\n/* 11. icons\n========================================================================== */\n\n.header.toolbar-shadow {\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);\n}\n\na.external:after,\n.warning:before,\n.note:before,\n.success:before,\n.btn.btn-download-cloud:after,\n.btn.btn-download:after {\n  font-family: 'mapache' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.full-height {\n  height: 100vh;\n}\n\n.u-unstyled {\n  padding-left: 0;\n  list-style: none;\n  margin: 0;\n}\n\n@media only screen and (max-width: 766px) {\n  .hide-before-md {\n    display: none !important;\n  }\n}\n\n@media only screen and (max-width: 992px) {\n  .hide-before-lg {\n    display: none !important;\n  }\n}\n\n@media only screen and (min-width: 766px) {\n  .hide-after-md {\n    display: none !important;\n  }\n}\n\n@media only screen and (min-width: 992px) {\n  .hide-after-lg {\n    display: none !important;\n  }\n}\n\n/* Structure\n========================================================================== */\n\nhtml {\n  box-sizing: border-box;\n  font-size: 16px;\n  -webkit-tap-highlight-color: transparent;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: border-box;\n}\n\n[mapache-state~=no-scroll] {\n  height: 100%;\n  overflow: hidden;\n}\n\na {\n  color: #4285f4;\n  outline: 0;\n  text-decoration: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\na:focus {\n  text-decoration: none;\n  background-color: transparent;\n}\n\na.external:after {\n  content: \"\\E89E\";\n  margin-left: 5px;\n}\n\nbody {\n  color: #333;\n  font-family: \"Roboto\", sans-serif;\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\nfigure {\n  margin: 0;\n}\n\nimg {\n  height: auto;\n  max-width: 100%;\n  vertical-align: middle;\n  width: auto;\n}\n\nimg:not([src]) {\n  visibility: hidden;\n}\n\n.img-responsive {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n\ni {\n  display: inline-block;\n  vertical-align: middle;\n}\n\nhr {\n  margin: 1.8rem 0;\n  border: 0;\n  border-top: 1px solid #DDDDDD;\n  height: 0;\n}\n\nblockquote {\n  border-left: 3px solid #4285f4;\n  padding: 10px 24px;\n  background: #fbfbfc;\n  color: #757575;\n  font-size: 17px;\n  line-height: 1.7em;\n  margin-bottom: 20px;\n  margin: 0 0 20px;\n  quotes: none;\n}\n\nol,\nul,\nblockquote {\n  margin-left: 2rem;\n}\n\nstrong {\n  font-weight: 500;\n}\n\nsmall,\n.small {\n  font-size: 85%;\n}\n\nol {\n  padding-left: 40px;\n  list-style: decimal outside;\n}\n\n/* Code Syntax\n========================================================================== */\n\nkbd,\nsamp,\ncode {\n  font-family: \"Fira Mono\", monospace !important;\n  font-size: 0.9375rem;\n  color: #c7254e;\n  background: #f7f7f7;\n  border-radius: 4px;\n  padding: 4px 6px;\n  white-space: pre-wrap;\n}\n\ncode[class*=language-],\npre[class*=language-] {\n  color: #37474f;\n  line-height: 1.5;\n}\n\ncode[class*=language-] .token.comment,\npre[class*=language-] .token.comment {\n  opacity: .8;\n}\n\ncode[class*=language-].line-numbers,\npre[class*=language-].line-numbers {\n  padding-left: 58px;\n}\n\ncode[class*=language-].line-numbers:before,\npre[class*=language-].line-numbers:before {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  top: 0;\n  background: #F0EDEE;\n  width: 40px;\n  height: 100%;\n}\n\ncode[class*=language-] .line-numbers-rows,\npre[class*=language-] .line-numbers-rows {\n  border-right: none;\n  top: -3px;\n  left: -58px;\n}\n\ncode[class*=language-] .line-numbers-rows > span:before,\npre[class*=language-] .line-numbers-rows > span:before {\n  padding-right: 0;\n  text-align: center;\n  opacity: .8;\n}\n\npre {\n  background-color: #f7f7f7 !important;\n  padding: 1rem;\n  overflow: hidden;\n  border-radius: 4px;\n  word-wrap: normal;\n  margin: 2.5rem 0 !important;\n  font-family: \"Fira Mono\", monospace !important;\n  font-size: 0.9375rem;\n}\n\npre code {\n  color: #37474f;\n  text-shadow: 0 1px #fff;\n  padding: 0;\n  background: transparent;\n}\n\ntable {\n  border: 0;\n  border-collapse: collapse;\n  border-spacing: 0;\n  font: 14px/20px Roboto,sans-serif;\n  margin: 16px 0;\n  width: 100%;\n}\n\ntr {\n  background: #757575;\n  border: 0;\n  border-top: 1px solid #e0e0e0;\n}\n\nth {\n  font: 500 16px/24px Roboto,sans-serif;\n  height: 48px;\n  padding: 8px;\n  vertical-align: middle;\n  border: 0;\n  margin: 0;\n  text-align: left;\n  color: #fff;\n}\n\ntd {\n  background: rgba(255, 255, 255, 0.95);\n  vertical-align: top;\n  color: #212121;\n  padding: 7px 8px 8px;\n}\n\ntd:first-child {\n  margin-top: 0;\n}\n\ntd:last-child {\n  margin-bottom: 0;\n}\n\ntd p {\n  line-height: 1.6 !important;\n}\n\n.warning {\n  background: #fbe9e7;\n  color: #d50000;\n}\n\n.warning:before {\n  content: \"\\E002\";\n}\n\n.note {\n  background: #e1f5fe;\n  color: #0288d1;\n}\n\n.note:before {\n  content: \"\\E838\";\n}\n\n.success {\n  background: #e0f2f1;\n  color: #00897b;\n}\n\n.success:before {\n  content: \"\\E86C\";\n  color: #00bfa5;\n}\n\n.warning,\n.note,\n.success {\n  display: block;\n  margin: 1rem 0;\n  font-size: 1rem;\n  padding: 12px 24px 12px 60px;\n  line-height: 1.5;\n}\n\n.warning a,\n.note a,\n.success a {\n  text-decoration: underline;\n  color: inherit;\n}\n\n.warning:before,\n.note:before,\n.success:before {\n  margin-left: -36px;\n  float: left;\n  font-size: 24px;\n}\n\n.vertiacal-aling {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-direction: column;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n\n.vertiacal-aling-wrap {\n  -webkit-flex-grow: 1;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n}\n\n.vertiacal-aling-content {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-direction: column;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  width: 100%;\n  text-align: center;\n}\n\n/* Social icon color and backgrount\n========================================================================== */\n\n.c-facebook {\n  color: #3b5998;\n}\n\n.bg-facebook {\n  background-color: #3b5998 !important;\n}\n\n.c-twitter {\n  color: #55acee;\n}\n\n.bg-twitter {\n  background-color: #55acee !important;\n}\n\n.c-google {\n  color: #dd4b39;\n}\n\n.bg-google {\n  background-color: #dd4b39 !important;\n}\n\n.c-instagram {\n  color: #306088;\n}\n\n.bg-instagram {\n  background-color: #306088 !important;\n}\n\n.c-youtube {\n  color: #e52d27;\n}\n\n.bg-youtube {\n  background-color: #e52d27 !important;\n}\n\n.c-github {\n  color: #333333;\n}\n\n.bg-github {\n  background-color: #333333 !important;\n}\n\n.c-linkedin {\n  color: #007bb6;\n}\n\n.bg-linkedin {\n  background-color: #007bb6 !important;\n}\n\n.c-spotify {\n  color: #2ebd59;\n}\n\n.bg-spotify {\n  background-color: #2ebd59 !important;\n}\n\n.c-codepen {\n  color: #222222;\n}\n\n.bg-codepen {\n  background-color: #222222 !important;\n}\n\n.c-behance {\n  color: #131418;\n}\n\n.bg-behance {\n  background-color: #131418 !important;\n}\n\n.c-dribbble {\n  color: #ea4c89;\n}\n\n.bg-dribbble {\n  background-color: #ea4c89 !important;\n}\n\n.c-flickr {\n  color: #0063DC;\n}\n\n.bg-flickr {\n  background-color: #0063DC !important;\n}\n\n.c-reddit {\n  color: orangered;\n}\n\n.bg-reddit {\n  background-color: orangered !important;\n}\n\n.c-pocket {\n  color: #F50057;\n}\n\n.bg-pocket {\n  background-color: #F50057 !important;\n}\n\n.c-pinterest {\n  color: #bd081c;\n}\n\n.bg-pinterest {\n  background-color: #bd081c !important;\n}\n\n.clear:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.pagination {\n  display: block;\n  text-align: center;\n  padding: 3rem 0;\n  color: #222;\n  opacity: .5;\n  transition: opacity 320ms ease;\n}\n\n.pagination:hover {\n  opacity: 1;\n}\n\n.pagination span {\n  display: block;\n}\n\n.pagination-icon {\n  font-size: 2.5rem;\n}\n\n.pagination .spin {\n  -webkit-animation-name: spin;\n  animation-name: spin;\n  -webkit-animation-duration: 500ms;\n  animation-duration: 500ms;\n  -webkit-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n  -webkit-animation-timing-function: linear;\n  animation-timing-function: linear;\n}\n\n.u-align-center,\n.cover {\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-align: center;\n  -ms-flex-align: center;\n  -webkit-align-items: center;\n  align-items: center;\n  -ms-flex-pack: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n}\n\n.card {\n  border: 0;\n  background: #fff;\n  border-radius: 2px;\n  box-shadow: 0 1px 2px rgba(43, 59, 93, 0.29);\n  margin-bottom: 20px;\n  padding: 1em;\n}\n\n.show-on-medium-screen,\n.show-on-small-screen {\n  display: none;\n}\n\n.mapache {\n  overflow: hidden;\n}\n\n.main {\n  position: relative;\n}\n\n.overlay {\n  background-color: rgba(50, 50, 50, 0.5);\n  bottom: 0;\n  left: 0;\n  opacity: 0;\n  position: fixed;\n  right: 0;\n  top: 0;\n  visibility: hidden;\n  z-index: 59;\n  transition-duration: 0.3s;\n}\n\n/* sidebar\n========================================================================== */\n\n.sidebar {\n  position: relative;\n  color: rgba(0, 0, 0, 0.54);\n  line-height: 1.6;\n}\n\n.sidebar h1,\n.sidebar h2,\n.sidebar h3,\n.sidebar h4,\n.sidebar h5,\n.sidebar h6 {\n  margin-top: 0;\n}\n\n.sidebar .widget {\n  margin-bottom: 2rem;\n  position: relative;\n}\n\n.sidebar .title {\n  background-color: #4285f4;\n  color: #FFFFFF;\n  padding: 10px 16px;\n  font-size: 18px;\n}\n\n.svg-icon {\n  margin: auto;\n  background-repeat: no-repeat no-repeat;\n  display: block;\n  fill: currentcolor;\n}\n\n/* Video Responsive\n========================================================================== */\n\n.video-responsive {\n  position: relative;\n  display: block;\n  height: 0;\n  padding: 0;\n  overflow: hidden;\n  padding-bottom: 56.25%;\n  margin-bottom: 1.5rem;\n}\n\n.video-responsive iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  height: 100%;\n  width: 100%;\n  border: 0;\n}\n\n.fb-post,\n.twitter-tweet {\n  display: block !important;\n  margin: 0 auto 40px auto !important;\n  text-align: center;\n}\n\n.Ads {\n  position: relative;\n  margin: 10px -32px;\n  text-align: center;\n}\n\n.Ads .Ads-content {\n  display: inline-block;\n  vertical-align: top;\n  margin-bottom: 10px;\n  margin-right: 10px;\n  margin-left: 10px;\n}\n\n.container {\n  margin: 0 auto;\n  padding-left: 0.9375rem;\n  padding-right: 0.9375rem;\n  width: 100%;\n}\n\n@media only screen and (min-width: 766px) {\n  .container {\n    max-width: 750px;\n  }\n}\n\n@media only screen and (min-width: 992px) {\n  .container {\n    max-width: 970px;\n  }\n}\n\n@media only screen and (min-width: 1230px) {\n  .container {\n    max-width: 1200px;\n  }\n}\n\n.margin-top {\n  margin-top: 56px;\n  padding-top: 1rem;\n}\n\n@media only screen and (min-width: 766px) {\n  .margin-top {\n    padding-top: 2rem;\n  }\n}\n\n.layout-wrap {\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n}\n\n.layout-row {\n  box-sizing: border-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n[class^=\"col-gd-\"] {\n  min-height: 1px;\n  padding-left: 0.9375rem;\n  padding-right: 0.9375rem;\n}\n\n.col-gd-left,\n.col-gd-right,\n.col-gd-post-image,\n.col-gd-post-meta {\n  width: 100%;\n}\n\n@media only screen and (min-width: 992px) {\n  .col-gd-left {\n    width: 65.98%;\n  }\n\n  .col-gd-right {\n    width: 34.02%;\n  }\n\n  .col-gd-post-image {\n    width: 46.5%;\n  }\n\n  .col-gd-post-meta {\n    width: 53.5%;\n  }\n}\n\n@media only screen and (min-width: 1230px) {\n  .col-gd-left {\n    width: 72.5%;\n  }\n\n  .col-gd-right {\n    width: 27.5%;\n  }\n}\n\n.row {\n  margin-left: -0.9375rem;\n  margin-right: -0.9375rem;\n}\n\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.row .col {\n  float: left;\n  box-sizing: border-box;\n  padding-left: 0.9375rem;\n  padding-right: 0.9375rem;\n}\n\n.row .col.s1 {\n  width: 8.33333%;\n}\n\n.row .col.s2 {\n  width: 16.66667%;\n}\n\n.row .col.s3 {\n  width: 25%;\n}\n\n.row .col.s4 {\n  width: 33.33333%;\n}\n\n.row .col.s5 {\n  width: 41.66667%;\n}\n\n.row .col.s6 {\n  width: 50%;\n}\n\n.row .col.s7 {\n  width: 58.33333%;\n}\n\n.row .col.s8 {\n  width: 66.66667%;\n}\n\n.row .col.s9 {\n  width: 75%;\n}\n\n.row .col.s10 {\n  width: 83.33333%;\n}\n\n.row .col.s11 {\n  width: 91.66667%;\n}\n\n.row .col.s12 {\n  width: 100%;\n}\n\n@media only screen and (min-width: 766px) {\n  .row .col.m1 {\n    width: 8.33333%;\n  }\n\n  .row .col.m2 {\n    width: 16.66667%;\n  }\n\n  .row .col.m3 {\n    width: 25%;\n  }\n\n  .row .col.m4 {\n    width: 33.33333%;\n  }\n\n  .row .col.m5 {\n    width: 41.66667%;\n  }\n\n  .row .col.m6 {\n    width: 50%;\n  }\n\n  .row .col.m7 {\n    width: 58.33333%;\n  }\n\n  .row .col.m8 {\n    width: 66.66667%;\n  }\n\n  .row .col.m9 {\n    width: 75%;\n  }\n\n  .row .col.m10 {\n    width: 83.33333%;\n  }\n\n  .row .col.m11 {\n    width: 91.66667%;\n  }\n\n  .row .col.m12 {\n    width: 100%;\n  }\n}\n\n@media only screen and (min-width: 992px) {\n  .row .col.l1 {\n    width: 8.33333%;\n  }\n\n  .row .col.l2 {\n    width: 16.66667%;\n  }\n\n  .row .col.l3 {\n    width: 25%;\n  }\n\n  .row .col.l4 {\n    width: 33.33333%;\n  }\n\n  .row .col.l5 {\n    width: 41.66667%;\n  }\n\n  .row .col.l6 {\n    width: 50%;\n  }\n\n  .row .col.l7 {\n    width: 58.33333%;\n  }\n\n  .row .col.l8 {\n    width: 66.66667%;\n  }\n\n  .row .col.l9 {\n    width: 75%;\n  }\n\n  .row .col.l10 {\n    width: 83.33333%;\n  }\n\n  .row .col.l11 {\n    width: 91.66667%;\n  }\n\n  .row .col.l12 {\n    width: 100%;\n  }\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\n.h1,\n.h2,\n.h3,\n.h4,\n.h5,\n.h6 {\n  margin-bottom: 0.5rem;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: 500;\n  line-height: 1.1;\n  color: inherit;\n}\n\nh1 {\n  font-size: 2.25rem;\n}\n\nh2 {\n  font-size: 1.875rem;\n}\n\nh3 {\n  font-size: 1.5625rem;\n}\n\nh4 {\n  font-size: 1.375rem;\n}\n\nh5 {\n  font-size: 1.125rem;\n}\n\nh6 {\n  font-size: 1rem;\n}\n\n.h1 {\n  font-size: 2.25rem;\n}\n\n.h2 {\n  font-size: 1.875rem;\n}\n\n.h3 {\n  font-size: 1.5625rem;\n}\n\n.h4 {\n  font-size: 1.375rem;\n}\n\n.h5 {\n  font-size: 1.125rem;\n}\n\n.h6 {\n  font-size: 1rem;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin-bottom: 1rem;\n}\n\nh1 a,\nh2 a,\nh3 a,\nh4 a,\nh5 a,\nh6 a {\n  color: inherit;\n  line-height: inherit;\n}\n\np {\n  margin-top: 0;\n  margin-bottom: 1rem;\n}\n\n.menu-mobile {\n  background: #fff;\n  bottom: 0;\n  box-shadow: 0 9px 18px 0 rgba(0, 0, 0, 0.18);\n  left: 0;\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  width: 256px;\n  z-index: 60;\n  transition-duration: .3s;\n  -webkit-transform: translate3d(-100%, 0, 0);\n  transform: translate3d(-100%, 0, 0);\n  transition: all 0.4s cubic-bezier(0.25, 0.8, 0.58, 1);\n}\n\n.menu-mobile.open {\n  -webkit-transform: translate3d(0%, 0, 0);\n  transform: translate3d(0%, 0, 0);\n}\n\n.menu-mobile-wrap {\n  height: 100%;\n  margin-bottom: 10px;\n  overflow-y: auto;\n  padding-bottom: 8px;\n  width: 100%;\n  padding-top: 1rem;\n}\n\n.menu-mobile .navigation-link {\n  color: #333;\n  display: block;\n  font-size: 14px;\n  font-weight: 500;\n  height: 48px;\n  line-height: 50px;\n  opacity: .85;\n  overflow: hidden;\n  padding: 0 12px 0 20px;\n  transition: background-color 0.3s cubic-bezier(0, 0, 0.2, 1);\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.menu-mobile .navigation-link.active,\n.menu-mobile .navigation-link:hover {\n  background-color: #e7e7e7;\n}\n\n.menu-mobile-text {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-break: break-all;\n  -webkit-user-select: none;\n}\n\n.header {\n  background: #4285f4;\n  height: 56px;\n  left: 0;\n  position: fixed;\n  right: 0;\n  z-index: 50;\n  color: #fff;\n}\n\n.header [class*=\" i-\"]:before,\n.header [class^=i-]:before {\n  font-size: 1.5rem;\n}\n\n.header-btn {\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px !important;\n  border-radius: 50%;\n}\n\n.header-btn:hover {\n  background: rgba(0, 0, 0, 0.12);\n}\n\n.header .menu-open {\n  margin-left: -0.625rem;\n  margin-right: 0.5rem;\n}\n\n.header .search-btn {\n  margin-right: -.625rem;\n}\n\n.header a {\n  height: 56px;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  color: inherit;\n}\n\n.header-wrap {\n  height: 56px;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  padding-left: 0.9375rem;\n  padding-right: 0.9375rem;\n  position: relative;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  margin: 0 auto;\n  max-width: 1400px;\n}\n\n.header-topbar:not(.toolbar-shadow) {\n  background-color: transparent !important;\n}\n\n.header-logo span {\n  font-size: 1.25rem;\n  font-weight: 500;\n}\n\n.header-logo img {\n  max-height: 35px;\n  position: relative;\n}\n\n/* Navigation\n========================================================================== */\n\n.header-navigation {\n  margin-left: 48px;\n  display: inline-block;\n  -webkit-flex: 1 1 auto;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  overflow-y: auto;\n  vertical-align: top;\n  transition: margin .2s,width .2s,-webkit-flex .2s;\n  transition: flex .2s,margin .2s,width .2s;\n  transition: flex .2s,margin .2s,width .2s,-webkit-flex .2s,-ms-flex .2s;\n}\n\n.header-navigation-wrap {\n  left: 0px;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  overflow: hidden;\n}\n\n.header-navigation .navigation-link {\n  border-bottom: 2px solid transparent;\n  font-weight: 400;\n  margin: 0;\n  padding: 0 1rem;\n  transition: color .2s;\n  font-size: 0.875rem;\n}\n\n.header-navigation .navigation-link:hover {\n  color: rgba(255, 255, 255, 0.8);\n}\n\n.header-navigation .navigation-link.active {\n  border-bottom-color: #fff;\n  font-weight: 500;\n}\n\n/* Header search\n========================================================================== */\n\n.header-search {\n  background: #f7f7f7;\n  border-radius: 2px;\n  display: inline-block;\n  -webkit-flex: 0 0 auto;\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  height: 36px;\n  position: relative;\n  text-align: left;\n  transition: background .2s,-webkit-flex .2s;\n  transition: background .2s,flex .2s;\n  transition: background .2s,flex .2s,-webkit-flex .2s,-ms-flex .2s;\n  vertical-align: top;\n  box-shadow: 0 1px 1.5px rgba(0, 0, 0, 0.06), 0 1px 1px rgba(0, 0, 0, 0.12);\n  margin-left: 1.5rem;\n  margin-right: 1.5rem;\n}\n\n.header-search .search-icon {\n  color: #757575;\n  left: 24px;\n  position: absolute;\n  top: 6px;\n  transition: color .2s;\n}\n\ninput.search-field {\n  background: 0;\n  border: 0;\n  color: #212121;\n  height: 36px;\n  padding: 8px 8px 8px 72px;\n  transition: color .2s;\n  width: 100%;\n}\n\ninput.search-field:focus {\n  border: 0;\n  outline: none;\n}\n\n.search-popout {\n  background: #fff;\n  box-shadow: 0 0 2px rgba(0, 0, 0, 0.12), 0 2px 4px rgba(0, 0, 0, 0.24), inset 0 4px 6px -4px rgba(0, 0, 0, 0.24);\n  margin-top: 10px;\n  max-height: calc(100vh - 48px);\n  overflow-y: auto;\n  position: absolute;\n  width: 100%;\n  z-index: -1;\n}\n\n.search-popout.closed {\n  visibility: hidden;\n}\n\n.search-suggest-results {\n  padding: 8px 8px 8px 75px;\n}\n\n.search-suggest-results a {\n  color: #212121;\n  display: block;\n  margin-left: -8px;\n  outline: 0;\n  height: 36px;\n  padding: 8px;\n  transition: background .2s;\n  font-size: 0.875rem;\n}\n\n.search-suggest-results a:hover {\n  background: #f7f7f7;\n}\n\n/* header social\n========================================================================== */\n\n.header-social {\n  -webkit-flex: 0 0 auto;\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.header-social a {\n  padding: 0 8px;\n}\n\n.header-social a:hover {\n  color: rgba(255, 255, 255, 0.8);\n}\n\n.header-social a:before {\n  font-size: 1.25rem !important;\n}\n\n/* mediaquery medium\n========================================================================== */\n\n@media only screen and (min-width: 766px) {\n  .header-navigation {\n    -webkit-flex: 1 1 0;\n    -ms-flex: 1 1 0;\n    flex: 1 1 0;\n    visibility: visible;\n    margin-left: 48px;\n  }\n\n  .header-search {\n    background: rgba(255, 255, 255, 0.25);\n    width: 200px;\n    color: #fff;\n  }\n\n  .header-search:hover {\n    background: rgba(255, 255, 255, 0.4);\n  }\n\n  .header-search input[placeholder],\n  .header-search .search-icon {\n    color: #fff;\n  }\n\n  .header.search-active .header-search {\n    background: #f7f7f7;\n    max-width: 100%;\n    -webkit-flex: 1 0 auto;\n    -ms-flex: 1 0 auto;\n    flex: 1 0 auto;\n  }\n\n  .header.search-active .header-search:hover {\n    background: #f7f7f7;\n  }\n\n  .header.search-active .header-search input {\n    color: #212121 !important;\n  }\n\n  .header.search-active .header-search .search-icon {\n    color: #757575;\n  }\n\n  .header.search-active .header-navigation {\n    -webkit-flex: 0 0 auto;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    margin: 0;\n    visibility: hidden;\n    width: 0;\n  }\n}\n\n@media only screen and (max-width: 766px) {\n  .responsive-search-open .header-logo,\n  .responsive-search-open .header-navigation {\n    display: none;\n  }\n\n  .responsive-search-open .header-search {\n    display: inline-block !important;\n    -webkit-flex: 1 1 auto;\n    -ms-flex: 1 1 auto;\n    flex: 1 1 auto;\n    margin: 0;\n  }\n}\n\n.cover {\n  background: #4285f4;\n  color: #fff;\n  letter-spacing: .2px;\n  height: 65vh;\n  position: relative;\n  text-shadow: 0 0 10px rgba(0, 0, 0, 0.33);\n  z-index: 2;\n}\n\n.cover.full-height {\n  height: 100vh;\n}\n\n.cover-wrap {\n  margin: 0 auto;\n  max-width: 700px;\n  padding: 16px;\n  position: relative;\n  text-align: center;\n  z-index: 99;\n}\n\n.cover-title {\n  font-size: 3rem;\n  margin: 0 0 30px 0;\n  line-height: 1.2;\n}\n\n.cover .mouse {\n  width: 25px;\n  position: absolute;\n  height: 36px;\n  border-radius: 15px;\n  border: 2px solid #888;\n  border: 2px solid rgba(255, 255, 255, 0.27);\n  bottom: 40px;\n  right: 40px;\n  margin-left: -12px;\n  cursor: pointer;\n  transition: border-color 0.2s ease-in;\n}\n\n.cover .mouse .scroll {\n  display: block;\n  margin: 6px auto;\n  width: 3px;\n  height: 6px;\n  border-radius: 4px;\n  background: rgba(255, 255, 255, 0.68);\n  -webkit-animation-duration: 2s;\n  animation-duration: 2s;\n  -webkit-animation-name: scroll;\n  animation-name: scroll;\n  -webkit-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n}\n\n.cover .background {\n  position: absolute;\n  overflow: hidden;\n  background-size: cover;\n  background-position: center;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n\n.cover .background:before {\n  display: block;\n  content: ' ';\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.6);\n  background: -webkit-gradient(linear, left top, left bottom, from(rgba(0, 0, 0, 0.1)), to(rgba(0, 0, 0, 0.7)));\n}\n\n.author .info {\n  overflow: hidden;\n  margin-top: 10%;\n}\n\n.author .name-wrap {\n  display: inline-block;\n}\n\n.author .title {\n  display: block;\n  text-transform: uppercase;\n}\n\n.author .name {\n  margin: 5px 0;\n  font-size: 1.75rem;\n}\n\n.author .description {\n  margin: 1.5rem 0;\n  line-height: 1.8;\n  font-size: 18px;\n}\n\n.author .avatar {\n  display: inline-block;\n  border-radius: 90px;\n  margin-right: 5%;\n  width: 80px;\n  height: 80px;\n  background-size: cover;\n  background-position: center;\n  vertical-align: bottom;\n}\n\n.author-meta {\n  overflow: hidden;\n  display: inline-block;\n  margin-bottom: 2.5rem;\n  margin-top: 1rem;\n  text-align: center;\n  padding: 0;\n}\n\n.author-meta span {\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0 10px;\n}\n\n.author-meta a {\n  color: inherit;\n  background: transparent;\n}\n\n@media only screen and (min-width: 766px) {\n  .cover-description {\n    font-size: 1.25rem;\n  }\n}\n\n.entries {\n  margin-bottom: 1.5rem;\n  padding-bottom: 0;\n  border-bottom: solid 1px #EEE;\n}\n\n.entries .image {\n  margin-bottom: 10px;\n}\n\n.entries .image-link {\n  line-height: 0;\n  display: block;\n  margin: 0;\n  overflow: hidden;\n}\n\n.entries .image img {\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  height: auto;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.entries .tag {\n  margin-bottom: 5px;\n  text-transform: capitalize;\n  font-size: 0.875rem;\n  line-height: 1;\n}\n\n.entries .tag a:hover {\n  color: #1266f1;\n}\n\n.entries .title {\n  font-size: 1.25rem;\n  color: rgba(0, 0, 0, 0.8);\n  margin: 0 0 1rem;\n  padding: 0;\n  height: auto;\n  line-height: 1.3;\n  font-weight: 400;\n}\n\n.entries .title:hover {\n  color: #777;\n}\n\n.entries .meta-author-date {\n  margin-top: 0;\n  margin-bottom: 1.125rem;\n}\n\n.entries-bg {\n  display: block;\n  width: 100%;\n  position: relative;\n  height: 100%;\n  background-position: center;\n  background-size: cover;\n}\n\n@media only screen and (min-width: 992px) {\n  .entries {\n    margin-bottom: 2rem;\n    padding-bottom: 2rem;\n  }\n\n  .entries .title {\n    font-size: 1.625rem;\n  }\n\n  .entries .image {\n    margin-bottom: 0;\n  }\n\n  .entries .image-link {\n    height: 180px;\n  }\n}\n\n@media only screen and (min-width: 1230px) {\n  .entries .image-link {\n    height: 250px;\n  }\n}\n\n.footer {\n  background: #303c42;\n  text-align: center;\n  line-height: 1;\n  color: #cfd8dc;\n}\n\n.footer a {\n  color: #ffffff;\n}\n\n.footer-wrap {\n  overflow: auto;\n  padding: 14px 24px;\n  margin: 0 auto;\n  max-width: 1400px;\n}\n\n.footer .heart {\n  color: #ff5b5b;\n  -webkit-animation: heartify .5s infinite alternate;\n  animation: heartify .5s infinite alternate;\n}\n\n.footer .copy span {\n  display: inline;\n  vertical-align: middle;\n}\n\n.footer .copy,\n.footer .by {\n  margin-top: .5rem;\n  margin-bottom: .5rem;\n}\n\n@media only screen and (min-width: 766px) {\n  .footer .copy {\n    text-align: left;\n  }\n\n  .footer .by {\n    text-align: right;\n  }\n}\n\n@-webkit-keyframes heartify {\n  0% {\n    -webkit-transform: scale(0.8);\n    transform: scale(0.8);\n  }\n}\n\n@keyframes heartify {\n  0% {\n    -webkit-transform: scale(0.8);\n    transform: scale(0.8);\n  }\n}\n\n.btn {\n  background-color: #fff;\n  border-radius: 2px;\n  border: 0;\n  box-shadow: none;\n  color: #4285f4;\n  cursor: pointer;\n  display: inline-block;\n  font: 500 14px/20px \"Roboto\", sans-serif;\n  height: 36px;\n  margin: 0;\n  min-width: 36px;\n  outline: 0;\n  overflow: hidden;\n  padding: 8px;\n  text-align: center;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  text-transform: uppercase;\n  transition: background-color .2s,box-shadow .2s;\n  vertical-align: middle;\n  white-space: nowrap;\n}\n\n.btn + .btn {\n  margin-left: 8px;\n}\n\n.btn:focus,\n.btn:hover {\n  background-color: #dce9fd;\n  text-decoration: none !important;\n}\n\n.btn.btn-primary {\n  background-color: #4285f4;\n  color: #fff;\n}\n\n.btn.btn-primary:hover {\n  background-color: #2f79f3;\n}\n\n.btn.btn-circle {\n  border-radius: 50%;\n  height: 55px;\n  line-height: 55px;\n  padding: 0;\n  width: 55px;\n}\n\n.btn.btn-shadow {\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.12);\n  color: #333;\n  background-color: #eee;\n}\n\n.btn.btn-shadow:hover {\n  background-color: rgba(0, 0, 0, 0.12);\n}\n\n.btn.btn-download-cloud,\n.btn.btn-download {\n  background-color: #4285f4;\n  color: #fff;\n}\n\n.btn.btn-download-cloud:hover,\n.btn.btn-download:hover {\n  background-color: #1b6cf2;\n}\n\n.btn.btn-download-cloud:after,\n.btn.btn-download:after {\n  margin-left: 5px;\n  font-size: 1.1rem;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.btn.btn-download:after {\n  content: \"\\E900\";\n}\n\n.btn.btn-download-cloud:after {\n  content: \"\\E2C0\";\n}\n\n.btn.external:after {\n  font-size: 1rem;\n}\n\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n\n.form-control {\n  width: 100%;\n  padding: 8px 12px;\n  font-size: 14px;\n  line-height: 1.42857;\n  color: #555;\n  background-color: #fff;\n  background-image: none;\n  border: 1px solid #ccc;\n  border-radius: 0px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s;\n  height: 36px;\n}\n\n.form-control:focus {\n  border-color: #4285f4;\n  outline: 0;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(66, 133, 244, 0.6);\n}\n\n/*  Post\n========================================================================== */\n\n.post .title {\n  margin: 0 0 0.625rem;\n  font-size: 1.75rem;\n  line-height: 1.2;\n  padding: 0;\n  height: auto;\n}\n\n.post img {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.post p.excerpt {\n  line-height: 1.3;\n  font-size: 1.25rem;\n  color: #7D7D7D;\n  margin-bottom: 10px;\n}\n\n.post-image {\n  margin-bottom: 1.45rem;\n  overflow: hidden;\n}\n\n.post-content {\n  color: #424242;\n}\n\n.post-content h2 {\n  border-bottom: 1px solid #ebebeb;\n  font-weight: 300;\n  margin: 2.50rem 0 1.25rem;\n  padding-bottom: 3px;\n}\n\n.post-content h3,\n.post-content h4 {\n  margin: 32px 0 16px;\n}\n\n.post-content a:focus {\n  text-decoration: underline;\n}\n\n.post .tags {\n  margin: 1.25rem 0;\n}\n\n.post .tags .tag {\n  margin: 0 10px 10px 0;\n  text-transform: capitalize;\n}\n\n.post .comments {\n  margin: 0 0 1.5rem;\n}\n\n/* Meta (autor -date - 1 tag - comments count)\n========================================================================== */\n\n.meta {\n  margin-bottom: 1rem;\n  line-height: 1;\n}\n\n.meta-author-date {\n  font-size: 0.875rem;\n  color: #999;\n  margin: 10px 0 5px;\n}\n\n.meta-author-date a {\n  color: inherit;\n}\n\n.meta-author-date .author-name a,\n.meta-author-date .tag a {\n  color: #333;\n}\n\n.meta-author-date .author-name a:hover {\n  color: #777;\n}\n\n.meta-author-date .point {\n  margin: 0 2px;\n  display: inline-block;\n}\n\n/* Social Share\n========================================================================== */\n\n.social-share {\n  padding: 5px 0;\n  font-size: 0.875rem;\n}\n\n.social-share .share-count {\n  text-align: center;\n  color: #000;\n  margin-right: 5px;\n  margin-left: 5px;\n}\n\n.social-share .share {\n  display: inline-block;\n  vertical-align: middle;\n  padding: 5px;\n  font-size: 1.25rem;\n  cursor: pointer;\n}\n\n.social-share .share:hover {\n  opacity: .7;\n}\n\n.social-share .btn {\n  padding: 8px 10px;\n  border-radius: 0;\n  color: #fff;\n}\n\n/* bottom share and bottom subscribe\n========================================================================== */\n\n.share-subscribe p {\n  color: #7d7d7d;\n  margin-bottom: 1rem;\n  line-height: 1;\n  font-size: 0.875rem;\n}\n\n.share-subscribe .social-share {\n  float: none !important;\n}\n\n.share-subscribe > div {\n  position: relative;\n  overflow: hidden;\n  margin-bottom: 15px;\n}\n\n.share-subscribe > div:before {\n  content: \" \";\n  border-top: solid 1px #000;\n  position: absolute;\n  top: 0;\n  left: 15px;\n  width: 40px;\n  height: 1px;\n}\n\n.share-subscribe > div h5 {\n  color: #666;\n  font-size: 0.875rem;\n  margin: 1rem 0;\n  line-height: 1;\n  text-transform: uppercase;\n}\n\n.share-subscribe .newsletter-form {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.share-subscribe .newsletter-form .form-group {\n  max-width: 250px;\n  width: 100%;\n}\n\n.share-subscribe .newsletter-form .btn {\n  border-radius: 0;\n}\n\n/* Related post\n========================================================================== */\n\n.related-posts-list {\n  margin-bottom: 18px;\n  padding: 0;\n  border: none;\n}\n\n.related-posts-title {\n  border-bottom: solid 1px #EEE;\n  font-size: 17px;\n  font-weight: 400;\n  height: auto;\n  line-height: 17px;\n  margin: 0 0 20px;\n  padding-bottom: 10px;\n  text-transform: uppercase;\n}\n\n.related-posts .entries {\n  border: none;\n  padding-bottom: 0;\n}\n\n.related-posts .entries .image {\n  margin-bottom: 10px;\n}\n\n.related-posts .entries .image-link {\n  height: 174px;\n}\n\n.related-posts .entries .title {\n  margin: 0;\n  padding: 0;\n  font-size: 1rem;\n  line-height: 18px;\n}\n\n.related-posts .no-image {\n  position: relative;\n}\n\n.related-posts .no-image .related-posts-list {\n  background-color: #4285f4;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  position: absolute;\n  bottom: 0;\n  top: 0;\n  left: 0.9375rem;\n  right: 0.9375rem;\n}\n\n.related-posts .no-image h2 {\n  color: #fff;\n  text-align: center;\n  width: 100%;\n}\n\n.related-posts .no-image h2:hover {\n  color: rgba(255, 255, 255, 0.7);\n}\n\n/* Media Query (medium)\n========================================================================== */\n\n@media only screen and (min-width: 766px) {\n  .post .title {\n    font-size: 2.25rem;\n    margin: 0 0 1rem;\n  }\n\n  .post .meta-author-date {\n    float: left;\n    margin-top: 12px;\n  }\n\n  .post .social-share {\n    float: right;\n  }\n\n  .post-content {\n    font-size: 1.125rem;\n    line-height: 32px;\n  }\n\n  .post-content p {\n    margin-bottom: 1.5rem;\n  }\n}\n\n/* Media Query (large)\n========================================================================== */\n\n@media only screen and (min-width: 992px) {\n  .post .meta-author-date {\n    float: left;\n    margin-top: 12px;\n  }\n\n  .post .meta-share {\n    float: right;\n  }\n}\n\n.subscribe {\n  height: 90vh;\n}\n\n.subscribe-title {\n  font-weight: 400;\n  margin-top: 0;\n}\n\n.subscribe .form-group {\n  margin-bottom: 1.5rem;\n}\n\n.subscribe .form-group.error input {\n  border-color: #ff5b5b;\n}\n\n.subscribe h3 {\n  margin: 0;\n  margin-bottom: 8px;\n  font: 400 20px/32px Roboto,sans-serif;\n}\n\n.subscribe .btn {\n  width: 100%;\n}\n\n.subscribe-content {\n  max-width: 700px;\n  color: #7d878a;\n}\n\n.subscribe-form {\n  position: relative;\n  margin: 30px auto;\n  padding: 40px;\n  max-width: 400px;\n  width: 100%;\n  background: #ebeff2;\n  border-radius: 5px;\n  text-align: left;\n}\n\n.subscribe-input {\n  width: 100%;\n  padding: 10px;\n  border: #4285f4  1px solid;\n  border-radius: 2px;\n}\n\n.subscribe-input:focus {\n  outline: none;\n}\n\n.animated {\n  -webkit-animation-duration: 1s;\n  -moz-animation-duration: 1s;\n  -ms-animation-duration: 1s;\n  -o-animation-duration: 1s;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n}\n\n.animated.infinite {\n  -webkit-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n}\n\n.bounceIn {\n  -webkit-animation-name: bounceIn;\n  animation-name: bounceIn;\n}\n\n.bounceInDown {\n  -webkit-animation-name: bounceInDown;\n  animation-name: bounceInDown;\n}\n\n@-webkit-keyframes bounceIn {\n  0%, 20%, 40%, 60%, 80%, 100% {\n    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(0.3, 0.3, 0.3);\n    transform: scale3d(0.3, 0.3, 0.3);\n  }\n\n  20% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1);\n    transform: scale3d(1.1, 1.1, 1.1);\n  }\n\n  40% {\n    -webkit-transform: scale3d(0.9, 0.9, 0.9);\n    transform: scale3d(0.9, 0.9, 0.9);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(1.03, 1.03, 1.03);\n    transform: scale3d(1.03, 1.03, 1.03);\n  }\n\n  80% {\n    -webkit-transform: scale3d(0.97, 0.97, 0.97);\n    transform: scale3d(0.97, 0.97, 0.97);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@keyframes bounceIn {\n  0%, 20%, 40%, 60%, 80%, 100% {\n    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: scale3d(0.3, 0.3, 0.3);\n    transform: scale3d(0.3, 0.3, 0.3);\n  }\n\n  20% {\n    -webkit-transform: scale3d(1.1, 1.1, 1.1);\n    transform: scale3d(1.1, 1.1, 1.1);\n  }\n\n  40% {\n    -webkit-transform: scale3d(0.9, 0.9, 0.9);\n    transform: scale3d(0.9, 0.9, 0.9);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: scale3d(1.03, 1.03, 1.03);\n    transform: scale3d(1.03, 1.03, 1.03);\n  }\n\n  80% {\n    -webkit-transform: scale3d(0.97, 0.97, 0.97);\n    transform: scale3d(0.97, 0.97, 0.97);\n  }\n\n  100% {\n    opacity: 1;\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@-webkit-keyframes bounceInDown {\n  0%, 60%, 75%, 90%, 100% {\n    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -3000px, 0);\n    transform: translate3d(0, -3000px, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 25px, 0);\n    transform: translate3d(0, 25px, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(0, -10px, 0);\n    transform: translate3d(0, -10px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0, 5px, 0);\n    transform: translate3d(0, 5px, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@keyframes bounceInDown {\n  0%, 60%, 75%, 90%, 100% {\n    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  0% {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -3000px, 0);\n    transform: translate3d(0, -3000px, 0);\n  }\n\n  60% {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 25px, 0);\n    transform: translate3d(0, 25px, 0);\n  }\n\n  75% {\n    -webkit-transform: translate3d(0, -10px, 0);\n    transform: translate3d(0, -10px, 0);\n  }\n\n  90% {\n    -webkit-transform: translate3d(0, 5px, 0);\n    transform: translate3d(0, 5px, 0);\n  }\n\n  100% {\n    -webkit-transform: none;\n    transform: none;\n  }\n}\n\n@-webkit-keyframes pulse {\n  from {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  50% {\n    -webkit-transform: scale3d(1.05, 1.05, 1.05);\n    transform: scale3d(1.05, 1.05, 1.05);\n  }\n\n  to {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@keyframes pulse {\n  from {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n\n  50% {\n    -webkit-transform: scale3d(1.05, 1.05, 1.05);\n    transform: scale3d(1.05, 1.05, 1.05);\n  }\n\n  to {\n    -webkit-transform: scale3d(1, 1, 1);\n    transform: scale3d(1, 1, 1);\n  }\n}\n\n@-webkit-keyframes scroll {\n  0% {\n    opacity: 0;\n  }\n\n  10% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    transform: translateY(0px);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(10px);\n    transform: translateY(10px);\n  }\n}\n\n@keyframes scroll {\n  0% {\n    opacity: 0;\n  }\n\n  10% {\n    opacity: 1;\n    -webkit-transform: translateY(0px);\n    transform: translateY(0px);\n  }\n\n  100% {\n    opacity: 0;\n    -webkit-transform: translateY(10px);\n    transform: translateY(10px);\n  }\n}\n\n@-webkit-keyframes spin {\n  from {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n\n  to {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes spin {\n  from {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n\n  to {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}", ""]);
	
	// exports


/***/ },
/* 9 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(9)();
	// imports
	
	
	// module
	exports.push([module.id, "/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */\n\n/**\n * 1. Change the default font family in all browsers (opinionated).\n * 2. Prevent adjustments of font size after orientation changes in IE and iOS.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  -ms-text-size-adjust: 100%; /* 2 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/**\n * Remove the margin in all browsers (opinionated).\n */\n\nbody {\n  margin: 0;\n}\n\n/* HTML5 display definitions\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 9-.\n * 1. Add the correct display in Edge, IE, and Firefox.\n * 2. Add the correct display in IE.\n */\n\narticle,\naside,\ndetails, /* 1 */\nfigcaption,\nfigure,\nfooter,\nheader,\nmain, /* 2 */\nmenu,\nnav,\nsection,\nsummary { /* 1 */\n  display: block;\n}\n\n/**\n * Add the correct display in IE 9-.\n */\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n}\n\n/**\n * Add the correct display in iOS 4-7.\n */\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Add the correct display in IE 10-.\n * 1. Add the correct display in IE.\n */\n\ntemplate, /* 1 */\n[hidden] {\n  display: none;\n}\n\n/* Links\n   ========================================================================== */\n\n/**\n * 1. Remove the gray background on active links in IE 10.\n * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.\n */\n\na {\n  background-color: transparent; /* 1 */\n  -webkit-text-decoration-skip: objects; /* 2 */\n}\n\n/**\n * Remove the outline on focused links when they are also active or hovered\n * in all browsers (opinionated).\n */\n\na:active,\na:hover {\n  outline-width: 0;\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * 1. Remove the bottom border in Firefox 39-.\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Prevent the duplicate application of `bolder` by the next rule in Safari 6.\n */\n\nb,\nstrong {\n  font-weight: inherit;\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * Add the correct font style in Android 4.3-.\n */\n\ndfn {\n  font-style: italic;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/**\n * Add the correct background and color in IE 9-.\n */\n\nmark {\n  background-color: #ff0;\n  color: #000;\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10-.\n */\n\nimg {\n  border-style: none;\n}\n\n/**\n * Hide the overflow in IE.\n */\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct margin in IE 8.\n */\n\nfigure {\n  margin: 1em 40px;\n}\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change font properties to `inherit` in all browsers (opinionated).\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\nselect,\ntextarea {\n  font: inherit; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Restore the font weight unset by the previous rule.\n */\n\noptgroup {\n  font-weight: bold;\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\n *    controls in Android 4.\n * 2. Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\nhtml [type=\"button\"], /* 1 */\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button; /* 2 */\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Change the border, margin, and padding in all browsers (opinionated).\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Remove the default vertical scrollbar in IE.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10-.\n * 2. Remove the padding in IE 10-.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.\n */\n\n[type=\"search\"]::-webkit-search-cancel-button,\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * Correct the text style of placeholders in Chrome, Edge, and Safari.\n */\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.54;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n", ""]);
	
	// exports


/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = "data:application/x-font-ttf;base64,"

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = "data:application/font-woff;base64,"

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "8befd03ca50bd9162676d32be64cfcd4.svg";

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,