/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _prism = __webpack_require__(1);
	
	var _prism2 = _interopRequireDefault(_prism);
	
	var _jqueryGhostHunter = __webpack_require__(2);
	
	var _jqueryGhostHunter2 = _interopRequireDefault(_jqueryGhostHunter);
	
	var _app = __webpack_require__(3);
	
	var _app2 = _interopRequireDefault(_app);
	
	var _app3 = __webpack_require__(4);
	
	var _app4 = _interopRequireDefault(_app3);
	
	var _app5 = __webpack_require__(5);
	
	var _app6 = _interopRequireDefault(_app5);
	
	var _appRelated = __webpack_require__(6);
	
	var _appRelated2 = _interopRequireDefault(_appRelated);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// import              '../sass/main.scss';
	
	/*
	@package godofredoninja
	
	========================================================================
	Mapache Javascript Functions
	========================================================================
	*/
	
	/**
	* Table of Contents:
	*
	*       1. Imports libraris and modules
	*      2. variables Globals
	*      3. Functions
	*      4. Search header
	*      5. Opena and close menu mobile
	*      6. Video Responsive youtube and vimeo
	*      7. header transparent
	*      8. Share social
	*      9. Share count social media
	*      10. Social Link Header
	*      11. Disqus Comments
	*/
	
	/* 1. Imports and libraris and modules
	====================================================================== */
	// import zepto        from "./lib/zepto.js";
	// import $            from "jQuery";
	(function () {
	
	    /* 2. variables globals */
	    var $gd_header = $('#header'),
	        $gd_menu = $('#menu-mobile'),
	        $gd_cover = $('#cover'),
	        $gd_search_btn = $('#search-btn'),
	        $gd_search = $('#header-search'),
	        $gd_search_input = $('.search-field'),
	        $gd_comments = $('#comments'),
	        $gd_related = $('#related'),
	        $gd_comment_count = $('.gd-comment_count'),
	        $gd_share_count = $('.share-count'),
	        $gd_video = $('#video-format'),
	        $gd_sidebar_fixed = $('#sidebar').find('.fixed'),
	        url_regexp = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
	
	    var $document = $(document),
	        $window = $(window);
	
	    var overlay = {
	        opacity: 1,
	        visibility: 'visible'
	    };
	
	    /**
	     * Post related
	     */
	    $document.on('ready', function () {
	        if ($gd_related.length > 0) {
	            var related = new _appRelated2.default($gd_related);
	            related.mapacheGet();
	        }
	    });
	
	    /**
	     * Functions
	     */
	    $('.share').bind('click', shareSocial);
	    $document.on('mouseup', mouseUp);
	
	    /**
	     * menu Mobile open
	     */
	    $('#menu-open').on('click', function (e) {
	        e.preventDefault();
	        $('html').attr('mapache-state', 'no-scroll');
	        $('.overlay').css(overlay);
	        $gd_menu.addClass('open');
	    });
	
	    /**
	     * Menu Close Mobile
	     */
	    function menuClose(e) {
	        e.preventDefault();
	        $('html').removeAttr('mapache-state');
	        $('.overlay').removeAttr('style');
	        $gd_menu.removeClass('open');
	    }
	
	    /**
	     *  Functions MouseUp
	     */
	    function mouseUp(e) {
	        if ($gd_menu.hasClass('open') && $gd_menu.has(e.target).length === 0) {
	            menuClose(e);
	        }
	    }
	
	    /**
	     *  Search Open and close mobile
	     */
	    $gd_search_btn.on('click', function (e) {
	        e.preventDefault();
	        $(this).toggleClass('i-search');
	        $gd_header.toggleClass('responsive-search-open');
	        $gd_search_input.focus();
	    });
	
	    /**
	     * Search open an close desktop.
	     * Api ghost for search
	     */
	    $document.on('ready', function () {
	
	        $gd_search_input.focus(function () {
	            $gd_header.addClass('search-active');
	            $('.search-popout').removeClass('closed');
	        });
	
	        $gd_search_input.blur(function () {
	            setTimeout(function () {
	                $gd_header.removeClass('search-active');
	                $('.search-popout').addClass('closed');
	            }, 100);
	        });
	
	        $gd_search_input.keyup(function () {
	            $('.search-suggest-results').css('display', 'block');
	        });
	
	        $gd_search_input.ghostHunter({
	            results: "#search-results",
	            zeroResultsInfo: false,
	            displaySearchInfo: false,
	            result_template: '<a href="{{link}}">{{title}}</a>',
	            onKeyUp: true
	        });
	    });
	
	    /**
	     * Header box shadow and transparent
	     */
	    $document.on('ready', function () {
	
	        if ($gd_cover.length > 0) {
	            $gd_header.css('background', 'transparent');
	            $window.on('scroll', coverScroll);
	        } else {
	            $gd_header.addClass('toolbar-shadow');
	        }
	
	        function coverScroll() {
	            var scrollTop = $window.scrollTop(),
	                gd_cover_height = $gd_cover.height() - $gd_header.height(),
	                gd_cover_wrap = (gd_cover_height - scrollTop) / gd_cover_height;
	
	            if (scrollTop >= gd_cover_height) {
	                $gd_header.addClass('toolbar-shadow').removeAttr('style');
	            } else {
	                $gd_header.removeClass('toolbar-shadow').css({ 'background': 'transparent' });
	            }
	
	            $('.cover-wrap').css('opacity', gd_cover_wrap);
	        }
	    });
	
	    /**
	     * Video Full for post tag video
	     */
	    function videoPost() {
	        $('.post-image').css('display', 'none');
	        var video = $('iframe[src*="youtube.com"]')[0];
	        $gd_video.find('.video-featured').prepend(video);
	
	        if (typeof youtube != 'undefined') {
	            $gd_video.find('.video-content').removeAttr('style');
	
	            $.each(youtube, function (channelName, channelId) {
	                $gd_video.find('.channel-name').html('Subscribe to <strong>' + channelName + '</strong>');
	                $('.g-ytsubscribe').attr('data-channelid', channelId);
	            });
	
	            var s = document.createElement("script");
	            s.src = 'https://apis.google.com/js/platform.js';
	            document.body.appendChild(s);
	        }
	    }
	
	    /**
	    * Video Responsive Youtube
	    */
	    function videoResponsive() {
	        $('.post-content').each(function () {
	            var selectors = ['iframe[src*="player.vimeo.com"]', 'iframe[src*="youtube.com"]', 'iframe[src*="youtube-nocookie.com"]', 'iframe[src*="kickstarter.com"][src*="video.html"]'];
	
	            var $allVideos = $(this).find(selectors.join(','));
	
	            $allVideos.each(function () {
	                $(this).wrap('<aside class="video-responsive"></aside>');
	            });
	        });
	    }
	
	    /**
	     * Share Social
	     */
	    function shareSocial(e) {
	        e.preventDefault();
	        var share = new _app2.default($(this));
	        share.godoShare();
	    }
	
	    /**
	     * Share Social Count
	     */
	    function shareConter() {
	        if ($gd_share_count.length > 0) {
	            var share_count = new _app4.default($gd_share_count);
	            share_count.godoCount();
	        }
	    }
	
	    /**
	     * Header Social Links
	     */
	    function socialLink(links) {
	        $.each(links, function (type, url) {
	            if (typeof url === 'string' && url_regexp.test(url)) {
	                var template = '<a title="' + type + '" href="' + url + '" target="_blank" class="i-' + type + '"></a>';
	                $('.header-social').append(template);
	            }
	        });
	    }
	
	    /**
	     * Disqus Comment
	     */
	    function disqusComments() {
	        if (typeof disqus_shortname != 'undefined') {
	            $gd_comments.removeAttr('style');
	            var d = document,
	                s = d.createElement('script');
	            s.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            s.setAttribute('data-timestamp', +new Date());
	            (d.head || d.body).appendChild(s);
	        }
	    }
	
	    /**
	     * Comments Count Disqus
	     */
	    function commentsCount() {
	        $gd_comment_count.each(function () {
	            var _this = this;
	
	            var url = $(this).attr('godo-url');
	            $.ajax({
	                type: 'GET',
	                url: 'https://disqus.com/api/3.0/threads/set.jsonp',
	                data: { api_key: disqusPublicKey, forum: disqus_shortname, thread: 'link:' + url },
	                cache: false,
	                dataType: 'jsonp',
	
	                success: function success(commet) {
	                    for (var i in commet.response) {
	                        var countText = 'Comments';
	                        var count = commet.response[i].posts;
	                        if (count == 1) countText = 'Comment';
	                        $(_this).html(count + ' <span>' + countText + '</span>');
	                    }
	                }
	            });
	        });
	    }
	
	    /**
	     * Scroll btn link
	     */
	    $('.scrolltop').on('click', function (e) {
	        e.preventDefault();
	        $('html, body').animate({ scrollTop: $($(this).attr('href')).offset().top - 70 }, 500, 'linear');
	    });
	
	    /**
	     * Move excerpt
	     */
	    if ($('p.excerpt').length > 0) {
	        $('p.excerpt').insertAfter($('h1.title'));
	    }
	
	    // sidebar hidden aside
	    function sidebarFixed() {
	        var mela = $gd_sidebar_fixed.offset().top;
	        $window.on('scroll', function () {
	            var scrollTop = $window.scrollTop();
	            if (scrollTop > mela - 78) {
	                $gd_sidebar_fixed.addClass('active');
	            } else {
	                $gd_sidebar_fixed.removeClass('active');
	            }
	        });
	    }
	
	    $document.on('ready', function () {
	        shareConter();
	        if (typeof social_link != 'undefined') socialLink(social_link);
	        if ($gd_comments.length > 0) disqusComments();
	        if (typeof disqus_shortname != 'undefined' && typeof disqusPublicKey != 'undefined') commentsCount();
	        if ($gd_video.length > 0) videoPost();
	        videoResponsive();
	        if ($gd_sidebar_fixed.length > 0) sidebarFixed();
	    });
	})();

/***/ },
/* 1 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+aspnet+bash+c+csharp+cpp+ruby+css-extras+git+go+java+json+less+markdown+perl+php+php-extras+python+jsx+scss+sql+swift&plugins=line-numbers */
	var _self = "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {},
	    Prism = function () {
	  var e = /\blang(?:uage)?-(\w+)\b/i,
	      t = 0,
	      n = _self.Prism = { util: { encode: function encode(e) {
	        return e instanceof a ? new a(e.type, n.util.encode(e.content), e.alias) : "Array" === n.util.type(e) ? e.map(n.util.encode) : e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
	      }, type: function type(e) {
	        return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1];
	      }, objId: function objId(e) {
	        return e.__id || Object.defineProperty(e, "__id", { value: ++t }), e.__id;
	      }, clone: function clone(e) {
	        var t = n.util.type(e);switch (t) {case "Object":
	            var a = {};for (var r in e) {
	              e.hasOwnProperty(r) && (a[r] = n.util.clone(e[r]));
	            }return a;case "Array":
	            return e.map && e.map(function (e) {
	              return n.util.clone(e);
	            });}return e;
	      } }, languages: { extend: function extend(e, t) {
	        var a = n.util.clone(n.languages[e]);for (var r in t) {
	          a[r] = t[r];
	        }return a;
	      }, insertBefore: function insertBefore(e, t, a, r) {
	        r = r || n.languages;var l = r[e];if (2 == arguments.length) {
	          a = arguments[1];for (var i in a) {
	            a.hasOwnProperty(i) && (l[i] = a[i]);
	          }return l;
	        }var o = {};for (var s in l) {
	          if (l.hasOwnProperty(s)) {
	            if (s == t) for (var i in a) {
	              a.hasOwnProperty(i) && (o[i] = a[i]);
	            }o[s] = l[s];
	          }
	        }return n.languages.DFS(n.languages, function (t, n) {
	          n === r[e] && t != e && (this[t] = o);
	        }), r[e] = o;
	      }, DFS: function DFS(e, t, a, r) {
	        r = r || {};for (var l in e) {
	          e.hasOwnProperty(l) && (t.call(e, l, e[l], a || l), "Object" !== n.util.type(e[l]) || r[n.util.objId(e[l])] ? "Array" !== n.util.type(e[l]) || r[n.util.objId(e[l])] || (r[n.util.objId(e[l])] = !0, n.languages.DFS(e[l], t, l, r)) : (r[n.util.objId(e[l])] = !0, n.languages.DFS(e[l], t, null, r)));
	        }
	      } }, plugins: {}, highlightAll: function highlightAll(e, t) {
	      var a = { callback: t, selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code' };n.hooks.run("before-highlightall", a);for (var r, l = a.elements || document.querySelectorAll(a.selector), i = 0; r = l[i++];) {
	        n.highlightElement(r, e === !0, a.callback);
	      }
	    }, highlightElement: function highlightElement(t, a, r) {
	      for (var l, i, o = t; o && !e.test(o.className);) {
	        o = o.parentNode;
	      }o && (l = (o.className.match(e) || [, ""])[1].toLowerCase(), i = n.languages[l]), t.className = t.className.replace(e, "").replace(/\s+/g, " ") + " language-" + l, o = t.parentNode, /pre/i.test(o.nodeName) && (o.className = o.className.replace(e, "").replace(/\s+/g, " ") + " language-" + l);var s = t.textContent,
	          u = { element: t, language: l, grammar: i, code: s };if (n.hooks.run("before-sanity-check", u), !u.code || !u.grammar) return n.hooks.run("complete", u), void 0;if (n.hooks.run("before-highlight", u), a && _self.Worker) {
	        var c = new Worker(n.filename);c.onmessage = function (e) {
	          u.highlightedCode = e.data, n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(u.element), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
	        }, c.postMessage(JSON.stringify({ language: u.language, code: u.code, immediateClose: !0 }));
	      } else u.highlightedCode = n.highlight(u.code, u.grammar, u.language), n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(t), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
	    }, highlight: function highlight(e, t, r) {
	      var l = n.tokenize(e, t);return a.stringify(n.util.encode(l), r);
	    }, tokenize: function tokenize(e, t) {
	      var a = n.Token,
	          r = [e],
	          l = t.rest;if (l) {
	        for (var i in l) {
	          t[i] = l[i];
	        }delete t.rest;
	      }e: for (var i in t) {
	        if (t.hasOwnProperty(i) && t[i]) {
	          var o = t[i];o = "Array" === n.util.type(o) ? o : [o];for (var s = 0; s < o.length; ++s) {
	            var u = o[s],
	                c = u.inside,
	                g = !!u.lookbehind,
	                h = !!u.greedy,
	                f = 0,
	                d = u.alias;u = u.pattern || u;for (var p = 0; p < r.length; p++) {
	              var m = r[p];if (r.length > e.length) break e;if (!(m instanceof a)) {
	                u.lastIndex = 0;var y = u.exec(m),
	                    v = 1;if (!y && h && p != r.length - 1) {
	                  var b = r[p + 1].matchedStr || r[p + 1],
	                      k = m + b;if (p < r.length - 2 && (k += r[p + 2].matchedStr || r[p + 2]), u.lastIndex = 0, y = u.exec(k), !y) continue;var w = y.index + (g ? y[1].length : 0);if (w >= m.length) continue;var _ = y.index + y[0].length,
	                      P = m.length + b.length;if (v = 3, P >= _) {
	                    if (r[p + 1].greedy) continue;v = 2, k = k.slice(0, P);
	                  }m = k;
	                }if (y) {
	                  g && (f = y[1].length);var w = y.index + f,
	                      y = y[0].slice(f),
	                      _ = w + y.length,
	                      S = m.slice(0, w),
	                      O = m.slice(_),
	                      j = [p, v];S && j.push(S);var A = new a(i, c ? n.tokenize(y, c) : y, d, y, h);j.push(A), O && j.push(O), Array.prototype.splice.apply(r, j);
	                }
	              }
	            }
	          }
	        }
	      }return r;
	    }, hooks: { all: {}, add: function add(e, t) {
	        var a = n.hooks.all;a[e] = a[e] || [], a[e].push(t);
	      }, run: function run(e, t) {
	        var a = n.hooks.all[e];if (a && a.length) for (var r, l = 0; r = a[l++];) {
	          r(t);
	        }
	      } } },
	      a = n.Token = function (e, t, n, a, r) {
	    this.type = e, this.content = t, this.alias = n, this.matchedStr = a || null, this.greedy = !!r;
	  };if (a.stringify = function (e, t, r) {
	    if ("string" == typeof e) return e;if ("Array" === n.util.type(e)) return e.map(function (n) {
	      return a.stringify(n, t, e);
	    }).join("");var l = { type: e.type, content: a.stringify(e.content, t, r), tag: "span", classes: ["token", e.type], attributes: {}, language: t, parent: r };if ("comment" == l.type && (l.attributes.spellcheck = "true"), e.alias) {
	      var i = "Array" === n.util.type(e.alias) ? e.alias : [e.alias];Array.prototype.push.apply(l.classes, i);
	    }n.hooks.run("wrap", l);var o = "";for (var s in l.attributes) {
	      o += (o ? " " : "") + s + '="' + (l.attributes[s] || "") + '"';
	    }return "<" + l.tag + ' class="' + l.classes.join(" ") + '" ' + o + ">" + l.content + "</" + l.tag + ">";
	  }, !_self.document) return _self.addEventListener ? (_self.addEventListener("message", function (e) {
	    var t = JSON.parse(e.data),
	        a = t.language,
	        r = t.code,
	        l = t.immediateClose;_self.postMessage(n.highlight(r, n.languages[a], a)), l && _self.close();
	  }, !1), _self.Prism) : _self.Prism;var r = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();return r && (n.filename = r.src, document.addEventListener && !r.hasAttribute("data-manual") && document.addEventListener("DOMContentLoaded", n.highlightAll)), _self.Prism;
	}();"undefined" != typeof module && module.exports && (module.exports = Prism), "undefined" != typeof global && (global.Prism = Prism);
	Prism.languages.markup = { comment: /<!--[\w\W]*?-->/, prolog: /<\?[\w\W]+?\?>/, doctype: /<!DOCTYPE[\w\W]+?>/, cdata: /<!\[CDATA\[[\w\W]*?]]>/i, tag: { pattern: /<\/?(?!\d)[^\s>\/=.$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, inside: { tag: { pattern: /^<\/?[^\s>\/]+/i, inside: { punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/ } }, "attr-value": { pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i, inside: { punctuation: /[=>"']/ } }, punctuation: /\/?>/, "attr-name": { pattern: /[^\s>\/]+/, inside: { namespace: /^[^\s>\/:]+:/ } } } }, entity: /&#?[\da-z]{1,8};/i }, Prism.hooks.add("wrap", function (a) {
	  "entity" === a.type && (a.attributes.title = a.content.replace(/&amp;/, "&"));
	}), Prism.languages.xml = Prism.languages.markup, Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup;
	Prism.languages.css = { comment: /\/\*[\w\W]*?\*\//, atrule: { pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i, inside: { rule: /@[\w-]+/ } }, url: /url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i, selector: /[^\{\}\s][^\{\};]*?(?=\s*\{)/, string: /("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/, property: /(\b|\B)[\w-]+(?=\s*:)/i, important: /\B!important\b/i, "function": /[-a-z0-9]+(?=\()/i, punctuation: /[(){};:]/ }, Prism.languages.css.atrule.inside.rest = Prism.util.clone(Prism.languages.css), Prism.languages.markup && (Prism.languages.insertBefore("markup", "tag", { style: { pattern: /(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i, lookbehind: !0, inside: Prism.languages.css, alias: "language-css" } }), Prism.languages.insertBefore("inside", "attr-value", { "style-attr": { pattern: /\s*style=("|').*?\1/i, inside: { "attr-name": { pattern: /^\s*style/i, inside: Prism.languages.markup.tag.inside }, punctuation: /^\s*=\s*['"]|['"]\s*$/, "attr-value": { pattern: /.+/i, inside: Prism.languages.css } }, alias: "language-css" } }, Prism.languages.markup.tag));
	Prism.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\w\W]*?\*\//, lookbehind: !0 }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: !0 }], string: { pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: !0 }, "class-name": { pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i, lookbehind: !0, inside: { punctuation: /(\.|\\)/ } }, keyword: /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, "boolean": /\b(true|false)\b/, "function": /[a-z0-9_]+(?=\()/i, number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation: /[{}[\];(),.:]/ };
	Prism.languages.javascript = Prism.languages.extend("clike", { keyword: /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/, number: /\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/, "function": /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i }), Prism.languages.insertBefore("javascript", "keyword", { regex: { pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/, lookbehind: !0, greedy: !0 } }), Prism.languages.insertBefore("javascript", "class-name", { "template-string": { pattern: /`(?:\\\\|\\?[^\\])*?`/, greedy: !0, inside: { interpolation: { pattern: /\$\{[^}]+\}/, inside: { "interpolation-punctuation": { pattern: /^\$\{|\}$/, alias: "punctuation" }, rest: Prism.languages.javascript } }, string: /[\s\S]+/ } } }), Prism.languages.markup && Prism.languages.insertBefore("markup", "tag", { script: { pattern: /(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind: !0, inside: Prism.languages.javascript, alias: "language-javascript" } }), Prism.languages.js = Prism.languages.javascript;
	Prism.languages.aspnet = Prism.languages.extend("markup", { "page-directive tag": { pattern: /<%\s*@.*%>/i, inside: { "page-directive tag": /<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i, rest: Prism.languages.markup.tag.inside } }, "directive tag": { pattern: /<%.*%>/i, inside: { "directive tag": /<%\s*?[$=%#:]{0,2}|%>/i, rest: Prism.languages.csharp } } }), Prism.languages.aspnet.tag.pattern = /<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, Prism.languages.insertBefore("inside", "punctuation", { "directive tag": Prism.languages.aspnet["directive tag"] }, Prism.languages.aspnet.tag.inside["attr-value"]), Prism.languages.insertBefore("aspnet", "comment", { "asp comment": /<%--[\w\W]*?--%>/ }), Prism.languages.insertBefore("aspnet", Prism.languages.javascript ? "script" : "tag", { "asp script": { pattern: /(<script(?=.*runat=['"]?server['"]?)[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind: !0, inside: Prism.languages.csharp || {} } });
	!function (e) {
	  var t = { variable: [{ pattern: /\$?\(\([\w\W]+?\)\)/, inside: { variable: [{ pattern: /(^\$\(\([\w\W]+)\)\)/, lookbehind: !0 }, /^\$\(\(/], number: /\b-?(?:0x[\dA-Fa-f]+|\d*\.?\d+(?:[Ee]-?\d+)?)\b/, operator: /--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/, punctuation: /\(\(?|\)\)?|,|;/ } }, { pattern: /\$\([^)]+\)|`[^`]+`/, inside: { variable: /^\$\(|^`|\)$|`$/ } }, /\$(?:[a-z0-9_#\?\*!@]+|\{[^}]+\})/i] };e.languages.bash = { shebang: { pattern: /^#!\s*\/bin\/bash|^#!\s*\/bin\/sh/, alias: "important" }, comment: { pattern: /(^|[^"{\\])#.*/, lookbehind: !0 }, string: [{ pattern: /((?:^|[^<])<<\s*)(?:"|')?(\w+?)(?:"|')?\s*\r?\n(?:[\s\S])*?\r?\n\2/g, lookbehind: !0, greedy: !0, inside: t }, { pattern: /(["'])(?:\\\\|\\?[^\\])*?\1/g, greedy: !0, inside: t }], variable: t.variable, "function": { pattern: /(^|\s|;|\||&)(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|\s|;|\||&)/, lookbehind: !0 }, keyword: { pattern: /(^|\s|;|\||&)(?:let|:|\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|\s|;|\||&)/, lookbehind: !0 }, "boolean": { pattern: /(^|\s|;|\||&)(?:true|false)(?=$|\s|;|\||&)/, lookbehind: !0 }, operator: /&&?|\|\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/, punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];]/ };var a = t.variable[1].inside;a["function"] = e.languages.bash["function"], a.keyword = e.languages.bash.keyword, a.boolean = e.languages.bash.boolean, a.operator = e.languages.bash.operator, a.punctuation = e.languages.bash.punctuation;
	}(Prism);
	Prism.languages.c = Prism.languages.extend("clike", { keyword: /\b(asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/, operator: /\-[>-]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|?\||[~^%?*\/]/, number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)[ful]*\b/i }), Prism.languages.insertBefore("c", "string", { macro: { pattern: /(^\s*)#\s*[a-z]+([^\r\n\\]|\\.|\\(?:\r\n?|\n))*/im, lookbehind: !0, alias: "property", inside: { string: { pattern: /(#\s*include\s*)(<.+?>|("|')(\\?.)+?\3)/, lookbehind: !0 }, directive: { pattern: /(#\s*)\b(define|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\b/, lookbehind: !0, alias: "keyword" } } }, constant: /\b(__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|stdin|stdout|stderr)\b/ }), delete Prism.languages.c["class-name"], delete Prism.languages.c["boolean"];
	Prism.languages.csharp = Prism.languages.extend("clike", { keyword: /\b(abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while|add|alias|ascending|async|await|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|where|yield)\b/, string: [/@("|')(\1\1|\\\1|\\?(?!\1)[\s\S])*\1/, /("|')(\\?.)*?\1/], number: /\b-?(0x[\da-f]+|\d*\.?\d+f?)\b/i }), Prism.languages.insertBefore("csharp", "keyword", { "generic-method": { pattern: /[a-z0-9_]+\s*<[^>\r\n]+?>\s*(?=\()/i, alias: "function", inside: { keyword: Prism.languages.csharp.keyword, punctuation: /[<>(),.:]/ } }, preprocessor: { pattern: /(^\s*)#.*/m, lookbehind: !0, alias: "property", inside: { directive: { pattern: /(\s*#)\b(define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\b/, lookbehind: !0, alias: "keyword" } } } });
	Prism.languages.cpp = Prism.languages.extend("c", { keyword: /\b(alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/, "boolean": /\b(true|false)\b/, operator: /[-+]{1,2}|!=?|<{1,2}=?|>{1,2}=?|\->|:{1,2}|={1,2}|\^|~|%|&{1,2}|\|?\||\?|\*|\/|\b(and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/ }), Prism.languages.insertBefore("cpp", "keyword", { "class-name": { pattern: /(class\s+)[a-z0-9_]+/i, lookbehind: !0 } });
	!function (e) {
	  e.languages.ruby = e.languages.extend("clike", { comment: /#(?!\{[^\r\n]*?\}).*/, keyword: /\b(alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\b/ });var n = { pattern: /#\{[^}]+\}/, inside: { delimiter: { pattern: /^#\{|\}$/, alias: "tag" }, rest: e.util.clone(e.languages.ruby) } };e.languages.insertBefore("ruby", "keyword", { regex: [{ pattern: /%r([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\((?:[^()\\]|\\[\s\S])*\)[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\[(?:[^\[\]\\]|\\[\s\S])*\][gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r<(?:[^<>\\]|\\[\s\S])*>[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\r\n])+\/[gim]{0,3}(?=\s*($|[\r\n,.;})]))/, lookbehind: !0 }], variable: /[@$]+[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\b)/, symbol: /:[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\b)/ }), e.languages.insertBefore("ruby", "number", { builtin: /\b(Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|File|Fixnum|Fload|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/, constant: /\b[A-Z][a-zA-Z_0-9]*(?:[?!]|\b)/ }), e.languages.ruby.string = [{ pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\((?:[^()\\]|\\[\s\S])*\)/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\[(?:[^\[\]\\]|\\[\s\S])*\]/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?<(?:[^<>\\]|\\[\s\S])*>/, inside: { interpolation: n } }, { pattern: /("|')(#\{[^}]+\}|\\(?:\r?\n|\r)|\\?.)*?\1/, inside: { interpolation: n } }];
	}(Prism);
	Prism.languages.css.selector = { pattern: /[^\{\}\s][^\{\}]*(?=\s*\{)/, inside: { "pseudo-element": /:(?:after|before|first-letter|first-line|selection)|::[-\w]+/, "pseudo-class": /:[-\w]+(?:\(.*\))?/, "class": /\.[-:\.\w]+/, id: /#[-:\.\w]+/ } }, Prism.languages.insertBefore("css", "function", { hexcode: /#[\da-f]{3,6}/i, entity: /\\[\da-f]{1,8}/i, number: /[\d%\.]+/ });
	Prism.languages.git = { comment: /^#.*/m, deleted: /^[-–].*/m, inserted: /^\+.*/m, string: /("|')(\\?.)*?\1/m, command: { pattern: /^.*\$ git .*$/m, inside: { parameter: /\s(--|-)\w+/m } }, coord: /^@@.*@@$/m, commit_sha1: /^commit \w{40}$/m };
	Prism.languages.go = Prism.languages.extend("clike", { keyword: /\b(break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/, builtin: /\b(bool|byte|complex(64|128)|error|float(32|64)|rune|string|u?int(8|16|32|64|)|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(ln)?|real|recover)\b/, "boolean": /\b(_|iota|nil|true|false)\b/, operator: /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./, number: /\b(-?(0x[a-f\d]+|(\d+\.?\d*|\.\d+)(e[-+]?\d+)?)i?)\b/i, string: /("|'|`)(\\?.|\r|\n)*?\1/ }), delete Prism.languages.go["class-name"];
	Prism.languages.java = Prism.languages.extend("clike", { keyword: /\b(abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\b/, number: /\b0b[01]+\b|\b0x[\da-f]*\.?[\da-fp\-]+\b|\b\d*\.?\d+(?:e[+-]?\d+)?[df]?\b/i, operator: { pattern: /(^|[^.])(?:\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\|[|=]?|\*=?|\/=?|%=?|\^=?|[?:~])/m, lookbehind: !0 } }), Prism.languages.insertBefore("java", "function", { annotation: { alias: "punctuation", pattern: /(^|[^.])@\w+/, lookbehind: !0 } });
	Prism.languages.json = { property: /".*?"(?=\s*:)/gi, string: /"(?!:)(\\?[^"])*?"(?!:)/g, number: /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/g, punctuation: /[{}[\]);,]/g, operator: /:/g, "boolean": /\b(true|false)\b/gi, "null": /\bnull\b/gi }, Prism.languages.jsonp = Prism.languages.json;
	Prism.languages.less = Prism.languages.extend("css", { comment: [/\/\*[\w\W]*?\*\//, { pattern: /(^|[^\\])\/\/.*/, lookbehind: !0 }], atrule: { pattern: /@[\w-]+?(?:\([^{}]+\)|[^(){};])*?(?=\s*\{)/i, inside: { punctuation: /[:()]/ } }, selector: { pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\([^{}]*\)|[^{};@])*?(?=\s*\{)/, inside: { variable: /@+[\w-]+/ } }, property: /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/i, punctuation: /[{}();:,]/, operator: /[+\-*\/]/ }), Prism.languages.insertBefore("less", "punctuation", { "function": Prism.languages.less.function }), Prism.languages.insertBefore("less", "property", { variable: [{ pattern: /@[\w-]+\s*:/, inside: { punctuation: /:/ } }, /@@?[\w-]+/], "mixin-usage": { pattern: /([{;]\s*)[.#](?!\d)[\w-]+.*?(?=[(;])/, lookbehind: !0, alias: "function" } });
	Prism.languages.markdown = Prism.languages.extend("markup", {}), Prism.languages.insertBefore("markdown", "prolog", { blockquote: { pattern: /^>(?:[\t ]*>)*/m, alias: "punctuation" }, code: [{ pattern: /^(?: {4}|\t).+/m, alias: "keyword" }, { pattern: /``.+?``|`[^`\n]+`/, alias: "keyword" }], title: [{ pattern: /\w+.*(?:\r?\n|\r)(?:==+|--+)/, alias: "important", inside: { punctuation: /==+$|--+$/ } }, { pattern: /(^\s*)#+.+/m, lookbehind: !0, alias: "important", inside: { punctuation: /^#+|#+$/ } }], hr: { pattern: /(^\s*)([*-])([\t ]*\2){2,}(?=\s*$)/m, lookbehind: !0, alias: "punctuation" }, list: { pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m, lookbehind: !0, alias: "punctuation" }, "url-reference": { pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/, inside: { variable: { pattern: /^(!?\[)[^\]]+/, lookbehind: !0 }, string: /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/, punctuation: /^[\[\]!:]|[<>]/ }, alias: "url" }, bold: { pattern: /(^|[^\\])(\*\*|__)(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^\*\*|^__|\*\*$|__$/ } }, italic: { pattern: /(^|[^\\])([*_])(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^[*_]|[*_]$/ } }, url: { pattern: /!?\[[^\]]+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)| ?\[[^\]\n]*\])/, inside: { variable: { pattern: /(!?\[)[^\]]+(?=\]$)/, lookbehind: !0 }, string: { pattern: /"(?:\\.|[^"\\])*"(?=\)$)/ } } } }), Prism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic), Prism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold);
	Prism.languages.perl = { comment: [{ pattern: /(^\s*)=\w+[\s\S]*?=cut.*/m, lookbehind: !0 }, { pattern: /(^|[^\\$])#.*/, lookbehind: !0 }], string: [/\b(?:q|qq|qx|qw)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1/, /\b(?:q|qq|qx|qw)\s+([a-zA-Z0-9])(?:[^\\]|\\[\s\S])*?\1/, /\b(?:q|qq|qx|qw)\s*\((?:[^()\\]|\\[\s\S])*\)/, /\b(?:q|qq|qx|qw)\s*\{(?:[^{}\\]|\\[\s\S])*\}/, /\b(?:q|qq|qx|qw)\s*\[(?:[^[\]\\]|\\[\s\S])*\]/, /\b(?:q|qq|qx|qw)\s*<(?:[^<>\\]|\\[\s\S])*>/, /("|`)(?:[^\\]|\\[\s\S])*?\1/, /'(?:[^'\\\r\n]|\\.)*'/], regex: [/\b(?:m|qr)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1[msixpodualngc]*/, /\b(?:m|qr)\s+([a-zA-Z0-9])(?:[^\\]|\\.)*?\1[msixpodualngc]*/, /\b(?:m|qr)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngc]*/, /\b(?:m|qr)\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngc]*/, /\b(?:m|qr)\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngc]*/, /\b(?:m|qr)\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngc]*/, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\2(?:[^\\]|\\[\s\S])*?\2[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s+([a-zA-Z0-9])(?:[^\\]|\\[\s\S])*?\2(?:[^\\]|\\[\s\S])*?\2[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\((?:[^()\\]|\\[\s\S])*\)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\{(?:[^{}\\]|\\[\s\S])*\}\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\[(?:[^[\]\\]|\\[\s\S])*\]\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*<(?:[^<>\\]|\\[\s\S])*>\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngcer]*/, lookbehind: !0 }, /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\b))/], variable: [/[&*$@%]\{\^[A-Z]+\}/, /[&*$@%]\^[A-Z_]/, /[&*$@%]#?(?=\{)/, /[&*$@%]#?((::)*'?(?!\d)[\w$]+)+(::)*/i, /[&*$@%]\d+/, /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/], filehandle: { pattern: /<(?![<=])\S*>|\b_\b/, alias: "symbol" }, vstring: { pattern: /v\d+(\.\d+)*|\d+(\.\d+){2,}/, alias: "string" }, "function": { pattern: /sub [a-z0-9_]+/i, inside: { keyword: /sub/ } }, keyword: /\b(any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\b/, number: /\b-?(0x[\dA-Fa-f](_?[\dA-Fa-f])*|0b[01](_?[01])*|(\d(_?\d)*)?\.?\d(_?\d)*([Ee][+-]?\d+)?)\b/, operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\b/, punctuation: /[{}[\];(),:]/ };
	Prism.languages.php = Prism.languages.extend("clike", { keyword: /\b(and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\b/i, constant: /\b[A-Z0-9_]{2,}\b/, comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0 } }), Prism.languages.insertBefore("php", "class-name", { "shell-comment": { pattern: /(^|[^\\])#.*/, lookbehind: !0, alias: "comment" } }), Prism.languages.insertBefore("php", "keyword", { delimiter: /\?>|<\?(?:php)?/i, variable: /\$\w+\b/i, "package": { pattern: /(\\|namespace\s+|use\s+)[\w\\]+/, lookbehind: !0, inside: { punctuation: /\\/ } } }), Prism.languages.insertBefore("php", "operator", { property: { pattern: /(->)[\w]+/, lookbehind: !0 } }), Prism.languages.markup && (Prism.hooks.add("before-highlight", function (e) {
	  "php" === e.language && (e.tokenStack = [], e.backupCode = e.code, e.code = e.code.replace(/(?:<\?php|<\?)[\w\W]*?(?:\?>)/gi, function (a) {
	    return e.tokenStack.push(a), "{{{PHP" + e.tokenStack.length + "}}}";
	  }));
	}), Prism.hooks.add("before-insert", function (e) {
	  "php" === e.language && (e.code = e.backupCode, delete e.backupCode);
	}), Prism.hooks.add("after-highlight", function (e) {
	  if ("php" === e.language) {
	    for (var a, n = 0; a = e.tokenStack[n]; n++) {
	      e.highlightedCode = e.highlightedCode.replace("{{{PHP" + (n + 1) + "}}}", Prism.highlight(a, e.grammar, "php").replace(/\$/g, "$$$$"));
	    }e.element.innerHTML = e.highlightedCode;
	  }
	}), Prism.hooks.add("wrap", function (e) {
	  "php" === e.language && "markup" === e.type && (e.content = e.content.replace(/(\{\{\{PHP[0-9]+\}\}\})/g, '<span class="token php">$1</span>'));
	}), Prism.languages.insertBefore("php", "comment", { markup: { pattern: /<[^?]\/?(.*?)>/, inside: Prism.languages.markup }, php: /\{\{\{PHP[0-9]+\}\}\}/ }));
	Prism.languages.insertBefore("php", "variable", { "this": /\$this\b/, global: /\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)/, scope: { pattern: /\b[\w\\]+::/, inside: { keyword: /(static|self|parent)/, punctuation: /(::|\\)/ } } });
	Prism.languages.python = { "triple-quoted-string": { pattern: /"""[\s\S]+?"""|'''[\s\S]+?'''/, alias: "string" }, comment: { pattern: /(^|[^\\])#.*/, lookbehind: !0 }, string: { pattern: /("|')(?:\\\\|\\?[^\\\r\n])*?\1/, greedy: !0 }, "function": { pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_][a-zA-Z0-9_]*(?=\()/g, lookbehind: !0 }, "class-name": { pattern: /(\bclass\s+)[a-z0-9_]+/i, lookbehind: !0 }, keyword: /\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|with|yield)\b/, "boolean": /\b(?:True|False)\b/, number: /\b-?(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i, operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not)\b/, punctuation: /[{}[\];(),.:]/ };
	!function (a) {
	  var e = a.util.clone(a.languages.javascript);a.languages.jsx = a.languages.extend("markup", e), a.languages.jsx.tag.pattern = /<\/?[\w\.:-]+\s*(?:\s+[\w\.:-]+(?:=(?:("|')(\\?[\w\W])*?\1|[^\s'">=]+|(\{[\w\W]*?\})))?\s*)*\/?>/i, a.languages.jsx.tag.inside["attr-value"].pattern = /=[^\{](?:('|")[\w\W]*?(\1)|[^\s>]+)/i;var s = a.util.clone(a.languages.jsx);delete s.punctuation, s = a.languages.insertBefore("jsx", "operator", { punctuation: /=(?={)|[{}[\];(),.:]/ }, { jsx: s }), a.languages.insertBefore("inside", "attr-value", { script: { pattern: /=(\{(?:\{[^}]*\}|[^}])+\})/i, inside: s, alias: "language-javascript" } }, a.languages.jsx.tag);
	}(Prism);
	Prism.languages.scss = Prism.languages.extend("css", { comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0 }, atrule: { pattern: /@[\w-]+(?:\([^()]+\)|[^(])*?(?=\s+[{;])/, inside: { rule: /@[\w-]+/ } }, url: /(?:[-a-z]+-)*url(?=\()/i, selector: { pattern: /(?=\S)[^@;\{\}\(\)]?([^@;\{\}\(\)]|&|#\{\$[-_\w]+\})+(?=\s*\{(\}|\s|[^\}]+(:|\{)[^\}]+))/m, inside: { placeholder: /%[-_\w]+/ } } }), Prism.languages.insertBefore("scss", "atrule", { keyword: [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, { pattern: /( +)(?:from|through)(?= )/, lookbehind: !0 }] }), Prism.languages.insertBefore("scss", "property", { variable: /\$[-_\w]+|#\{\$[-_\w]+\}/ }), Prism.languages.insertBefore("scss", "function", { placeholder: { pattern: /%[-_\w]+/, alias: "selector" }, statement: /\B!(?:default|optional)\b/i, "boolean": /\b(?:true|false)\b/, "null": /\bnull\b/, operator: { pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|or|not)(?=\s)/, lookbehind: !0 } }), Prism.languages.scss.atrule.inside.rest = Prism.util.clone(Prism.languages.scss);
	Prism.languages.sql = { comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|(?:--|\/\/|#).*)/, lookbehind: !0 }, string: { pattern: /(^|[^@\\])("|')(?:\\?[\s\S])*?\2/, lookbehind: !0 }, variable: /@[\w.$]+|@("|'|`)(?:\\?[\s\S])+?\1/, "function": /\b(?:COUNT|SUM|AVG|MIN|MAX|FIRST|LAST|UCASE|LCASE|MID|LEN|ROUND|NOW|FORMAT)(?=\s*\()/i, keyword: /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR VARYING|CHARACTER (?:SET|VARYING)|CHARSET|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COLUMNS|COMMENT|COMMIT|COMMITTED|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|DATA(?:BASES?)?|DATETIME|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE(?: PRECISION)?|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE KEY|ELSE|ENABLE|ENCLOSED BY|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPE(?:D BY)?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTO|INVOKER|ISOLATION LEVEL|JOIN|KEYS?|KILL|LANGUAGE SQL|LAST|LEFT|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MODIFIES SQL DATA|MODIFY|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL(?: CHAR VARYING| CHARACTER(?: VARYING)?| VARCHAR)?|NATURAL|NCHAR(?: VARCHAR)?|NEXT|NO(?: SQL|CHECK|CYCLE)?|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READ(?:S SQL DATA|TEXT)?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEATABLE|REPLICATION|REQUIRE|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE MODE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|START(?:ING BY)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED BY|TEXT(?:SIZE)?|THEN|TIMESTAMP|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNPIVOT|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?)\b/i, "boolean": /\b(?:TRUE|FALSE|NULL)\b/i, number: /\b-?(?:0x)?\d*\.?[\da-f]+\b/, operator: /[-+*\/=%^~]|&&?|\|?\||!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i, punctuation: /[;[\]()`,.]/ };
	Prism.languages.swift = Prism.languages.extend("clike", { string: { pattern: /("|')(\\(?:\((?:[^()]|\([^)]+\))+\)|\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: !0, inside: { interpolation: { pattern: /\\\((?:[^()]|\([^)]+\))+\)/, inside: { delimiter: { pattern: /^\\\(|\)$/, alias: "variable" } } } } }, keyword: /\b(as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|Protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\b/, number: /\b([\d_]+(\.[\de_]+)?|0x[a-f0-9_]+(\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i, constant: /\b(nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/, atrule: /@\b(IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\b/, builtin: /\b([A-Z]\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\b/ }), Prism.languages.swift.string.inside.interpolation.inside.rest = Prism.util.clone(Prism.languages.swift);
	!function () {
	  "undefined" != typeof self && self.Prism && self.document && Prism.hooks.add("complete", function (e) {
	    if (e.code) {
	      var t = e.element.parentNode,
	          s = /\s*\bline-numbers\b\s*/;if (t && /pre/i.test(t.nodeName) && (s.test(t.className) || s.test(e.element.className)) && !e.element.querySelector(".line-numbers-rows")) {
	        s.test(e.element.className) && (e.element.className = e.element.className.replace(s, "")), s.test(t.className) || (t.className += " line-numbers");var n,
	            a = e.code.match(/\n(?!$)/g),
	            l = a ? a.length + 1 : 1,
	            m = new Array(l + 1);m = m.join("<span></span>"), n = document.createElement("span"), n.className = "line-numbers-rows", n.innerHTML = m, t.hasAttribute("data-start") && (t.style.counterReset = "linenumber " + (parseInt(t.getAttribute("data-start"), 10) - 1)), e.element.appendChild(n);
	      }
	    }
	  });
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * ghostHunter - 0.3.1
	 * Copyright (C) 2014 Jamal Neufeld (jamal@i11u.me)
	 * MIT Licensed
	 * @license
	 */
	(function ($) {
	
		/* The lunr 0.7.0 library is included here to perform the fulltext searching. lunr is copyright (C) 2016 Oliver Nightingale. MIT Licensed */
		var lunr = function lunr(t) {
			var e = new lunr.Index();return e.pipeline.add(lunr.stopWordFilter, lunr.stemmer), t && t.call(e, e), e;
		};lunr.version = "0.4.3", "undefined" != typeof module && (module.exports = lunr), lunr.utils = {}, lunr.utils.warn = function (t) {
			return function (e) {
				t.console && console.warn && console.warn(e);
			};
		}(this), lunr.utils.zeroFillArray = function () {
			var t = [0];return function (e) {
				for (; e > t.length;) {
					t = t.concat(t);
				}return t.slice(0, e);
			};
		}(), lunr.EventEmitter = function () {
			this.events = {};
		}, lunr.EventEmitter.prototype.addListener = function () {
			var t = Array.prototype.slice.call(arguments),
			    e = t.pop(),
			    n = t;if ("function" != typeof e) throw new TypeError("last argument must be a function");n.forEach(function (t) {
				this.hasHandler(t) || (this.events[t] = []), this.events[t].push(e);
			}, this);
		}, lunr.EventEmitter.prototype.removeListener = function (t, e) {
			if (this.hasHandler(t)) {
				var n = this.events[t].indexOf(e);this.events[t].splice(n, 1), this.events[t].length || delete this.events[t];
			}
		}, lunr.EventEmitter.prototype.emit = function (t) {
			if (this.hasHandler(t)) {
				var e = Array.prototype.slice.call(arguments, 1);this.events[t].forEach(function (t) {
					t.apply(void 0, e);
				});
			}
		}, lunr.EventEmitter.prototype.hasHandler = function (t) {
			return t in this.events;
		}, lunr.tokenizer = function (t) {
			if (!arguments.length || null == t || void 0 == t) return [];if (Array.isArray(t)) return t.map(function (t) {
				return t.toLowerCase();
			});for (var e = ("" + t).replace(/^\s+/, ""), n = e.length - 1; n >= 0; n--) {
				if (/\S/.test(e.charAt(n))) {
					e = e.substring(0, n + 1);break;
				}
			}return e.split(/\s+/).map(function (t) {
				return t.replace(/^\W+/, "").replace(/\W+$/, "").toLowerCase();
			});
		}, lunr.Pipeline = function () {
			this._stack = [];
		}, lunr.Pipeline.registeredFunctions = {}, lunr.Pipeline.registerFunction = function (t, e) {
			e in this.registeredFunctions && lunr.utils.warn("Overwriting existing registered function: " + e), t.label = e, lunr.Pipeline.registeredFunctions[t.label] = t;
		}, lunr.Pipeline.warnIfFunctionNotRegistered = function (t) {
			var e = t.label && t.label in this.registeredFunctions;e || lunr.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n", t);
		}, lunr.Pipeline.load = function (t) {
			var e = new lunr.Pipeline();return t.forEach(function (t) {
				var n = lunr.Pipeline.registeredFunctions[t];if (!n) throw Error("Cannot load un-registered function: " + t);e.add(n);
			}), e;
		}, lunr.Pipeline.prototype.add = function () {
			var t = Array.prototype.slice.call(arguments);t.forEach(function (t) {
				lunr.Pipeline.warnIfFunctionNotRegistered(t), this._stack.push(t);
			}, this);
		}, lunr.Pipeline.prototype.after = function (t, e) {
			lunr.Pipeline.warnIfFunctionNotRegistered(e);var n = this._stack.indexOf(t) + 1;this._stack.splice(n, 0, e);
		}, lunr.Pipeline.prototype.before = function (t, e) {
			lunr.Pipeline.warnIfFunctionNotRegistered(e);var n = this._stack.indexOf(t);this._stack.splice(n, 0, e);
		}, lunr.Pipeline.prototype.remove = function (t) {
			var e = this._stack.indexOf(t);this._stack.splice(e, 1);
		}, lunr.Pipeline.prototype.run = function (t) {
			for (var e = [], n = t.length, r = this._stack.length, o = 0; n > o; o++) {
				for (var i = t[o], s = 0; r > s && (i = this._stack[s](i, o, t), void 0 !== i); s++) {}void 0 !== i && e.push(i);
			}return e;
		}, lunr.Pipeline.prototype.toJSON = function () {
			return this._stack.map(function (t) {
				return lunr.Pipeline.warnIfFunctionNotRegistered(t), t.label;
			});
		}, lunr.Vector = function (t) {
			this.elements = t;
		}, lunr.Vector.prototype.magnitude = function () {
			if (this._magnitude) return this._magnitude;for (var t, e = 0, n = this.elements, r = n.length, o = 0; r > o; o++) {
				t = n[o], e += t * t;
			}return this._magnitude = Math.sqrt(e);
		}, lunr.Vector.prototype.dot = function (t) {
			for (var e = this.elements, n = t.elements, r = e.length, o = 0, i = 0; r > i; i++) {
				o += e[i] * n[i];
			}return o;
		}, lunr.Vector.prototype.similarity = function (t) {
			return this.dot(t) / (this.magnitude() * t.magnitude());
		}, lunr.Vector.prototype.toArray = function () {
			return this.elements;
		}, lunr.SortedSet = function () {
			this.length = 0, this.elements = [];
		}, lunr.SortedSet.load = function (t) {
			var e = new this();return e.elements = t, e.length = t.length, e;
		}, lunr.SortedSet.prototype.add = function () {
			Array.prototype.slice.call(arguments).forEach(function (t) {
				~this.indexOf(t) || this.elements.splice(this.locationFor(t), 0, t);
			}, this), this.length = this.elements.length;
		}, lunr.SortedSet.prototype.toArray = function () {
			return this.elements.slice();
		}, lunr.SortedSet.prototype.map = function (t, e) {
			return this.elements.map(t, e);
		}, lunr.SortedSet.prototype.forEach = function (t, e) {
			return this.elements.forEach(t, e);
		}, lunr.SortedSet.prototype.indexOf = function (t, e, n) {
			var e = e || 0,
			    n = n || this.elements.length,
			    r = n - e,
			    o = e + Math.floor(r / 2),
			    i = this.elements[o];return 1 >= r ? i === t ? o : -1 : t > i ? this.indexOf(t, o, n) : i > t ? this.indexOf(t, e, o) : i === t ? o : void 0;
		}, lunr.SortedSet.prototype.locationFor = function (t, e, n) {
			var e = e || 0,
			    n = n || this.elements.length,
			    r = n - e,
			    o = e + Math.floor(r / 2),
			    i = this.elements[o];if (1 >= r) {
				if (i > t) return o;if (t > i) return o + 1;
			}return t > i ? this.locationFor(t, o, n) : i > t ? this.locationFor(t, e, o) : void 0;
		}, lunr.SortedSet.prototype.intersect = function (t) {
			for (var e = new lunr.SortedSet(), n = 0, r = 0, o = this.length, i = t.length, s = this.elements, l = t.elements;;) {
				if (n > o - 1 || r > i - 1) break;s[n] !== l[r] ? s[n] < l[r] ? n++ : s[n] > l[r] && r++ : (e.add(s[n]), n++, r++);
			}return e;
		}, lunr.SortedSet.prototype.clone = function () {
			var t = new lunr.SortedSet();return t.elements = this.toArray(), t.length = t.elements.length, t;
		}, lunr.SortedSet.prototype.union = function (t) {
			var e, n, r;return this.length >= t.length ? (e = this, n = t) : (e = t, n = this), r = e.clone(), r.add.apply(r, n.toArray()), r;
		}, lunr.SortedSet.prototype.toJSON = function () {
			return this.toArray();
		}, lunr.Index = function () {
			this._fields = [], this._ref = "id", this.pipeline = new lunr.Pipeline(), this.documentStore = new lunr.Store(), this.tokenStore = new lunr.TokenStore(), this.corpusTokens = new lunr.SortedSet(), this.eventEmitter = new lunr.EventEmitter(), this._idfCache = {}, this.on("add", "remove", "update", function () {
				this._idfCache = {};
			}.bind(this));
		}, lunr.Index.prototype.on = function () {
			var t = Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter, t);
		}, lunr.Index.prototype.off = function (t, e) {
			return this.eventEmitter.removeListener(t, e);
		}, lunr.Index.load = function (t) {
			t.version !== lunr.version && lunr.utils.warn("version mismatch: current " + lunr.version + " importing " + t.version);var e = new this();return e._fields = t.fields, e._ref = t.ref, e.documentStore = lunr.Store.load(t.documentStore), e.tokenStore = lunr.TokenStore.load(t.tokenStore), e.corpusTokens = lunr.SortedSet.load(t.corpusTokens), e.pipeline = lunr.Pipeline.load(t.pipeline), e;
		}, lunr.Index.prototype.field = function (t, e) {
			var e = e || {},
			    n = { name: t, boost: e.boost || 1 };return this._fields.push(n), this;
		}, lunr.Index.prototype.ref = function (t) {
			return this._ref = t, this;
		}, lunr.Index.prototype.add = function (t, e) {
			var n = {},
			    r = new lunr.SortedSet(),
			    o = t[this._ref],
			    e = void 0 === e ? !0 : e;this._fields.forEach(function (e) {
				var o = this.pipeline.run(lunr.tokenizer(t[e.name]));n[e.name] = o, lunr.SortedSet.prototype.add.apply(r, o);
			}, this), this.documentStore.set(o, r), lunr.SortedSet.prototype.add.apply(this.corpusTokens, r.toArray());for (var i = 0; r.length > i; i++) {
				var s = r.elements[i],
				    l = this._fields.reduce(function (t, e) {
					var r = n[e.name].length;if (!r) return t;var o = n[e.name].filter(function (t) {
						return t === s;
					}).length;return t + o / r * e.boost;
				}, 0);this.tokenStore.add(s, { ref: o, tf: l });
			}e && this.eventEmitter.emit("add", t, this);
		}, lunr.Index.prototype.remove = function (t, e) {
			var n = t[this._ref],
			    e = void 0 === e ? !0 : e;if (this.documentStore.has(n)) {
				var r = this.documentStore.get(n);this.documentStore.remove(n), r.forEach(function (t) {
					this.tokenStore.remove(t, n);
				}, this), e && this.eventEmitter.emit("remove", t, this);
			}
		}, lunr.Index.prototype.update = function (t, e) {
			var e = void 0 === e ? !0 : e;this.remove(t, !1), this.add(t, !1), e && this.eventEmitter.emit("update", t, this);
		}, lunr.Index.prototype.idf = function (t) {
			if (this._idfCache[t]) return this._idfCache[t];var e = this.tokenStore.count(t),
			    n = 1;return e > 0 && (n = 1 + Math.log(this.tokenStore.length / e)), this._idfCache[t] = n;
		}, lunr.Index.prototype.search = function (t) {
			var e = this.pipeline.run(lunr.tokenizer(t)),
			    n = lunr.utils.zeroFillArray(this.corpusTokens.length),
			    r = [],
			    o = this._fields.reduce(function (t, e) {
				return t + e.boost;
			}, 0),
			    i = e.some(function (t) {
				return this.tokenStore.has(t);
			}, this);if (!i) return [];e.forEach(function (t, e, i) {
				var s = 1 / i.length * this._fields.length * o,
				    l = this,
				    u = this.tokenStore.expand(t).reduce(function (e, r) {
					var o = l.corpusTokens.indexOf(r),
					    i = l.idf(r),
					    u = 1,
					    a = new lunr.SortedSet();if (r !== t) {
						var h = Math.max(3, r.length - t.length);u = 1 / Math.log(h);
					}return o > -1 && (n[o] = s * i * u), Object.keys(l.tokenStore.get(r)).forEach(function (t) {
						a.add(t);
					}), e.union(a);
				}, new lunr.SortedSet());r.push(u);
			}, this);var s = r.reduce(function (t, e) {
				return t.intersect(e);
			}),
			    l = new lunr.Vector(n);return s.map(function (t) {
				return { ref: t, score: l.similarity(this.documentVector(t)) };
			}, this).sort(function (t, e) {
				return e.score - t.score;
			});
		}, lunr.Index.prototype.documentVector = function (t) {
			for (var e = this.documentStore.get(t), n = e.length, r = lunr.utils.zeroFillArray(this.corpusTokens.length), o = 0; n > o; o++) {
				var i = e.elements[o],
				    s = this.tokenStore.get(i)[t].tf,
				    l = this.idf(i);r[this.corpusTokens.indexOf(i)] = s * l;
			}return new lunr.Vector(r);
		}, lunr.Index.prototype.toJSON = function () {
			return { version: lunr.version, fields: this._fields, ref: this._ref, documentStore: this.documentStore.toJSON(), tokenStore: this.tokenStore.toJSON(), corpusTokens: this.corpusTokens.toJSON(), pipeline: this.pipeline.toJSON() };
		}, lunr.Store = function () {
			this.store = {}, this.length = 0;
		}, lunr.Store.load = function (t) {
			var e = new this();return e.length = t.length, e.store = Object.keys(t.store).reduce(function (e, n) {
				return e[n] = lunr.SortedSet.load(t.store[n]), e;
			}, {}), e;
		}, lunr.Store.prototype.set = function (t, e) {
			this.store[t] = e, this.length = Object.keys(this.store).length;
		}, lunr.Store.prototype.get = function (t) {
			return this.store[t];
		}, lunr.Store.prototype.has = function (t) {
			return t in this.store;
		}, lunr.Store.prototype.remove = function (t) {
			this.has(t) && (delete this.store[t], this.length--);
		}, lunr.Store.prototype.toJSON = function () {
			return { store: this.store, length: this.length };
		}, lunr.stemmer = function () {
			var t = { ational: "ate", tional: "tion", enci: "ence", anci: "ance", izer: "ize", bli: "ble", alli: "al", entli: "ent", eli: "e", ousli: "ous", ization: "ize", ation: "ate", ator: "ate", alism: "al", iveness: "ive", fulness: "ful", ousness: "ous", aliti: "al", iviti: "ive", biliti: "ble", logi: "log" },
			    e = { icate: "ic", ative: "", alize: "al", iciti: "ic", ical: "ic", ful: "", ness: "" },
			    n = "[^aeiou]",
			    r = "[aeiouy]",
			    o = n + "[^aeiouy]*",
			    i = r + "[aeiou]*",
			    s = "^(" + o + ")?" + i + o,
			    l = "^(" + o + ")?" + i + o + "(" + i + ")?$",
			    u = "^(" + o + ")?" + i + o + i + o,
			    a = "^(" + o + ")?" + r;return function (n) {
				var i, h, c, p, f, d, v;if (3 > n.length) return n;if (c = n.substr(0, 1), "y" == c && (n = c.toUpperCase() + n.substr(1)), p = /^(.+?)(ss|i)es$/, f = /^(.+?)([^s])s$/, p.test(n) ? n = n.replace(p, "$1$2") : f.test(n) && (n = n.replace(f, "$1$2")), p = /^(.+?)eed$/, f = /^(.+?)(ed|ing)$/, p.test(n)) {
					var m = p.exec(n);p = RegExp(s), p.test(m[1]) && (p = /.$/, n = n.replace(p, ""));
				} else if (f.test(n)) {
					var m = f.exec(n);i = m[1], f = RegExp(a), f.test(i) && (n = i, f = /(at|bl|iz)$/, d = RegExp("([^aeiouylsz])\\1$"), v = RegExp("^" + o + r + "[^aeiouwxy]$"), f.test(n) ? n += "e" : d.test(n) ? (p = /.$/, n = n.replace(p, "")) : v.test(n) && (n += "e"));
				}if (p = /^(.+?)y$/, p.test(n)) {
					var m = p.exec(n);i = m[1], p = RegExp(a), p.test(i) && (n = i + "i");
				}if (p = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/, p.test(n)) {
					var m = p.exec(n);i = m[1], h = m[2], p = RegExp(s), p.test(i) && (n = i + t[h]);
				}if (p = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/, p.test(n)) {
					var m = p.exec(n);i = m[1], h = m[2], p = RegExp(s), p.test(i) && (n = i + e[h]);
				}if (p = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/, f = /^(.+?)(s|t)(ion)$/, p.test(n)) {
					var m = p.exec(n);i = m[1], p = RegExp(u), p.test(i) && (n = i);
				} else if (f.test(n)) {
					var m = f.exec(n);i = m[1] + m[2], f = RegExp(u), f.test(i) && (n = i);
				}if (p = /^(.+?)e$/, p.test(n)) {
					var m = p.exec(n);i = m[1], p = RegExp(u), f = RegExp(l), d = RegExp("^" + o + r + "[^aeiouwxy]$"), (p.test(i) || f.test(i) && !d.test(i)) && (n = i);
				}return p = /ll$/, f = RegExp(u), p.test(n) && f.test(n) && (p = /.$/, n = n.replace(p, "")), "y" == c && (n = c.toLowerCase() + n.substr(1)), n;
			};
		}(), lunr.Pipeline.registerFunction(lunr.stemmer, "stemmer"), lunr.stopWordFilter = function (t) {
			return -1 === lunr.stopWordFilter.stopWords.indexOf(t) ? t : void 0;
		}, lunr.stopWordFilter.stopWords = new lunr.SortedSet(), lunr.stopWordFilter.stopWords.length = 119, lunr.stopWordFilter.stopWords.elements = ["", "a", "able", "about", "across", "after", "all", "almost", "also", "am", "among", "an", "and", "any", "are", "as", "at", "be", "because", "been", "but", "by", "can", "cannot", "could", "dear", "did", "do", "does", "either", "else", "ever", "every", "for", "from", "get", "got", "had", "has", "have", "he", "her", "hers", "him", "his", "how", "however", "i", "if", "in", "into", "is", "it", "its", "just", "least", "let", "like", "likely", "may", "me", "might", "most", "must", "my", "neither", "no", "nor", "not", "of", "off", "often", "on", "only", "or", "other", "our", "own", "rather", "said", "say", "says", "she", "should", "since", "so", "some", "than", "that", "the", "their", "them", "then", "there", "these", "they", "this", "tis", "to", "too", "twas", "us", "wants", "was", "we", "were", "what", "when", "where", "which", "while", "who", "whom", "why", "will", "with", "would", "yet", "you", "your"], lunr.Pipeline.registerFunction(lunr.stopWordFilter, "stopWordFilter"), lunr.TokenStore = function () {
			this.root = { docs: {} }, this.length = 0;
		}, lunr.TokenStore.load = function (t) {
			var e = new this();return e.root = t.root, e.length = t.length, e;
		}, lunr.TokenStore.prototype.add = function (t, e, n) {
			var n = n || this.root,
			    r = t[0],
			    o = t.slice(1);return r in n || (n[r] = { docs: {} }), 0 === o.length ? (n[r].docs[e.ref] = e, this.length += 1, void 0) : this.add(o, e, n[r]);
		}, lunr.TokenStore.prototype.has = function (t) {
			if (!t) return !1;for (var e = this.root, n = 0; t.length > n; n++) {
				if (!e[t[n]]) return !1;e = e[t[n]];
			}return !0;
		}, lunr.TokenStore.prototype.getNode = function (t) {
			if (!t) return {};for (var e = this.root, n = 0; t.length > n; n++) {
				if (!e[t[n]]) return {};e = e[t[n]];
			}return e;
		}, lunr.TokenStore.prototype.get = function (t, e) {
			return this.getNode(t, e).docs || {};
		}, lunr.TokenStore.prototype.count = function (t, e) {
			return Object.keys(this.get(t, e)).length;
		}, lunr.TokenStore.prototype.remove = function (t, e) {
			if (t) {
				for (var n = this.root, r = 0; t.length > r; r++) {
					if (!(t[r] in n)) return;n = n[t[r]];
				}delete n.docs[e];
			}
		}, lunr.TokenStore.prototype.expand = function (t, e) {
			var n = this.getNode(t),
			    r = n.docs || {},
			    e = e || [];return Object.keys(r).length && e.push(t), Object.keys(n).forEach(function (n) {
				"docs" !== n && e.concat(this.expand(t + n, e));
			}, this), e;
		}, lunr.TokenStore.prototype.toJSON = function () {
			return { root: this.root, length: this.length };
		};
	
		//This is the main plugin definition
		$.fn.ghostHunter = function (options) {
	
			//Here we use jQuery's extend to set default values if they weren't set by the user
			var opts = $.extend({}, $.fn.ghostHunter.defaults, options);
			if (opts.results) {
				pluginMethods.init(this, opts);
				return pluginMethods;
			}
		};
	
		$.fn.ghostHunter.defaults = {
			results: false,
			onKeyUp: false,
			result_template: "<a href='{{link}}'><p><h2>{{title}}</h2><h4>{{prettyPubDate}}</h4></p></a>",
			info_template: "<p>Number of posts found: {{amount}}</p>",
			displaySearchInfo: true,
			zeroResultsInfo: true,
			before: false,
			onComplete: false
		};
	
		var prettyDate = function prettyDate(date) {
			var d = new Date(date);
			var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
			return d.getDate() + ' ' + monthNames[d.getMonth()] + ' ' + d.getFullYear();
		};
	
		var pluginMethods = {
	
			isInit: false,
	
			init: function init(target, opts) {
	
				var that = this;
				this.target = target;
				this.results = opts.results;
				this.blogData = {};
				this.result_template = opts.result_template;
				this.info_template = opts.info_template;
				this.zeroResultsInfo = opts.zeroResultsInfo;
				this.displaySearchInfo = opts.displaySearchInfo;
				this.before = opts.before;
				this.onComplete = opts.onComplete;
	
				//This is where we'll build the index for later searching. It's not a big deal to build it on every load as it takes almost no space without data
				this.index = lunr(function () {
					this.field('title', { boost: 10 });
					this.field('description');
					this.field('link');
					this.field('markdown', { boost: 5 });
					this.field('pubDate');
					this.field('tag');
					this.ref('id');
				});
	
				target.focus(function () {
					that.loadAPI();
				});
	
				target.closest("form").submit(function (e) {
					e.preventDefault();
					that.find(target.val());
				});
	
				if (opts.onKeyUp) {
					that.loadAPI();
					target.keyup(function () {
						that.find(target.val());
					});
				}
			},
	
			loadAPI: function loadAPI() {
	
				if (this.isInit) return false;
	
				/*	Here we load all of the blog posts to the index.
	   	This function will not call on load to avoid unnecessary heavy
	   	operations on a page if a visitor never ends up searching anything. */
	
				var index = this.index,
				    blogData = this.blogData;
	
				$.get(ghost.url.api('posts', { limit: "all", include: "tags" })).done(function (data) {
					var searchData = data.posts;
					searchData.forEach(function (arrayItem) {
						var tag_arr = arrayItem.tags.map(function (v) {
							return v.name; // `tag` object has an `name` property which is the value of tag. If you also want other info, check API and get that property
						});
						var category = tag_arr.join(", ");
						if (category.length < 1) {
							category = "undefined";
						}
						var parsedData = {
							id: String(arrayItem.id),
							title: String(arrayItem.title),
							description: String(arrayItem.meta_description),
							markdown: String(arrayItem.markdown),
							pubDate: String(arrayItem.created_at),
							tag: category,
							link: String(arrayItem.url)
						};
	
						parsedData.prettyPubDate = prettyDate(parsedData.pubDate);
						var tempdate = prettyDate(parsedData.pubDate);
	
						index.add(parsedData);
						blogData[arrayItem.id] = { title: arrayItem.title, description: arrayItem.meta_description, pubDate: tempdate, link: arrayItem.url };
					});
				});
	
				this.isInit = true;
			},
	
			find: function find(value) {
				var searchResult = this.index.search(value);
				var results = $(this.results);
				var resultsData = [];
				results.empty();
	
				if (this.before) {
					this.before();
				};
	
				if (this.zeroResultsInfo || searchResult.length > 0) {
					if (this.displaySearchInfo) results.append(this.format(this.info_template, { "amount": searchResult.length }));
				}
	
				for (var i = 0; i < searchResult.length; i++) {
					var lunrref = searchResult[i].ref;
					var postData = this.blogData[lunrref];
					results.append(this.format(this.result_template, postData));
					resultsData.push(postData);
				}
	
				if (this.onComplete) {
					this.onComplete(resultsData);
				};
			},
	
			clear: function clear() {
				$(this.results).empty();
				this.target.val("");
			},
	
			format: function format(t, d) {
				return t.replace(/{{([^{}]*)}}/g, function (a, b) {
					var r = d[b];
					return typeof r === 'string' || typeof r === 'number' ? r : a;
				});
			}
		};
	})(jQuery);

/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
	* @package godofredoninja
	* Share social media
	*/
	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GodoShare = function () {
		function GodoShare(elem) {
			_classCallCheck(this, GodoShare);
	
			this.elem = elem;
		}
	
		/**
	    *  @function godoValue
	    *  @description Helper to get the attribute of a DOM element
	    *  @param {String} attr DOM element attribute
	    *  @returns {String|Empty} returns the attr value or empty string
	    */
	
	
		_createClass(GodoShare, [{
			key: 'godoValue',
			value: function godoValue(a) {
				var val = this.elem.attr('godo-' + a);
				return val === undefined || val === null ? false : val;
			}
	
			/**
	      * @event godoShare
	      * @description Main share event. Will pop a window or redirect to a link
	      */
	
		}, {
			key: 'godoShare',
			value: function godoShare() {
				var share_name = this.godoValue('share').toLowerCase(),
				    share_social = {
					facebook: {
						shareUrl: 'https://www.facebook.com/sharer/sharer.php',
						params: { u: this.godoValue('url') }
					},
					twitter: {
						shareUrl: 'https://twitter.com/intent/tweet/',
						params: {
							text: this.godoValue('title'),
							url: this.godoValue('url')
						}
					},
					reddit: {
						shareUrl: 'https://www.reddit.com/submit',
						params: { 'url': this.godoValue('url') }
					},
					pinterest: {
						shareUrl: 'https://www.pinterest.com/pin/create/button/',
						params: {
							url: this.godoValue('url'),
							description: this.godoValue('title')
						}
					},
					pocket: {
						shareUrl: 'https://getpocket.com/save',
						params: {
							url: this.godoValue('url')
						}
					}
				},
				    s = share_social[share_name];
	
				return s !== undefined ? this.godoPopup(s) : false;
			}
	
			/**
	      * @event godoPopup
	      * @param {Object} share
	      */
	
		}, {
			key: 'godoPopup',
			value: function godoPopup(share) {
				var p = share.params || {},
				    keys = Object.keys(p),
				    i,
				    str = keys.length > 0 ? '?' : '';
	
				for (i = 0; i < keys.length; i++) {
					if (str !== '?') {
						str += '&';
					}
					if (p[keys[i]]) {
						str += keys[i] + '=' + encodeURIComponent(p[keys[i]]);
					}
				}
	
				share.shareUrl += str;
	
				if (!share.isLink) {
					var popWidth = share.width || 600,
					    popHeight = share.height || 480,
					    left = window.innerWidth / 2 - popWidth / 2 + window.screenX,
					    top = window.innerHeight / 2 - popHeight / 2 + window.screenY,
					    popParams = 'scrollbars=no, width=' + popWidth + ', height=' + popHeight + ', top=' + top + ', left=' + left,
					    newWindow = window.open(share.shareUrl, '', popParams);
	
					if (window.focus) {
						newWindow.focus();
					}
				} else {
					window.location.href = share.shareUrl;
				}
			}
		}]);
	
		return GodoShare;
	}();
	
	module.exports = GodoShare;

/***/ },
/* 4 */
/***/ function(module, exports) {

	/*
	* @package godofredoninja
	*  Share count social media
	*/
	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GodoShareCount = function () {
		function GodoShareCount(elem) {
			_classCallCheck(this, GodoShareCount);
	
			this.elem = elem;
			this.url = elem.attr('data-url');
			this.total = 0;
		}
	
		/**
	  * @function convertNumber
	  * @description  Return rounded and pretty value of share count.
	  */
	
	
		_createClass(GodoShareCount, [{
			key: 'convertNumber',
			value: function convertNumber(n) {
				if (n >= 1000000000) return (n / 1000000000).toFixed(1) + 'G';
				if (n >= 1000000) return (n / 1000000).toFixed(1) + 'M';
				if (n >= 1000) return (n / 1000).toFixed(1) + 'K';
				return n;
			}
	
			/**
	   * @function updateCounter
	   * @description  adds all the number of shared pages
	   */
	
		}, {
			key: 'addCounter',
			value: function addCounter(n) {
				this.total = this.total + n;
			}
	
			/**
	   * @function updateCounter
	   * @description  update the number of shares.
	   */
	
		}, {
			key: 'updateCounter',
			value: function updateCounter() {
				this.elem.html('<span style="margin-right:5px"><strong>' + this.convertNumber(this.total) + '</strong></span><span>Shares</span>');
			}
		}, {
			key: 'godoCount',
			value: function godoCount() {
				var _this = this;
	
				$.getJSON('https://graph.facebook.com/?id=' + encodeURIComponent(this.url) + '&callback=?', function (response) {
					if (response.shares === undefined) _this.addCounter(0);else _this.addCounter(response.shares);
					_this.updateCounter();
				});
			}
		}]);
	
		return GodoShareCount;
	}();
	
	module.exports = GodoShareCount;

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	$(document).on('ready', function () {
	    var page = 2;
	
	    var $pagination = $('#pagination'),
	        pageTotal = $pagination.attr('mapache-page'),
	        pageLimit = $pagination.attr('mapache-limit'),
	        urlPage = $('link[rel=canonical]').attr('href'),
	        $win = $(window);
	
	    if (pageTotal >= page) {
	        $('.pagination').css('display', 'block');
	        infiniteScroll();
	    }
	
	    function infiniteScroll() {
	        $win.on('scroll', function () {
	            if ($win.scrollTop() + $win.height() == $(document).height()) {
	
	                $pagination.addClass('loanding').html('Loading more');
	
	                if (page <= pageTotal) {
	                    getPost();
	                } else {
	                    $('.pagination').remove();
	                }
	            }
	        });
	    }
	
	    function getPost() {
	        fetch(urlPage + 'page/' + page).then(function (res) {
	            return res.text();
	        }).then(function (body) {
	
	            setTimeout(function () {
	                var entries = $('.entry-list', body);
	                $('#entry').append(entries);
	                $pagination.removeClass('loanding').html('Load more');
	                page++;
	            }, 1000);
	        });
	    }
	});

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var mapacheRelated = function () {
	    function mapacheRelated(elem) {
	        _classCallCheck(this, mapacheRelated);
	
	        this.elem = elem;
	        this.postID = elem.attr('mapache-post-id');
	        this.postTotal = elem.attr('mapache-post-total');
	        this.postTags = elem.attr('mapache-tag');
	        this.urlApi = ghost.url.api('posts', { include: 'tags' });
	        this.count = 0;
	    }
	
	    /**
	     * Display Post
	     * @method mapacheCallback
	     * @param  {res} All post Json
	     * @return {html} Append in #related-wrap
	     */
	
	
	    _createClass(mapacheRelated, [{
	        key: 'mapacheCallback',
	        value: function mapacheCallback(res) {
	            var _this = this;
	
	            var html = '';
	            res.forEach(function (post) {
	                for (var i = 0; i < post.tags.length; i++) {
	                    if (post.tags[i].id == _this.postTags && post.id != _this.postID) {
	                        if (_this.count < _this.postTotal) {
	                            html += _this.mapacheTemplate(post);
	                            _this.count++;
	                        }
	                    }
	                }
	            });
	
	            if (this.count == 0) {
	                this.elem.css('display', 'none');
	            }
	
	            $('#related-wrap').html(html);
	        }
	
	        /**
	         * Template related post
	         * @method mapacheTemplate
	         * @param  {post} Content Json post
	         * @return {html} content related post
	         */
	
	    }, {
	        key: 'mapacheTemplate',
	        value: function mapacheTemplate(post) {
	            var html = '',
	                post_image = '',
	                post_no_cover = 'no-image',
	                post_title = post.title,
	                post_url = post.url;
	
	            if (post.image != null) {
	                post_image = '\n            <figure class="image">\n                <a href="' + post_url + '" class="image-link">\n                    <span class="entries-bg" style="background-image:url(' + post.image + ')"></span>\n                </a>\n            </figure>';
	
	                post_no_cover = '';
	            }
	
	            html = '\n        <div class="col m4 ' + post_no_cover + '">\n            <div class="related-posts-list">\n                ' + post_image + '\n                <h2 class="title"><a href="' + post_url + '">' + post_title + '</a></h2>\n            </div>\n        </div>';
	
	            return html;
	        }
	
	        /**
	         * Get api ghost
	         * @method mapacheGet
	         * @return {res} Json all Post
	         */
	
	    }, {
	        key: 'mapacheGet',
	        value: function mapacheGet() {
	            var _this2 = this;
	
	            fetch(this.urlApi).then(function (res) {
	                return res.json();
	            }).then(function (json) {
	                _this2.mapacheCallback(json.posts);
	            });
	        }
	    }]);
	
	    return mapacheRelated;
	}();
	
	module.exports = mapacheRelated;

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgODcyMjFhMzg0ZjViMGVmZjU3YzkiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbGliL3ByaXNtLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9saWIvanF1ZXJ5Lmdob3N0SHVudGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9hcHAvYXBwLnNoYXJlLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9hcHAvYXBwLnNoYXJlLWNvdW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9hcHAvYXBwLnBhZ2luYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC9hcHAucmVsYXRlZC5wb3N0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7QUNUQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU1BLEVBQUMsWUFBVzs7O0FBR1IsU0FBTSxhQUFvQixFQUFFLFNBQUYsQ0FBMUI7U0FDSSxXQUFzQixFQUFFLGNBQUYsQ0FEMUI7U0FFSSxZQUFzQixFQUFFLFFBQUYsQ0FGMUI7U0FHSSxpQkFBc0IsRUFBRSxhQUFGLENBSDFCO1NBSUksYUFBc0IsRUFBRSxnQkFBRixDQUoxQjtTQUtJLG1CQUFzQixFQUFFLGVBQUYsQ0FMMUI7U0FNSSxlQUFzQixFQUFFLFdBQUYsQ0FOMUI7U0FPSSxjQUFzQixFQUFFLFVBQUYsQ0FQMUI7U0FRSSxvQkFBc0IsRUFBRSxtQkFBRixDQVIx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QkFBSSxPQUFrQixFQUF0QjtpQkFDSSxhQUFrQixFQUR0QjtpQkFFSSxnQkFBa0IsVUFGdEI7aUJBR0ksYUFBa0IsS0FBSyxLQUgzQjtpQkFJSSxXQUFrQixLQUFLLEdBSjNCOztBQU1BLGlCQUFJLEtBQUssS0FBTCxJQUFjLElBQWxCLEVBQXdCO0FBQ3BCLGtHQUVlLFFBRmYsd0dBRytELEtBQUssS0FIcEU7O0FBT0EsaUNBQWUsRUFBZjtBQUNIOztBQUVELHNEQUNxQixhQURyQiwwRUFHVSxVQUhWLHFEQUlxQyxRQUpyQyxVQUlrRCxVQUpsRDs7QUFRQSxvQkFBTyxJQUFQO0FBQ0g7Ozs7Ozs7Ozs7c0NBT1c7QUFBQTs7QUFDUixtQkFBTSxLQUFLLE1BQVgsRUFDQyxJQURELENBQ08sZUFBTztBQUNWLHdCQUFPLElBQUksSUFBSixFQUFQO0FBQ0gsY0FIRCxFQUlDLElBSkQsQ0FJTyxnQkFBUTtBQUNYLHdCQUFLLGVBQUwsQ0FBc0IsS0FBSyxLQUEzQjtBQUNILGNBTkQ7QUFPSDs7Ozs7O0FBSUwsUUFBTyxPQUFQLEdBQWlCLGNBQWpCLEMiLCJmaWxlIjoiYnVuZGxlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgODcyMjFhMzg0ZjViMGVmZjU3YzlcbiAqKi8iLCIvKlxuQHBhY2thZ2UgZ29kb2ZyZWRvbmluamFcblxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5NYXBhY2hlIEphdmFzY3JpcHQgRnVuY3Rpb25zXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiovXG5cbi8qKlxuKiBUYWJsZSBvZiBDb250ZW50czpcbipcbiogICAgICAgMS4gSW1wb3J0cyBsaWJyYXJpcyBhbmQgbW9kdWxlc1xuKiAgICAgIDIuIHZhcmlhYmxlcyBHbG9iYWxzXG4qICAgICAgMy4gRnVuY3Rpb25zXG4qICAgICAgNC4gU2VhcmNoIGhlYWRlclxuKiAgICAgIDUuIE9wZW5hIGFuZCBjbG9zZSBtZW51IG1vYmlsZVxuKiAgICAgIDYuIFZpZGVvIFJlc3BvbnNpdmUgeW91dHViZSBhbmQgdmltZW9cbiogICAgICA3LiBoZWFkZXIgdHJhbnNwYXJlbnRcbiogICAgICA4LiBTaGFyZSBzb2NpYWxcbiogICAgICA5LiBTaGFyZSBjb3VudCBzb2NpYWwgbWVkaWFcbiogICAgICAxMC4gU29jaWFsIExpbmsgSGVhZGVyXG4qICAgICAgMTEuIERpc3F1cyBDb21tZW50c1xuKi9cblxuXG4vKiAxLiBJbXBvcnRzIGFuZCBsaWJyYXJpcyBhbmQgbW9kdWxlc1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLy8gaW1wb3J0IHplcHRvICAgICAgICBmcm9tIFwiLi9saWIvemVwdG8uanNcIjtcbi8vIGltcG9ydCAkICAgICAgICAgICAgZnJvbSBcImpRdWVyeVwiO1xuaW1wb3J0IHByaXNtICAgICAgICAgICAgZnJvbSBcIi4vbGliL3ByaXNtLmpzXCI7XG5pbXBvcnQgc2VhcmNoICAgICAgICAgICBmcm9tICcuL2xpYi9qcXVlcnkuZ2hvc3RIdW50ZXIuanMnXG5pbXBvcnQgbWFwYWNoZVNoYXJlICAgICBmcm9tICcuL2FwcC9hcHAuc2hhcmUnO1xuaW1wb3J0IHNoYXJlQ291bnQgICAgICAgZnJvbSAnLi9hcHAvYXBwLnNoYXJlLWNvdW50JztcbmltcG9ydCBwYWdpbmF0aW9uICAgICAgIGZyb20gJy4vYXBwL2FwcC5wYWdpbmF0aW9uJztcbmltcG9ydCBtYXBhY2hlUmVsYXRlZCAgIGZyb20gJy4vYXBwL2FwcC5yZWxhdGVkLnBvc3QnO1xuXG4vLyBpbXBvcnQgICAgICAgICAgICAgICcuLi9zYXNzL21haW4uc2Nzcyc7XG5cblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKiAyLiB2YXJpYWJsZXMgZ2xvYmFscyAqL1xuICAgIGNvbnN0ICRnZF9oZWFkZXIgICAgICAgID0gJCgnI2hlYWRlcicpLFxuICAgICAgICAkZ2RfbWVudSAgICAgICAgICAgID0gJCgnI21lbnUtbW9iaWxlJyksXG4gICAgICAgICRnZF9jb3ZlciAgICAgICAgICAgPSAkKCcjY292ZXInKSxcbiAgICAgICAgJGdkX3NlYXJjaF9idG4gICAgICA9ICQoJyNzZWFyY2gtYnRuJyksXG4gICAgICAgICRnZF9zZWFyY2ggICAgICAgICAgPSAkKCcjaGVhZGVyLXNlYXJjaCcpLFxuICAgICAgICAkZ2Rfc2VhcmNoX2lucHV0ICAgID0gJCgnLnNlYXJjaC1maWVsZCcpLFxuICAgICAgICAkZ2RfY29tbWVudHMgICAgICAgID0gJCgnI2NvbW1lbnRzJyksXG4gICAgICAgICRnZF9yZWxhdGVkICAgICAgICAgPSAkKCcjcmVsYXRlZCcpLFxuICAgICAgICAkZ2RfY29tbWVudF9jb3VudCAgID0gJCgnLmdkLWNvbW1lbnRfY291bnQnKSxcbiAgICAgICAgJGdkX3NoYXJlX2NvdW50ICAgICA9ICQoJy5zaGFyZS1jb3VudCcpLFxuICAgICAgICAkZ2RfdmlkZW8gICAgICAgICAgID0gJCgnI3ZpZGVvLWZvcm1hdCcpLFxuICAgICAgICAkZ2Rfc2lkZWJhcl9maXhlZCAgICA9ICQoJyNzaWRlYmFyJykuZmluZCgnLmZpeGVkJyksXG5cbiAgICAgICAgdXJsX3JlZ2V4cCBcdFx0XHQ9IC9eKGh0dHBzPzpcXC9cXC8pPyhbXFxkYS16XFwuLV0rKVxcLihbYS16XFwuXXsyLDZ9KShbXFwvXFx3IFxcLi1dKikqXFwvPyQvO1xuXG4gICAgdmFyICRkb2N1bWVudCAgID0gJChkb2N1bWVudCksXG4gICAgICAgICR3aW5kb3cgICAgID0gJCh3aW5kb3cpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJ1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQb3N0IHJlbGF0ZWRcbiAgICAgKi9cbiAgICAkZG9jdW1lbnQub24oJ3JlYWR5JywgKCkgPT57XG4gICAgICAgIGlmICgkZ2RfcmVsYXRlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgcmVsYXRlZCA9IG5ldyBtYXBhY2hlUmVsYXRlZCgkZ2RfcmVsYXRlZCk7XG4gICAgICAgICAgICByZWxhdGVkLm1hcGFjaGVHZXQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uc1xuICAgICAqL1xuICAgICQoJy5zaGFyZScpLmJpbmQoJ2NsaWNrJywgc2hhcmVTb2NpYWwpO1xuICAgICRkb2N1bWVudC5vbignbW91c2V1cCcsIG1vdXNlVXApO1xuXG4gICAgLyoqXG4gICAgICogbWVudSBNb2JpbGUgb3BlblxuICAgICAqL1xuICAgICQoJyNtZW51LW9wZW4nKS5vbignY2xpY2snLCBlID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkKCdodG1sJykuYXR0cignbWFwYWNoZS1zdGF0ZScsJ25vLXNjcm9sbCcpO1xuICAgICAgICAkKCcub3ZlcmxheScpLmNzcyhvdmVybGF5KTtcbiAgICAgICAgJGdkX21lbnUuYWRkQ2xhc3MoJ29wZW4nKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIE1lbnUgQ2xvc2UgTW9iaWxlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVudUNsb3NlKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkKCdodG1sJykucmVtb3ZlQXR0cignbWFwYWNoZS1zdGF0ZScpO1xuICAgICAgICAkKCcub3ZlcmxheScpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICRnZF9tZW51LnJlbW92ZUNsYXNzKCdvcGVuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIEZ1bmN0aW9ucyBNb3VzZVVwXG4gICAgICovXG4gICAgZnVuY3Rpb24gbW91c2VVcChlKSB7XG4gICAgICAgIGlmKCAkZ2RfbWVudS5oYXNDbGFzcygnb3BlbicpICYmICRnZF9tZW51LmhhcyhlLnRhcmdldCkubGVuZ3RoID09PSAwICl7XG4gICAgICAgICAgICBtZW51Q2xvc2UoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgU2VhcmNoIE9wZW4gYW5kIGNsb3NlIG1vYmlsZVxuICAgICAqL1xuICAgICRnZF9zZWFyY2hfYnRuLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdpLXNlYXJjaCcpO1xuICAgICAgICAkZ2RfaGVhZGVyLnRvZ2dsZUNsYXNzKCdyZXNwb25zaXZlLXNlYXJjaC1vcGVuJyk7XG4gICAgICAgICRnZF9zZWFyY2hfaW5wdXQuZm9jdXMoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNlYXJjaCBvcGVuIGFuIGNsb3NlIGRlc2t0b3AuXG4gICAgICogQXBpIGdob3N0IGZvciBzZWFyY2hcbiAgICAgKi9cbiAgICAkZG9jdW1lbnQub24oJ3JlYWR5JywgKCkgPT4ge1xuXG4gICAgICAgICRnZF9zZWFyY2hfaW5wdXQuZm9jdXMoICgpID0+IHtcbiAgICAgICAgICAgICRnZF9oZWFkZXIuYWRkQ2xhc3MoJ3NlYXJjaC1hY3RpdmUnKTtcbiAgICAgICAgICAgICQoJy5zZWFyY2gtcG9wb3V0JykucmVtb3ZlQ2xhc3MoJ2Nsb3NlZCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkZ2Rfc2VhcmNoX2lucHV0LmJsdXIoICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgICAgICAgICAgICAkZ2RfaGVhZGVyLnJlbW92ZUNsYXNzKCdzZWFyY2gtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgJCgnLnNlYXJjaC1wb3BvdXQnKS5hZGRDbGFzcygnY2xvc2VkJyk7XG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9KTtcblxuICAgICAgICAkZ2Rfc2VhcmNoX2lucHV0LmtleXVwKCAoKSA9PiAge1xuICAgICAgICAgICAgJCgnLnNlYXJjaC1zdWdnZXN0LXJlc3VsdHMnKS5jc3MoJ2Rpc3BsYXknLCdibG9jaycpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkZ2Rfc2VhcmNoX2lucHV0Lmdob3N0SHVudGVyKHtcbiAgICAgICAgICAgIHJlc3VsdHMgICAgICAgICAgICAgOiBcIiNzZWFyY2gtcmVzdWx0c1wiLFxuICAgICAgICAgICAgemVyb1Jlc3VsdHNJbmZvICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgZGlzcGxheVNlYXJjaEluZm8gICA6IGZhbHNlLFxuICAgICAgICAgICAgcmVzdWx0X3RlbXBsYXRlICAgICA6ICc8YSBocmVmPVwie3tsaW5rfX1cIj57e3RpdGxlfX08L2E+JyxcbiAgICAgICAgICAgIG9uS2V5VXAgICAgICAgICAgICAgOiB0cnVlLFxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSGVhZGVyIGJveCBzaGFkb3cgYW5kIHRyYW5zcGFyZW50XG4gICAgICovXG4gICAgJGRvY3VtZW50Lm9uKCdyZWFkeScsICgpID0+IHtcblxuICAgICAgIGlmKCAkZ2RfY292ZXIubGVuZ3RoID4gMCApIHtcbiAgICAgICAgICAgICRnZF9oZWFkZXIuY3NzKCdiYWNrZ3JvdW5kJywndHJhbnNwYXJlbnQnKTtcbiAgICAgICAgICAgICR3aW5kb3cub24oJ3Njcm9sbCcsIGNvdmVyU2Nyb2xsKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAkZ2RfaGVhZGVyLmFkZENsYXNzKCd0b29sYmFyLXNoYWRvdycpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY292ZXJTY3JvbGwoKXtcbiAgICAgICAgICAgIGxldCBzY3JvbGxUb3AgICAgICAgICA9ICR3aW5kb3cuc2Nyb2xsVG9wKCksXG4gICAgICAgICAgICAgICAgZ2RfY292ZXJfaGVpZ2h0ICAgPSAkZ2RfY292ZXIuaGVpZ2h0KCkgLSAkZ2RfaGVhZGVyLmhlaWdodCgpLFxuICAgICAgICAgICAgICAgIGdkX2NvdmVyX3dyYXAgICAgID0gKCBnZF9jb3Zlcl9oZWlnaHQgLSBzY3JvbGxUb3AgKSAvIGdkX2NvdmVyX2hlaWdodDtcblxuICAgICAgICAgICAgaWYgKCBzY3JvbGxUb3AgPj0gZ2RfY292ZXJfaGVpZ2h0ICkge1xuICAgICAgICAgICAgICAgICRnZF9oZWFkZXIuYWRkQ2xhc3MoJ3Rvb2xiYXItc2hhZG93JykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGdkX2hlYWRlci5yZW1vdmVDbGFzcygndG9vbGJhci1zaGFkb3cnKS5jc3MoeydiYWNrZ3JvdW5kJzondHJhbnNwYXJlbnQnfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQoJy5jb3Zlci13cmFwJykuY3NzKCdvcGFjaXR5JywgZ2RfY292ZXJfd3JhcCk7XG5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVmlkZW8gRnVsbCBmb3IgcG9zdCB0YWcgdmlkZW9cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2aWRlb1Bvc3QoKSB7XG4gICAgICAgICQoJy5wb3N0LWltYWdlJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgbGV0IHZpZGVvID0gJCgnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLmNvbVwiXScpWzBdO1xuICAgICAgICAkZ2RfdmlkZW8uZmluZCgnLnZpZGVvLWZlYXR1cmVkJykucHJlcGVuZCh2aWRlbyk7XG5cbiAgICAgICAgaWYoIHR5cGVvZiB5b3V0dWJlICE9ICd1bmRlZmluZWQnICl7XG4gICAgICAgICAgICAkZ2RfdmlkZW8uZmluZCgnLnZpZGVvLWNvbnRlbnQnKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXG4gICAgICAgICAgICAkLmVhY2goIHlvdXR1YmUsICggY2hhbm5lbE5hbWUsIGNoYW5uZWxJZCApID0+IHtcbiAgICAgICAgICAgICAgICAkZ2RfdmlkZW8uZmluZCgnLmNoYW5uZWwtbmFtZScpLmh0bWwoYFN1YnNjcmliZSB0byA8c3Ryb25nPiR7Y2hhbm5lbE5hbWV9PC9zdHJvbmc+YCk7XG4gICAgICAgICAgICAgICAgJCgnLmcteXRzdWJzY3JpYmUnKS5hdHRyKCdkYXRhLWNoYW5uZWxpZCcsIGNoYW5uZWxJZClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzLnNyYz0naHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvcGxhdGZvcm0uanMnO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICAvKipcbiAgICAgKiBWaWRlbyBSZXNwb25zaXZlIFlvdXR1YmVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2aWRlb1Jlc3BvbnNpdmUoKSB7XG4gICAgICAgICQoJy5wb3N0LWNvbnRlbnQnKS5lYWNoKCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RvcnMgPSBbXG4gICAgICAgICAgICAgICAgJ2lmcmFtZVtzcmMqPVwicGxheWVyLnZpbWVvLmNvbVwiXScsXG4gICAgICAgICAgICAgICAgJ2lmcmFtZVtzcmMqPVwieW91dHViZS5jb21cIl0nLFxuICAgICAgICAgICAgICAgICdpZnJhbWVbc3JjKj1cInlvdXR1YmUtbm9jb29raWUuY29tXCJdJyxcbiAgICAgICAgICAgICAgICAnaWZyYW1lW3NyYyo9XCJraWNrc3RhcnRlci5jb21cIl1bc3JjKj1cInZpZGVvLmh0bWxcIl0nLFxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgdmFyICRhbGxWaWRlb3MgPSAkKHRoaXMpLmZpbmQoc2VsZWN0b3JzLmpvaW4oJywnKSk7XG5cbiAgICAgICAgICAgICRhbGxWaWRlb3MuZWFjaCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQodGhpcykud3JhcCgnPGFzaWRlIGNsYXNzPVwidmlkZW8tcmVzcG9uc2l2ZVwiPjwvYXNpZGU+Jyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFNoYXJlIFNvY2lhbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNoYXJlU29jaWFsKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgc2hhcmUgPSBuZXcgbWFwYWNoZVNoYXJlKCQodGhpcykpO1xuICAgICAgICBzaGFyZS5nb2RvU2hhcmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaGFyZSBTb2NpYWwgQ291bnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaGFyZUNvbnRlcigpIHtcbiAgICAgICAgaWYgKCRnZF9zaGFyZV9jb3VudC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgc2hhcmVfY291bnQgPSBuZXcgc2hhcmVDb3VudCgkZ2Rfc2hhcmVfY291bnQpO1xuICAgICAgICAgICAgc2hhcmVfY291bnQuZ29kb0NvdW50KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIZWFkZXIgU29jaWFsIExpbmtzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29jaWFsTGluayhsaW5rcykge1xuICAgICAgICAkLmVhY2goIGxpbmtzLCAoIHR5cGUsIHVybCApID0+IHtcbiAgICAgICAgICAgIGlmKCB0eXBlb2YgdXJsID09PSAnc3RyaW5nJyAmJiB1cmxfcmVnZXhwLnRlc3QodXJsKSApe1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wbGF0ZSA9IGA8YSB0aXRsZT1cIiR7dHlwZX1cIiBocmVmPVwiJHt1cmx9XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJpLSR7dHlwZX1cIj48L2E+YDtcbiAgICAgICAgICAgICAgICAkKCcuaGVhZGVyLXNvY2lhbCcpLmFwcGVuZCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc3F1cyBDb21tZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlzcXVzQ29tbWVudHMgKCkge1xuICAgICAgICBpZih0eXBlb2YgZGlzcXVzX3Nob3J0bmFtZSAhPSAndW5kZWZpbmVkJyl7XG4gICAgICAgICAgICAkZ2RfY29tbWVudHMucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgIGxldCBkID0gZG9jdW1lbnQsIHMgPSBkLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgcy5zcmMgPSBgLy8ke2Rpc3F1c19zaG9ydG5hbWV9LmRpc3F1cy5jb20vZW1iZWQuanNgIDtcbiAgICAgICAgICAgIHMuc2V0QXR0cmlidXRlKCdkYXRhLXRpbWVzdGFtcCcsICtuZXcgRGF0ZSgpKTtcbiAgICAgICAgICAgIChkLmhlYWQgfHwgZC5ib2R5KS5hcHBlbmRDaGlsZChzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbW1lbnRzIENvdW50IERpc3F1c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbW1lbnRzQ291bnQoKSB7XG4gICAgICAgICRnZF9jb21tZW50X2NvdW50LmVhY2goIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHVybCA9ICQodGhpcykuYXR0cignZ29kby11cmwnKTtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9kaXNxdXMuY29tL2FwaS8zLjAvdGhyZWFkcy9zZXQuanNvbnAnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgYXBpX2tleTogZGlzcXVzUHVibGljS2V5LCBmb3J1bSA6IGRpc3F1c19zaG9ydG5hbWUsIHRocmVhZCA6ICdsaW5rOicgKyB1cmwgfSxcbiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29ucCcsXG5cbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAgKCBjb21tZXQgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoIGxldCBpIGluIGNvbW1ldC5yZXNwb25zZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb3VudFRleHQgPSAnQ29tbWVudHMnO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gY29tbWV0LnJlc3BvbnNlW2ldLnBvc3RzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09IDEpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudFRleHQgPSAnQ29tbWVudCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmh0bWwoYCR7Y291bnR9IDxzcGFuPiR7Y291bnRUZXh0fTwvc3Bhbj5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY3JvbGwgYnRuIGxpbmtcbiAgICAgKi9cbiAgICAkKCcuc2Nyb2xsdG9wJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtzY3JvbGxUb3A6ICQoJCh0aGlzKS5hdHRyKCdocmVmJykpLm9mZnNldCgpLnRvcCAtIDcwfSwgNTAwLCAnbGluZWFyJyk7XG4gICAgfSk7XG5cblxuICAgIC8qKlxuICAgICAqIE1vdmUgZXhjZXJwdFxuICAgICAqL1xuICAgIGlmICggJCgncC5leGNlcnB0JykubGVuZ3RoID4gMCkge1xuICAgICAgICAkKCdwLmV4Y2VycHQnKS5pbnNlcnRBZnRlcigkKCdoMS50aXRsZScpKTtcbiAgICB9XG5cbiAgICAvLyBzaWRlYmFyIGhpZGRlbiBhc2lkZVxuICAgIGZ1bmN0aW9uIHNpZGViYXJGaXhlZCgpIHtcbiAgICAgICAgbGV0IG1lbGEgID0gJGdkX3NpZGViYXJfZml4ZWQub2Zmc2V0KCkudG9wO1xuICAgICAgICAkd2luZG93Lm9uKCdzY3JvbGwnLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc2Nyb2xsVG9wID0gJHdpbmRvdy5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgIGlmICggc2Nyb2xsVG9wID4gbWVsYSAtIDc4KSB7XG4gICAgICAgICAgICAgICAgJGdkX3NpZGViYXJfZml4ZWQuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgJGdkX3NpZGViYXJfZml4ZWQucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgICRkb2N1bWVudC5vbigncmVhZHknLCAoKSA9PiB7XG4gICAgICAgIHNoYXJlQ29udGVyKCk7XG4gICAgICAgIGlmKCB0eXBlb2Ygc29jaWFsX2xpbmsgIT0gJ3VuZGVmaW5lZCcgKSBzb2NpYWxMaW5rKHNvY2lhbF9saW5rKTtcbiAgICAgICAgaWYoICRnZF9jb21tZW50cy5sZW5ndGggPiAwICkgZGlzcXVzQ29tbWVudHMoKTtcbiAgICAgICAgaWYoIHR5cGVvZiBkaXNxdXNfc2hvcnRuYW1lICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkaXNxdXNQdWJsaWNLZXkgIT0gJ3VuZGVmaW5lZCcgKSBjb21tZW50c0NvdW50KCk7XG4gICAgICAgIGlmKCAkZ2RfdmlkZW8ubGVuZ3RoID4gMCApIHZpZGVvUG9zdCgpO1xuICAgICAgICB2aWRlb1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgaWYgKCRnZF9zaWRlYmFyX2ZpeGVkLmxlbmd0aCA+IDApIHNpZGViYXJGaXhlZCgpO1xuICAgIH0pO1xuXG59KSgpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvanMvYXBwLmpzXG4gKiovIiwiLyogaHR0cDovL3ByaXNtanMuY29tL2Rvd25sb2FkLmh0bWw/dGhlbWVzPXByaXNtJmxhbmd1YWdlcz1tYXJrdXArY3NzK2NsaWtlK2phdmFzY3JpcHQrYXNwbmV0K2Jhc2grYytjc2hhcnArY3BwK3J1YnkrY3NzLWV4dHJhcytnaXQrZ28ramF2YStqc29uK2xlc3MrbWFya2Rvd24rcGVybCtwaHArcGhwLWV4dHJhcytweXRob24ranN4K3Njc3Mrc3FsK3N3aWZ0JnBsdWdpbnM9bGluZS1udW1iZXJzICovXG52YXIgX3NlbGY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlJiZzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGU/c2VsZjp7fSxQcmlzbT1mdW5jdGlvbigpe3ZhciBlPS9cXGJsYW5nKD86dWFnZSk/LShcXHcrKVxcYi9pLHQ9MCxuPV9zZWxmLlByaXNtPXt1dGlsOntlbmNvZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBhP25ldyBhKGUudHlwZSxuLnV0aWwuZW5jb2RlKGUuY29udGVudCksZS5hbGlhcyk6XCJBcnJheVwiPT09bi51dGlsLnR5cGUoZSk/ZS5tYXAobi51dGlsLmVuY29kZSk6ZS5yZXBsYWNlKC8mL2csXCImYW1wO1wiKS5yZXBsYWNlKC88L2csXCImbHQ7XCIpLnJlcGxhY2UoL1xcdTAwYTAvZyxcIiBcIil9LHR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5tYXRjaCgvXFxbb2JqZWN0IChcXHcrKVxcXS8pWzFdfSxvYmpJZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX2lkfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9faWRcIix7dmFsdWU6Kyt0fSksZS5fX2lkfSxjbG9uZTpmdW5jdGlvbihlKXt2YXIgdD1uLnV0aWwudHlwZShlKTtzd2l0Y2godCl7Y2FzZVwiT2JqZWN0XCI6dmFyIGE9e307Zm9yKHZhciByIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShyKSYmKGFbcl09bi51dGlsLmNsb25lKGVbcl0pKTtyZXR1cm4gYTtjYXNlXCJBcnJheVwiOnJldHVybiBlLm1hcCYmZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIG4udXRpbC5jbG9uZShlKX0pfXJldHVybiBlfX0sbGFuZ3VhZ2VzOntleHRlbmQ6ZnVuY3Rpb24oZSx0KXt2YXIgYT1uLnV0aWwuY2xvbmUobi5sYW5ndWFnZXNbZV0pO2Zvcih2YXIgciBpbiB0KWFbcl09dFtyXTtyZXR1cm4gYX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGUsdCxhLHIpe3I9cnx8bi5sYW5ndWFnZXM7dmFyIGw9cltlXTtpZigyPT1hcmd1bWVudHMubGVuZ3RoKXthPWFyZ3VtZW50c1sxXTtmb3IodmFyIGkgaW4gYSlhLmhhc093blByb3BlcnR5KGkpJiYobFtpXT1hW2ldKTtyZXR1cm4gbH12YXIgbz17fTtmb3IodmFyIHMgaW4gbClpZihsLmhhc093blByb3BlcnR5KHMpKXtpZihzPT10KWZvcih2YXIgaSBpbiBhKWEuaGFzT3duUHJvcGVydHkoaSkmJihvW2ldPWFbaV0pO29bc109bFtzXX1yZXR1cm4gbi5sYW5ndWFnZXMuREZTKG4ubGFuZ3VhZ2VzLGZ1bmN0aW9uKHQsbil7bj09PXJbZV0mJnQhPWUmJih0aGlzW3RdPW8pfSkscltlXT1vfSxERlM6ZnVuY3Rpb24oZSx0LGEscil7cj1yfHx7fTtmb3IodmFyIGwgaW4gZSllLmhhc093blByb3BlcnR5KGwpJiYodC5jYWxsKGUsbCxlW2xdLGF8fGwpLFwiT2JqZWN0XCIhPT1uLnV0aWwudHlwZShlW2xdKXx8cltuLnV0aWwub2JqSWQoZVtsXSldP1wiQXJyYXlcIiE9PW4udXRpbC50eXBlKGVbbF0pfHxyW24udXRpbC5vYmpJZChlW2xdKV18fChyW24udXRpbC5vYmpJZChlW2xdKV09ITAsbi5sYW5ndWFnZXMuREZTKGVbbF0sdCxsLHIpKToocltuLnV0aWwub2JqSWQoZVtsXSldPSEwLG4ubGFuZ3VhZ2VzLkRGUyhlW2xdLHQsbnVsbCxyKSkpfX0scGx1Z2luczp7fSxoaWdobGlnaHRBbGw6ZnVuY3Rpb24oZSx0KXt2YXIgYT17Y2FsbGJhY2s6dCxzZWxlY3RvcjonY29kZVtjbGFzcyo9XCJsYW5ndWFnZS1cIl0sIFtjbGFzcyo9XCJsYW5ndWFnZS1cIl0gY29kZSwgY29kZVtjbGFzcyo9XCJsYW5nLVwiXSwgW2NsYXNzKj1cImxhbmctXCJdIGNvZGUnfTtuLmhvb2tzLnJ1bihcImJlZm9yZS1oaWdobGlnaHRhbGxcIixhKTtmb3IodmFyIHIsbD1hLmVsZW1lbnRzfHxkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGEuc2VsZWN0b3IpLGk9MDtyPWxbaSsrXTspbi5oaWdobGlnaHRFbGVtZW50KHIsZT09PSEwLGEuY2FsbGJhY2spfSxoaWdobGlnaHRFbGVtZW50OmZ1bmN0aW9uKHQsYSxyKXtmb3IodmFyIGwsaSxvPXQ7byYmIWUudGVzdChvLmNsYXNzTmFtZSk7KW89by5wYXJlbnROb2RlO28mJihsPShvLmNsYXNzTmFtZS5tYXRjaChlKXx8WyxcIlwiXSlbMV0udG9Mb3dlckNhc2UoKSxpPW4ubGFuZ3VhZ2VzW2xdKSx0LmNsYXNzTmFtZT10LmNsYXNzTmFtZS5yZXBsYWNlKGUsXCJcIikucmVwbGFjZSgvXFxzKy9nLFwiIFwiKStcIiBsYW5ndWFnZS1cIitsLG89dC5wYXJlbnROb2RlLC9wcmUvaS50ZXN0KG8ubm9kZU5hbWUpJiYoby5jbGFzc05hbWU9by5jbGFzc05hbWUucmVwbGFjZShlLFwiXCIpLnJlcGxhY2UoL1xccysvZyxcIiBcIikrXCIgbGFuZ3VhZ2UtXCIrbCk7dmFyIHM9dC50ZXh0Q29udGVudCx1PXtlbGVtZW50OnQsbGFuZ3VhZ2U6bCxncmFtbWFyOmksY29kZTpzfTtpZihuLmhvb2tzLnJ1bihcImJlZm9yZS1zYW5pdHktY2hlY2tcIix1KSwhdS5jb2RlfHwhdS5ncmFtbWFyKXJldHVybiBuLmhvb2tzLnJ1bihcImNvbXBsZXRlXCIsdSksdm9pZCAwO2lmKG4uaG9va3MucnVuKFwiYmVmb3JlLWhpZ2hsaWdodFwiLHUpLGEmJl9zZWxmLldvcmtlcil7dmFyIGM9bmV3IFdvcmtlcihuLmZpbGVuYW1lKTtjLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt1LmhpZ2hsaWdodGVkQ29kZT1lLmRhdGEsbi5ob29rcy5ydW4oXCJiZWZvcmUtaW5zZXJ0XCIsdSksdS5lbGVtZW50LmlubmVySFRNTD11LmhpZ2hsaWdodGVkQ29kZSxyJiZyLmNhbGwodS5lbGVtZW50KSxuLmhvb2tzLnJ1bihcImFmdGVyLWhpZ2hsaWdodFwiLHUpLG4uaG9va3MucnVuKFwiY29tcGxldGVcIix1KX0sYy5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7bGFuZ3VhZ2U6dS5sYW5ndWFnZSxjb2RlOnUuY29kZSxpbW1lZGlhdGVDbG9zZTohMH0pKX1lbHNlIHUuaGlnaGxpZ2h0ZWRDb2RlPW4uaGlnaGxpZ2h0KHUuY29kZSx1LmdyYW1tYXIsdS5sYW5ndWFnZSksbi5ob29rcy5ydW4oXCJiZWZvcmUtaW5zZXJ0XCIsdSksdS5lbGVtZW50LmlubmVySFRNTD11LmhpZ2hsaWdodGVkQ29kZSxyJiZyLmNhbGwodCksbi5ob29rcy5ydW4oXCJhZnRlci1oaWdobGlnaHRcIix1KSxuLmhvb2tzLnJ1bihcImNvbXBsZXRlXCIsdSl9LGhpZ2hsaWdodDpmdW5jdGlvbihlLHQscil7dmFyIGw9bi50b2tlbml6ZShlLHQpO3JldHVybiBhLnN0cmluZ2lmeShuLnV0aWwuZW5jb2RlKGwpLHIpfSx0b2tlbml6ZTpmdW5jdGlvbihlLHQpe3ZhciBhPW4uVG9rZW4scj1bZV0sbD10LnJlc3Q7aWYobCl7Zm9yKHZhciBpIGluIGwpdFtpXT1sW2ldO2RlbGV0ZSB0LnJlc3R9ZTpmb3IodmFyIGkgaW4gdClpZih0Lmhhc093blByb3BlcnR5KGkpJiZ0W2ldKXt2YXIgbz10W2ldO289XCJBcnJheVwiPT09bi51dGlsLnR5cGUobyk/bzpbb107Zm9yKHZhciBzPTA7czxvLmxlbmd0aDsrK3Mpe3ZhciB1PW9bc10sYz11Lmluc2lkZSxnPSEhdS5sb29rYmVoaW5kLGg9ISF1LmdyZWVkeSxmPTAsZD11LmFsaWFzO3U9dS5wYXR0ZXJufHx1O2Zvcih2YXIgcD0wO3A8ci5sZW5ndGg7cCsrKXt2YXIgbT1yW3BdO2lmKHIubGVuZ3RoPmUubGVuZ3RoKWJyZWFrIGU7aWYoIShtIGluc3RhbmNlb2YgYSkpe3UubGFzdEluZGV4PTA7dmFyIHk9dS5leGVjKG0pLHY9MTtpZigheSYmaCYmcCE9ci5sZW5ndGgtMSl7dmFyIGI9cltwKzFdLm1hdGNoZWRTdHJ8fHJbcCsxXSxrPW0rYjtpZihwPHIubGVuZ3RoLTImJihrKz1yW3ArMl0ubWF0Y2hlZFN0cnx8cltwKzJdKSx1Lmxhc3RJbmRleD0wLHk9dS5leGVjKGspLCF5KWNvbnRpbnVlO3ZhciB3PXkuaW5kZXgrKGc/eVsxXS5sZW5ndGg6MCk7aWYodz49bS5sZW5ndGgpY29udGludWU7dmFyIF89eS5pbmRleCt5WzBdLmxlbmd0aCxQPW0ubGVuZ3RoK2IubGVuZ3RoO2lmKHY9MyxQPj1fKXtpZihyW3ArMV0uZ3JlZWR5KWNvbnRpbnVlO3Y9MixrPWsuc2xpY2UoMCxQKX1tPWt9aWYoeSl7ZyYmKGY9eVsxXS5sZW5ndGgpO3ZhciB3PXkuaW5kZXgrZix5PXlbMF0uc2xpY2UoZiksXz13K3kubGVuZ3RoLFM9bS5zbGljZSgwLHcpLE89bS5zbGljZShfKSxqPVtwLHZdO1MmJmoucHVzaChTKTt2YXIgQT1uZXcgYShpLGM/bi50b2tlbml6ZSh5LGMpOnksZCx5LGgpO2oucHVzaChBKSxPJiZqLnB1c2goTyksQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShyLGopfX19fX1yZXR1cm4gcn0saG9va3M6e2FsbDp7fSxhZGQ6ZnVuY3Rpb24oZSx0KXt2YXIgYT1uLmhvb2tzLmFsbDthW2VdPWFbZV18fFtdLGFbZV0ucHVzaCh0KX0scnVuOmZ1bmN0aW9uKGUsdCl7dmFyIGE9bi5ob29rcy5hbGxbZV07aWYoYSYmYS5sZW5ndGgpZm9yKHZhciByLGw9MDtyPWFbbCsrXTspcih0KX19fSxhPW4uVG9rZW49ZnVuY3Rpb24oZSx0LG4sYSxyKXt0aGlzLnR5cGU9ZSx0aGlzLmNvbnRlbnQ9dCx0aGlzLmFsaWFzPW4sdGhpcy5tYXRjaGVkU3RyPWF8fG51bGwsdGhpcy5ncmVlZHk9ISFyfTtpZihhLnN0cmluZ2lmeT1mdW5jdGlvbihlLHQscil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGU7aWYoXCJBcnJheVwiPT09bi51dGlsLnR5cGUoZSkpcmV0dXJuIGUubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBhLnN0cmluZ2lmeShuLHQsZSl9KS5qb2luKFwiXCIpO3ZhciBsPXt0eXBlOmUudHlwZSxjb250ZW50OmEuc3RyaW5naWZ5KGUuY29udGVudCx0LHIpLHRhZzpcInNwYW5cIixjbGFzc2VzOltcInRva2VuXCIsZS50eXBlXSxhdHRyaWJ1dGVzOnt9LGxhbmd1YWdlOnQscGFyZW50OnJ9O2lmKFwiY29tbWVudFwiPT1sLnR5cGUmJihsLmF0dHJpYnV0ZXMuc3BlbGxjaGVjaz1cInRydWVcIiksZS5hbGlhcyl7dmFyIGk9XCJBcnJheVwiPT09bi51dGlsLnR5cGUoZS5hbGlhcyk/ZS5hbGlhczpbZS5hbGlhc107QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobC5jbGFzc2VzLGkpfW4uaG9va3MucnVuKFwid3JhcFwiLGwpO3ZhciBvPVwiXCI7Zm9yKHZhciBzIGluIGwuYXR0cmlidXRlcylvKz0obz9cIiBcIjpcIlwiKStzKyc9XCInKyhsLmF0dHJpYnV0ZXNbc118fFwiXCIpKydcIic7cmV0dXJuXCI8XCIrbC50YWcrJyBjbGFzcz1cIicrbC5jbGFzc2VzLmpvaW4oXCIgXCIpKydcIiAnK28rXCI+XCIrbC5jb250ZW50K1wiPC9cIitsLnRhZytcIj5cIn0sIV9zZWxmLmRvY3VtZW50KXJldHVybiBfc2VsZi5hZGRFdmVudExpc3RlbmVyPyhfc2VsZi5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGUpe3ZhciB0PUpTT04ucGFyc2UoZS5kYXRhKSxhPXQubGFuZ3VhZ2Uscj10LmNvZGUsbD10LmltbWVkaWF0ZUNsb3NlO19zZWxmLnBvc3RNZXNzYWdlKG4uaGlnaGxpZ2h0KHIsbi5sYW5ndWFnZXNbYV0sYSkpLGwmJl9zZWxmLmNsb3NlKCl9LCExKSxfc2VsZi5QcmlzbSk6X3NlbGYuUHJpc207dmFyIHI9ZG9jdW1lbnQuY3VycmVudFNjcmlwdHx8W10uc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSkucG9wKCk7cmV0dXJuIHImJihuLmZpbGVuYW1lPXIuc3JjLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXImJiFyLmhhc0F0dHJpYnV0ZShcImRhdGEtbWFudWFsXCIpJiZkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLG4uaGlnaGxpZ2h0QWxsKSksX3NlbGYuUHJpc219KCk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1QcmlzbSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmKGdsb2JhbC5QcmlzbT1QcmlzbSk7XG5QcmlzbS5sYW5ndWFnZXMubWFya3VwPXtjb21tZW50Oi88IS0tW1xcd1xcV10qPy0tPi8scHJvbG9nOi88XFw/W1xcd1xcV10rP1xcPz4vLGRvY3R5cGU6LzwhRE9DVFlQRVtcXHdcXFddKz8+LyxjZGF0YTovPCFcXFtDREFUQVxcW1tcXHdcXFddKj9dXT4vaSx0YWc6e3BhdHRlcm46LzxcXC8/KD8hXFxkKVteXFxzPlxcLz0uJDxdKyg/OlxccytbXlxccz5cXC89XSsoPzo9KD86KFwifCcpKD86XFxcXFxcMXxcXFxcPyg/IVxcMSlbXFx3XFxXXSkqXFwxfFteXFxzJ1wiPj1dKykpPykqXFxzKlxcLz8+L2ksaW5zaWRlOnt0YWc6e3BhdHRlcm46L148XFwvP1teXFxzPlxcL10rL2ksaW5zaWRlOntwdW5jdHVhdGlvbjovXjxcXC8/LyxuYW1lc3BhY2U6L15bXlxccz5cXC86XSs6L319LFwiYXR0ci12YWx1ZVwiOntwYXR0ZXJuOi89KD86KCd8XCIpW1xcd1xcV10qPyhcXDEpfFteXFxzPl0rKS9pLGluc2lkZTp7cHVuY3R1YXRpb246L1s9PlwiJ10vfX0scHVuY3R1YXRpb246L1xcLz8+LyxcImF0dHItbmFtZVwiOntwYXR0ZXJuOi9bXlxccz5cXC9dKy8saW5zaWRlOntuYW1lc3BhY2U6L15bXlxccz5cXC86XSs6L319fX0sZW50aXR5Oi8mIz9bXFxkYS16XXsxLDh9Oy9pfSxQcmlzbS5ob29rcy5hZGQoXCJ3cmFwXCIsZnVuY3Rpb24oYSl7XCJlbnRpdHlcIj09PWEudHlwZSYmKGEuYXR0cmlidXRlcy50aXRsZT1hLmNvbnRlbnQucmVwbGFjZSgvJmFtcDsvLFwiJlwiKSl9KSxQcmlzbS5sYW5ndWFnZXMueG1sPVByaXNtLmxhbmd1YWdlcy5tYXJrdXAsUHJpc20ubGFuZ3VhZ2VzLmh0bWw9UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCxQcmlzbS5sYW5ndWFnZXMubWF0aG1sPVByaXNtLmxhbmd1YWdlcy5tYXJrdXAsUHJpc20ubGFuZ3VhZ2VzLnN2Zz1QcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuUHJpc20ubGFuZ3VhZ2VzLmNzcz17Y29tbWVudDovXFwvXFwqW1xcd1xcV10qP1xcKlxcLy8sYXRydWxlOntwYXR0ZXJuOi9AW1xcdy1dKz8uKj8oO3woPz1cXHMqXFx7KSkvaSxpbnNpZGU6e3J1bGU6L0BbXFx3LV0rL319LHVybDovdXJsXFwoKD86KFtcIiddKShcXFxcKD86XFxyXFxufFtcXHdcXFddKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxfC4qPylcXCkvaSxzZWxlY3RvcjovW15cXHtcXH1cXHNdW15cXHtcXH07XSo/KD89XFxzKlxceykvLHN0cmluZzovKFwifCcpKFxcXFwoPzpcXHJcXG58W1xcd1xcV10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLHByb3BlcnR5Oi8oXFxifFxcQilbXFx3LV0rKD89XFxzKjopL2ksaW1wb3J0YW50Oi9cXEIhaW1wb3J0YW50XFxiL2ksXCJmdW5jdGlvblwiOi9bLWEtejAtOV0rKD89XFwoKS9pLHB1bmN0dWF0aW9uOi9bKCl7fTs6XS99LFByaXNtLmxhbmd1YWdlcy5jc3MuYXRydWxlLmluc2lkZS5yZXN0PVByaXNtLnV0aWwuY2xvbmUoUHJpc20ubGFuZ3VhZ2VzLmNzcyksUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCYmKFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJtYXJrdXBcIixcInRhZ1wiLHtzdHlsZTp7cGF0dGVybjovKDxzdHlsZVtcXHdcXFddKj8+KVtcXHdcXFddKj8oPz08XFwvc3R5bGU+KS9pLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5jc3MsYWxpYXM6XCJsYW5ndWFnZS1jc3NcIn19KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiaW5zaWRlXCIsXCJhdHRyLXZhbHVlXCIse1wic3R5bGUtYXR0clwiOntwYXR0ZXJuOi9cXHMqc3R5bGU9KFwifCcpLio/XFwxL2ksaW5zaWRlOntcImF0dHItbmFtZVwiOntwYXR0ZXJuOi9eXFxzKnN0eWxlL2ksaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLmluc2lkZX0scHVuY3R1YXRpb246L15cXHMqPVxccypbJ1wiXXxbJ1wiXVxccyokLyxcImF0dHItdmFsdWVcIjp7cGF0dGVybjovLisvaSxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLmNzc319LGFsaWFzOlwibGFuZ3VhZ2UtY3NzXCJ9fSxQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZykpO1xuUHJpc20ubGFuZ3VhZ2VzLmNsaWtlPXtjb21tZW50Olt7cGF0dGVybjovKF58W15cXFxcXSlcXC9cXCpbXFx3XFxXXSo/XFwqXFwvLyxsb29rYmVoaW5kOiEwfSx7cGF0dGVybjovKF58W15cXFxcOl0pXFwvXFwvLiovLGxvb2tiZWhpbmQ6ITB9XSxzdHJpbmc6e3BhdHRlcm46LyhbXCInXSkoXFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sZ3JlZWR5OiEwfSxcImNsYXNzLW5hbWVcIjp7cGF0dGVybjovKCg/OlxcYig/OmNsYXNzfGludGVyZmFjZXxleHRlbmRzfGltcGxlbWVudHN8dHJhaXR8aW5zdGFuY2VvZnxuZXcpXFxzKyl8KD86Y2F0Y2hcXHMrXFwoKSlbYS16MC05X1xcLlxcXFxdKy9pLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOntwdW5jdHVhdGlvbjovKFxcLnxcXFxcKS99fSxrZXl3b3JkOi9cXGIoaWZ8ZWxzZXx3aGlsZXxkb3xmb3J8cmV0dXJufGlufGluc3RhbmNlb2Z8ZnVuY3Rpb258bmV3fHRyeXx0aHJvd3xjYXRjaHxmaW5hbGx5fG51bGx8YnJlYWt8Y29udGludWUpXFxiLyxcImJvb2xlYW5cIjovXFxiKHRydWV8ZmFsc2UpXFxiLyxcImZ1bmN0aW9uXCI6L1thLXowLTlfXSsoPz1cXCgpL2ksbnVtYmVyOi9cXGItPyg/OjB4W1xcZGEtZl0rfFxcZCpcXC4/XFxkKyg/OmVbKy1dP1xcZCspPylcXGIvaSxvcGVyYXRvcjovLS0/fFxcK1xcKz98IT0/PT98PD0/fD49P3w9PT89P3wmJj98XFx8XFx8P3xcXD98XFwqfFxcL3x+fFxcXnwlLyxwdW5jdHVhdGlvbjovW3t9W1xcXTsoKSwuOl0vfTtcblByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0PVByaXNtLmxhbmd1YWdlcy5leHRlbmQoXCJjbGlrZVwiLHtrZXl3b3JkOi9cXGIoYXN8YXN5bmN8YXdhaXR8YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb25zdHxjb250aW51ZXxkZWJ1Z2dlcnxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8ZmluYWxseXxmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8bGV0fG5ld3xudWxsfG9mfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHVybnxzZXR8c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvLG51bWJlcjovXFxiLT8oMHhbXFxkQS1GYS1mXSt8MGJbMDFdK3wwb1swLTddK3xcXGQqXFwuP1xcZCsoW0VlXVsrLV0/XFxkKyk/fE5hTnxJbmZpbml0eSlcXGIvLFwiZnVuY3Rpb25cIjovW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bXyRhLXpBLVowLTlcXHhBMC1cXHVGRkZGXSooPz1cXCgpL2l9KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwia2V5d29yZFwiLHtyZWdleDp7cGF0dGVybjovKF58W15cXC9dKVxcLyg/IVxcLykoXFxbLis/XXxcXFxcLnxbXlxcL1xcXFxcXHJcXG5dKStcXC9bZ2lteXVdezAsNX0oPz1cXHMqKCR8W1xcclxcbiwuO30pXSkpLyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMH19KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwiY2xhc3MtbmFtZVwiLHtcInRlbXBsYXRlLXN0cmluZ1wiOntwYXR0ZXJuOi9gKD86XFxcXFxcXFx8XFxcXD9bXlxcXFxdKSo/YC8sZ3JlZWR5OiEwLGluc2lkZTp7aW50ZXJwb2xhdGlvbjp7cGF0dGVybjovXFwkXFx7W159XStcXH0vLGluc2lkZTp7XCJpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uXCI6e3BhdHRlcm46L15cXCRcXHt8XFx9JC8sYWxpYXM6XCJwdW5jdHVhdGlvblwifSxyZXN0OlByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0fX0sc3RyaW5nOi9bXFxzXFxTXSsvfX19KSxQcmlzbS5sYW5ndWFnZXMubWFya3VwJiZQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwibWFya3VwXCIsXCJ0YWdcIix7c2NyaXB0OntwYXR0ZXJuOi8oPHNjcmlwdFtcXHdcXFddKj8+KVtcXHdcXFddKj8oPz08XFwvc2NyaXB0PikvaSxsb29rYmVoaW5kOiEwLGluc2lkZTpQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCxhbGlhczpcImxhbmd1YWdlLWphdmFzY3JpcHRcIn19KSxQcmlzbS5sYW5ndWFnZXMuanM9UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ7XG5QcmlzbS5sYW5ndWFnZXMuYXNwbmV0PVByaXNtLmxhbmd1YWdlcy5leHRlbmQoXCJtYXJrdXBcIix7XCJwYWdlLWRpcmVjdGl2ZSB0YWdcIjp7cGF0dGVybjovPCVcXHMqQC4qJT4vaSxpbnNpZGU6e1wicGFnZS1kaXJlY3RpdmUgdGFnXCI6LzwlXFxzKkBcXHMqKD86QXNzZW1ibHl8Q29udHJvbHxJbXBsZW1lbnRzfEltcG9ydHxNYXN0ZXIoPzpUeXBlKT98T3V0cHV0Q2FjaGV8UGFnZXxQcmV2aW91c1BhZ2VUeXBlfFJlZmVyZW5jZXxSZWdpc3Rlcik/fCU+L2kscmVzdDpQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZy5pbnNpZGV9fSxcImRpcmVjdGl2ZSB0YWdcIjp7cGF0dGVybjovPCUuKiU+L2ksaW5zaWRlOntcImRpcmVjdGl2ZSB0YWdcIjovPCVcXHMqP1skPSUjOl17MCwyfXwlPi9pLHJlc3Q6UHJpc20ubGFuZ3VhZ2VzLmNzaGFycH19fSksUHJpc20ubGFuZ3VhZ2VzLmFzcG5ldC50YWcucGF0dGVybj0vPCg/ISUpXFwvP1teXFxzPlxcL10rKD86XFxzK1teXFxzPlxcLz1dKyg/Oj0oPzooXCJ8JykoPzpcXFxcXFwxfFxcXFw/KD8hXFwxKVtcXHdcXFddKSpcXDF8W15cXHMnXCI+PV0rKSk/KSpcXHMqXFwvPz4vaSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiaW5zaWRlXCIsXCJwdW5jdHVhdGlvblwiLHtcImRpcmVjdGl2ZSB0YWdcIjpQcmlzbS5sYW5ndWFnZXMuYXNwbmV0W1wiZGlyZWN0aXZlIHRhZ1wiXX0sUHJpc20ubGFuZ3VhZ2VzLmFzcG5ldC50YWcuaW5zaWRlW1wiYXR0ci12YWx1ZVwiXSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImFzcG5ldFwiLFwiY29tbWVudFwiLHtcImFzcCBjb21tZW50XCI6LzwlLS1bXFx3XFxXXSo/LS0lPi99KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiYXNwbmV0XCIsUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ/XCJzY3JpcHRcIjpcInRhZ1wiLHtcImFzcCBzY3JpcHRcIjp7cGF0dGVybjovKDxzY3JpcHQoPz0uKnJ1bmF0PVsnXCJdP3NlcnZlclsnXCJdPylbXFx3XFxXXSo/PilbXFx3XFxXXSo/KD89PFxcL3NjcmlwdD4pL2ksbG9va2JlaGluZDohMCxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLmNzaGFycHx8e319fSk7XG4hZnVuY3Rpb24oZSl7dmFyIHQ9e3ZhcmlhYmxlOlt7cGF0dGVybjovXFwkP1xcKFxcKFtcXHdcXFddKz9cXClcXCkvLGluc2lkZTp7dmFyaWFibGU6W3twYXR0ZXJuOi8oXlxcJFxcKFxcKFtcXHdcXFddKylcXClcXCkvLGxvb2tiZWhpbmQ6ITB9LC9eXFwkXFwoXFwoL10sbnVtYmVyOi9cXGItPyg/OjB4W1xcZEEtRmEtZl0rfFxcZCpcXC4/XFxkKyg/OltFZV0tP1xcZCspPylcXGIvLG9wZXJhdG9yOi8tLT98LT18XFwrXFwrP3xcXCs9fCE9P3x+fFxcKlxcKj98XFwqPXxcXC89P3wlPT98PDw9P3w+Pj0/fDw9P3w+PT98PT0/fCYmP3wmPXxcXF49P3xcXHxcXHw/fFxcfD18XFw/fDovLHB1bmN0dWF0aW9uOi9cXChcXCg/fFxcKVxcKT98LHw7L319LHtwYXR0ZXJuOi9cXCRcXChbXildK1xcKXxgW15gXStgLyxpbnNpZGU6e3ZhcmlhYmxlOi9eXFwkXFwofF5gfFxcKSR8YCQvfX0sL1xcJCg/OlthLXowLTlfI1xcP1xcKiFAXSt8XFx7W159XStcXH0pL2ldfTtlLmxhbmd1YWdlcy5iYXNoPXtzaGViYW5nOntwYXR0ZXJuOi9eIyFcXHMqXFwvYmluXFwvYmFzaHxeIyFcXHMqXFwvYmluXFwvc2gvLGFsaWFzOlwiaW1wb3J0YW50XCJ9LGNvbW1lbnQ6e3BhdHRlcm46LyhefFteXCJ7XFxcXF0pIy4qLyxsb29rYmVoaW5kOiEwfSxzdHJpbmc6W3twYXR0ZXJuOi8oKD86XnxbXjxdKTw8XFxzKikoPzpcInwnKT8oXFx3Kz8pKD86XCJ8Jyk/XFxzKlxccj9cXG4oPzpbXFxzXFxTXSkqP1xccj9cXG5cXDIvZyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMCxpbnNpZGU6dH0se3BhdHRlcm46LyhbXCInXSkoPzpcXFxcXFxcXHxcXFxcP1teXFxcXF0pKj9cXDEvZyxncmVlZHk6ITAsaW5zaWRlOnR9XSx2YXJpYWJsZTp0LnZhcmlhYmxlLFwiZnVuY3Rpb25cIjp7cGF0dGVybjovKF58XFxzfDt8XFx8fCYpKD86YWxpYXN8YXByb3Bvc3xhcHQtZ2V0fGFwdGl0dWRlfGFzcGVsbHxhd2t8YmFzZW5hbWV8YmFzaHxiY3xiZ3xidWlsdGlufGJ6aXAyfGNhbHxjYXR8Y2R8Y2ZkaXNrfGNoZ3JwfGNobW9kfGNob3dufGNocm9vdHxjaGtjb25maWd8Y2tzdW18Y2xlYXJ8Y21wfGNvbW18Y29tbWFuZHxjcHxjcm9ufGNyb250YWJ8Y3NwbGl0fGN1dHxkYXRlfGRjfGRkfGRkcmVzY3VlfGRmfGRpZmZ8ZGlmZjN8ZGlnfGRpcnxkaXJjb2xvcnN8ZGlybmFtZXxkaXJzfGRtZXNnfGR1fGVncmVwfGVqZWN0fGVuYWJsZXxlbnZ8ZXRodG9vbHxldmFsfGV4ZWN8ZXhwYW5kfGV4cGVjdHxleHBvcnR8ZXhwcnxmZGZvcm1hdHxmZGlza3xmZ3xmZ3JlcHxmaWxlfGZpbmR8Zm10fGZvbGR8Zm9ybWF0fGZyZWV8ZnNja3xmdHB8ZnVzZXJ8Z2F3a3xnZXRvcHRzfGdpdHxncmVwfGdyb3VwYWRkfGdyb3VwZGVsfGdyb3VwbW9kfGdyb3Vwc3xnemlwfGhhc2h8aGVhZHxoZWxwfGhnfGhpc3Rvcnl8aG9zdG5hbWV8aHRvcHxpY29udnxpZHxpZmNvbmZpZ3xpZmRvd258aWZ1cHxpbXBvcnR8aW5zdGFsbHxqb2JzfGpvaW58a2lsbHxraWxsYWxsfGxlc3N8bGlua3xsbnxsb2NhdGV8bG9nbmFtZXxsb2dvdXR8bG9va3xscGN8bHByfGxwcmludHxscHJpbnRkfGxwcmludHF8bHBybXxsc3xsc29mfG1ha2V8bWFufG1rZGlyfG1rZmlmb3xta2lzb2ZzfG1rbm9kfG1vcmV8bW9zdHxtb3VudHxtdG9vbHN8bXRyfG12fG1tdnxuYW5vfG5ldHN0YXR8bmljZXxubHxub2h1cHxub3RpZnktc2VuZHxuc2xvb2t1cHxvcGVufG9wfHBhc3N3ZHxwYXN0ZXxwYXRoY2hrfHBpbmd8cGtpbGx8cG9wZHxwcnxwcmludGNhcHxwcmludGVudnxwcmludGZ8cHN8cHVzaGR8cHZ8cHdkfHF1b3RhfHF1b3RhY2hlY2t8cXVvdGFjdGx8cmFtfHJhcnxyY3B8cmVhZHxyZWFkYXJyYXl8cmVhZG9ubHl8cmVib290fHJlbmFtZXxyZW5pY2V8cmVtc3luY3xyZXZ8cm18cm1kaXJ8cnN5bmN8c2NyZWVufHNjcHxzZGlmZnxzZWR8c2VxfHNlcnZpY2V8c2Z0cHxzaGlmdHxzaG9wdHxzaHV0ZG93bnxzbGVlcHxzbG9jYXRlfHNvcnR8c291cmNlfHNwbGl0fHNzaHxzdGF0fHN0cmFjZXxzdXxzdWRvfHN1bXxzdXNwZW5kfHN5bmN8dGFpbHx0YXJ8dGVlfHRlc3R8dGltZXx0aW1lb3V0fHRpbWVzfHRvdWNofHRvcHx0cmFjZXJvdXRlfHRyYXB8dHJ8dHNvcnR8dHR5fHR5cGV8dWxpbWl0fHVtYXNrfHVtb3VudHx1bmFsaWFzfHVuYW1lfHVuZXhwYW5kfHVuaXF8dW5pdHN8dW5yYXJ8dW5zaGFyfHVwdGltZXx1c2VyYWRkfHVzZXJkZWx8dXNlcm1vZHx1c2Vyc3x1dWVuY29kZXx1dWRlY29kZXx2fHZkaXJ8dml8dm1zdGF0fHdhaXR8d2F0Y2h8d2N8d2dldHx3aGVyZWlzfHdoaWNofHdob3x3aG9hbWl8d3JpdGV8eGFyZ3N8eGRnLW9wZW58eWVzfHppcCkoPz0kfFxcc3w7fFxcfHwmKS8sbG9va2JlaGluZDohMH0sa2V5d29yZDp7cGF0dGVybjovKF58XFxzfDt8XFx8fCYpKD86bGV0fDp8XFwufGlmfHRoZW58ZWxzZXxlbGlmfGZpfGZvcnxicmVha3xjb250aW51ZXx3aGlsZXxpbnxjYXNlfGZ1bmN0aW9ufHNlbGVjdHxkb3xkb25lfHVudGlsfGVjaG98ZXhpdHxyZXR1cm58c2V0fGRlY2xhcmUpKD89JHxcXHN8O3xcXHx8JikvLGxvb2tiZWhpbmQ6ITB9LFwiYm9vbGVhblwiOntwYXR0ZXJuOi8oXnxcXHN8O3xcXHx8JikoPzp0cnVlfGZhbHNlKSg/PSR8XFxzfDt8XFx8fCYpLyxsb29rYmVoaW5kOiEwfSxvcGVyYXRvcjovJiY/fFxcfFxcfD98PT0/fCE9P3w8PDw/fD4+fDw9P3w+PT98PX4vLHB1bmN0dWF0aW9uOi9cXCQ/XFwoXFwoP3xcXClcXCk/fFxcLlxcLnxbe31bXFxdO10vfTt2YXIgYT10LnZhcmlhYmxlWzFdLmluc2lkZTthW1wiZnVuY3Rpb25cIl09ZS5sYW5ndWFnZXMuYmFzaFtcImZ1bmN0aW9uXCJdLGEua2V5d29yZD1lLmxhbmd1YWdlcy5iYXNoLmtleXdvcmQsYS5ib29sZWFuPWUubGFuZ3VhZ2VzLmJhc2guYm9vbGVhbixhLm9wZXJhdG9yPWUubGFuZ3VhZ2VzLmJhc2gub3BlcmF0b3IsYS5wdW5jdHVhdGlvbj1lLmxhbmd1YWdlcy5iYXNoLnB1bmN0dWF0aW9ufShQcmlzbSk7XG5QcmlzbS5sYW5ndWFnZXMuYz1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY2xpa2VcIix7a2V5d29yZDovXFxiKGFzbXx0eXBlb2Z8aW5saW5lfGF1dG98YnJlYWt8Y2FzZXxjaGFyfGNvbnN0fGNvbnRpbnVlfGRlZmF1bHR8ZG98ZG91YmxlfGVsc2V8ZW51bXxleHRlcm58ZmxvYXR8Zm9yfGdvdG98aWZ8aW50fGxvbmd8cmVnaXN0ZXJ8cmV0dXJufHNob3J0fHNpZ25lZHxzaXplb2Z8c3RhdGljfHN0cnVjdHxzd2l0Y2h8dHlwZWRlZnx1bmlvbnx1bnNpZ25lZHx2b2lkfHZvbGF0aWxlfHdoaWxlKVxcYi8sb3BlcmF0b3I6L1xcLVs+LV0/fFxcK1xcKz98IT0/fDw8Pz0/fD4+Pz0/fD09P3wmJj98XFx8P1xcfHxbfl4lPypcXC9dLyxudW1iZXI6L1xcYi0/KD86MHhbXFxkYS1mXSt8XFxkKlxcLj9cXGQrKD86ZVsrLV0/XFxkKyk/KVtmdWxdKlxcYi9pfSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImNcIixcInN0cmluZ1wiLHttYWNybzp7cGF0dGVybjovKF5cXHMqKSNcXHMqW2Etel0rKFteXFxyXFxuXFxcXF18XFxcXC58XFxcXCg/Olxcclxcbj98XFxuKSkqL2ltLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJwcm9wZXJ0eVwiLGluc2lkZTp7c3RyaW5nOntwYXR0ZXJuOi8oI1xccyppbmNsdWRlXFxzKikoPC4rPz58KFwifCcpKFxcXFw/LikrP1xcMykvLGxvb2tiZWhpbmQ6ITB9LGRpcmVjdGl2ZTp7cGF0dGVybjovKCNcXHMqKVxcYihkZWZpbmV8ZWxpZnxlbHNlfGVuZGlmfGVycm9yfGlmZGVmfGlmbmRlZnxpZnxpbXBvcnR8aW5jbHVkZXxsaW5lfHByYWdtYXx1bmRlZnx1c2luZylcXGIvLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJrZXl3b3JkXCJ9fX0sY29uc3RhbnQ6L1xcYihfX0ZJTEVfX3xfX0xJTkVfX3xfX0RBVEVfX3xfX1RJTUVfX3xfX1RJTUVTVEFNUF9ffF9fZnVuY19ffEVPRnxOVUxMfHN0ZGlufHN0ZG91dHxzdGRlcnIpXFxiL30pLGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMuY1tcImNsYXNzLW5hbWVcIl0sZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5jW1wiYm9vbGVhblwiXTtcblByaXNtLmxhbmd1YWdlcy5jc2hhcnA9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse2tleXdvcmQ6L1xcYihhYnN0cmFjdHxhc3xhc3luY3xhd2FpdHxiYXNlfGJvb2x8YnJlYWt8Ynl0ZXxjYXNlfGNhdGNofGNoYXJ8Y2hlY2tlZHxjbGFzc3xjb25zdHxjb250aW51ZXxkZWNpbWFsfGRlZmF1bHR8ZGVsZWdhdGV8ZG98ZG91YmxlfGVsc2V8ZW51bXxldmVudHxleHBsaWNpdHxleHRlcm58ZmFsc2V8ZmluYWxseXxmaXhlZHxmbG9hdHxmb3J8Zm9yZWFjaHxnb3RvfGlmfGltcGxpY2l0fGlufGludHxpbnRlcmZhY2V8aW50ZXJuYWx8aXN8bG9ja3xsb25nfG5hbWVzcGFjZXxuZXd8bnVsbHxvYmplY3R8b3BlcmF0b3J8b3V0fG92ZXJyaWRlfHBhcmFtc3xwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmVhZG9ubHl8cmVmfHJldHVybnxzYnl0ZXxzZWFsZWR8c2hvcnR8c2l6ZW9mfHN0YWNrYWxsb2N8c3RhdGljfHN0cmluZ3xzdHJ1Y3R8c3dpdGNofHRoaXN8dGhyb3d8dHJ1ZXx0cnl8dHlwZW9mfHVpbnR8dWxvbmd8dW5jaGVja2VkfHVuc2FmZXx1c2hvcnR8dXNpbmd8dmlydHVhbHx2b2lkfHZvbGF0aWxlfHdoaWxlfGFkZHxhbGlhc3xhc2NlbmRpbmd8YXN5bmN8YXdhaXR8ZGVzY2VuZGluZ3xkeW5hbWljfGZyb218Z2V0fGdsb2JhbHxncm91cHxpbnRvfGpvaW58bGV0fG9yZGVyYnl8cGFydGlhbHxyZW1vdmV8c2VsZWN0fHNldHx2YWx1ZXx2YXJ8d2hlcmV8eWllbGQpXFxiLyxzdHJpbmc6Wy9AKFwifCcpKFxcMVxcMXxcXFxcXFwxfFxcXFw/KD8hXFwxKVtcXHNcXFNdKSpcXDEvLC8oXCJ8JykoXFxcXD8uKSo/XFwxL10sbnVtYmVyOi9cXGItPygweFtcXGRhLWZdK3xcXGQqXFwuP1xcZCtmPylcXGIvaX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJjc2hhcnBcIixcImtleXdvcmRcIix7XCJnZW5lcmljLW1ldGhvZFwiOntwYXR0ZXJuOi9bYS16MC05X10rXFxzKjxbXj5cXHJcXG5dKz8+XFxzKig/PVxcKCkvaSxhbGlhczpcImZ1bmN0aW9uXCIsaW5zaWRlOntrZXl3b3JkOlByaXNtLmxhbmd1YWdlcy5jc2hhcnAua2V5d29yZCxwdW5jdHVhdGlvbjovWzw+KCksLjpdL319LHByZXByb2Nlc3Nvcjp7cGF0dGVybjovKF5cXHMqKSMuKi9tLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJwcm9wZXJ0eVwiLGluc2lkZTp7ZGlyZWN0aXZlOntwYXR0ZXJuOi8oXFxzKiMpXFxiKGRlZmluZXxlbGlmfGVsc2V8ZW5kaWZ8ZW5kcmVnaW9ufGVycm9yfGlmfGxpbmV8cHJhZ21hfHJlZ2lvbnx1bmRlZnx3YXJuaW5nKVxcYi8sbG9va2JlaGluZDohMCxhbGlhczpcImtleXdvcmRcIn19fX0pO1xuUHJpc20ubGFuZ3VhZ2VzLmNwcD1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY1wiLHtrZXl3b3JkOi9cXGIoYWxpZ25hc3xhbGlnbm9mfGFzbXxhdXRvfGJvb2x8YnJlYWt8Y2FzZXxjYXRjaHxjaGFyfGNoYXIxNl90fGNoYXIzMl90fGNsYXNzfGNvbXBsfGNvbnN0fGNvbnN0ZXhwcnxjb25zdF9jYXN0fGNvbnRpbnVlfGRlY2x0eXBlfGRlZmF1bHR8ZGVsZXRlfGRvfGRvdWJsZXxkeW5hbWljX2Nhc3R8ZWxzZXxlbnVtfGV4cGxpY2l0fGV4cG9ydHxleHRlcm58ZmxvYXR8Zm9yfGZyaWVuZHxnb3RvfGlmfGlubGluZXxpbnR8bG9uZ3xtdXRhYmxlfG5hbWVzcGFjZXxuZXd8bm9leGNlcHR8bnVsbHB0cnxvcGVyYXRvcnxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmVnaXN0ZXJ8cmVpbnRlcnByZXRfY2FzdHxyZXR1cm58c2hvcnR8c2lnbmVkfHNpemVvZnxzdGF0aWN8c3RhdGljX2Fzc2VydHxzdGF0aWNfY2FzdHxzdHJ1Y3R8c3dpdGNofHRlbXBsYXRlfHRoaXN8dGhyZWFkX2xvY2FsfHRocm93fHRyeXx0eXBlZGVmfHR5cGVpZHx0eXBlbmFtZXx1bmlvbnx1bnNpZ25lZHx1c2luZ3x2aXJ0dWFsfHZvaWR8dm9sYXRpbGV8d2NoYXJfdHx3aGlsZSlcXGIvLFwiYm9vbGVhblwiOi9cXGIodHJ1ZXxmYWxzZSlcXGIvLG9wZXJhdG9yOi9bLStdezEsMn18IT0/fDx7MSwyfT0/fD57MSwyfT0/fFxcLT58OnsxLDJ9fD17MSwyfXxcXF58fnwlfCZ7MSwyfXxcXHw/XFx8fFxcP3xcXCp8XFwvfFxcYihhbmR8YW5kX2VxfGJpdGFuZHxiaXRvcnxub3R8bm90X2VxfG9yfG9yX2VxfHhvcnx4b3JfZXEpXFxiL30pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJjcHBcIixcImtleXdvcmRcIix7XCJjbGFzcy1uYW1lXCI6e3BhdHRlcm46LyhjbGFzc1xccyspW2EtejAtOV9dKy9pLGxvb2tiZWhpbmQ6ITB9fSk7XG4hZnVuY3Rpb24oZSl7ZS5sYW5ndWFnZXMucnVieT1lLmxhbmd1YWdlcy5leHRlbmQoXCJjbGlrZVwiLHtjb21tZW50Oi8jKD8hXFx7W15cXHJcXG5dKj9cXH0pLiovLGtleXdvcmQ6L1xcYihhbGlhc3xhbmR8QkVHSU58YmVnaW58YnJlYWt8Y2FzZXxjbGFzc3xkZWZ8ZGVmaW5lX21ldGhvZHxkZWZpbmVkfGRvfGVhY2h8ZWxzZXxlbHNpZnxFTkR8ZW5kfGVuc3VyZXxmYWxzZXxmb3J8aWZ8aW58bW9kdWxlfG5ld3xuZXh0fG5pbHxub3R8b3J8cmFpc2V8cmVkb3xyZXF1aXJlfHJlc2N1ZXxyZXRyeXxyZXR1cm58c2VsZnxzdXBlcnx0aGVufHRocm93fHRydWV8dW5kZWZ8dW5sZXNzfHVudGlsfHdoZW58d2hpbGV8eWllbGQpXFxiL30pO3ZhciBuPXtwYXR0ZXJuOi8jXFx7W159XStcXH0vLGluc2lkZTp7ZGVsaW1pdGVyOntwYXR0ZXJuOi9eI1xce3xcXH0kLyxhbGlhczpcInRhZ1wifSxyZXN0OmUudXRpbC5jbG9uZShlLmxhbmd1YWdlcy5ydWJ5KX19O2UubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcInJ1YnlcIixcImtleXdvcmRcIix7cmVnZXg6W3twYXR0ZXJuOi8lcihbXmEtekEtWjAtOVxcc1xce1xcKFxcWzxdKSg/OlteXFxcXF18XFxcXFtcXHNcXFNdKSo/XFwxW2dpbV17MCwzfS8saW5zaWRlOntpbnRlcnBvbGF0aW9uOm59fSx7cGF0dGVybjovJXJcXCgoPzpbXigpXFxcXF18XFxcXFtcXHNcXFNdKSpcXClbZ2ltXXswLDN9LyxpbnNpZGU6e2ludGVycG9sYXRpb246bn19LHtwYXR0ZXJuOi8lclxceyg/OlteI3t9XFxcXF18Iyg/Olxce1tefV0rXFx9KT98XFxcXFtcXHNcXFNdKSpcXH1bZ2ltXXswLDN9LyxpbnNpZGU6e2ludGVycG9sYXRpb246bn19LHtwYXR0ZXJuOi8lclxcWyg/OlteXFxbXFxdXFxcXF18XFxcXFtcXHNcXFNdKSpcXF1bZ2ltXXswLDN9LyxpbnNpZGU6e2ludGVycG9sYXRpb246bn19LHtwYXR0ZXJuOi8lcjwoPzpbXjw+XFxcXF18XFxcXFtcXHNcXFNdKSo+W2dpbV17MCwzfS8saW5zaWRlOntpbnRlcnBvbGF0aW9uOm59fSx7cGF0dGVybjovKF58W15cXC9dKVxcLyg/IVxcLykoXFxbLis/XXxcXFxcLnxbXlxcL1xcclxcbl0pK1xcL1tnaW1dezAsM30oPz1cXHMqKCR8W1xcclxcbiwuO30pXSkpLyxsb29rYmVoaW5kOiEwfV0sdmFyaWFibGU6L1tAJF0rW2EtekEtWl9dW2EtekEtWl8wLTldKig/Ols/IV18XFxiKS8sc3ltYm9sOi86W2EtekEtWl9dW2EtekEtWl8wLTldKig/Ols/IV18XFxiKS99KSxlLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJydWJ5XCIsXCJudW1iZXJcIix7YnVpbHRpbjovXFxiKEFycmF5fEJpZ251bXxCaW5kaW5nfENsYXNzfENvbnRpbnVhdGlvbnxEaXJ8RXhjZXB0aW9ufEZhbHNlQ2xhc3N8RmlsZXxTdGF0fEZpbGV8Rml4bnVtfEZsb2FkfEhhc2h8SW50ZWdlcnxJT3xNYXRjaERhdGF8TWV0aG9kfE1vZHVsZXxOaWxDbGFzc3xOdW1lcmljfE9iamVjdHxQcm9jfFJhbmdlfFJlZ2V4cHxTdHJpbmd8U3RydWN0fFRNU3xTeW1ib2x8VGhyZWFkR3JvdXB8VGhyZWFkfFRpbWV8VHJ1ZUNsYXNzKVxcYi8sY29uc3RhbnQ6L1xcYltBLVpdW2EtekEtWl8wLTldKig/Ols/IV18XFxiKS99KSxlLmxhbmd1YWdlcy5ydWJ5LnN0cmluZz1be3BhdHRlcm46LyVbcVFpSXdXeHNdPyhbXmEtekEtWjAtOVxcc1xce1xcKFxcWzxdKSg/OlteXFxcXF18XFxcXFtcXHNcXFNdKSo/XFwxLyxpbnNpZGU6e2ludGVycG9sYXRpb246bn19LHtwYXR0ZXJuOi8lW3FRaUl3V3hzXT9cXCgoPzpbXigpXFxcXF18XFxcXFtcXHNcXFNdKSpcXCkvLGluc2lkZTp7aW50ZXJwb2xhdGlvbjpufX0se3BhdHRlcm46LyVbcVFpSXdXeHNdP1xceyg/OlteI3t9XFxcXF18Iyg/Olxce1tefV0rXFx9KT98XFxcXFtcXHNcXFNdKSpcXH0vLGluc2lkZTp7aW50ZXJwb2xhdGlvbjpufX0se3BhdHRlcm46LyVbcVFpSXdXeHNdP1xcWyg/OlteXFxbXFxdXFxcXF18XFxcXFtcXHNcXFNdKSpcXF0vLGluc2lkZTp7aW50ZXJwb2xhdGlvbjpufX0se3BhdHRlcm46LyVbcVFpSXdXeHNdPzwoPzpbXjw+XFxcXF18XFxcXFtcXHNcXFNdKSo+LyxpbnNpZGU6e2ludGVycG9sYXRpb246bn19LHtwYXR0ZXJuOi8oXCJ8JykoI1xce1tefV0rXFx9fFxcXFwoPzpcXHI/XFxufFxccil8XFxcXD8uKSo/XFwxLyxpbnNpZGU6e2ludGVycG9sYXRpb246bn19XX0oUHJpc20pO1xuUHJpc20ubGFuZ3VhZ2VzLmNzcy5zZWxlY3Rvcj17cGF0dGVybjovW15cXHtcXH1cXHNdW15cXHtcXH1dKig/PVxccypcXHspLyxpbnNpZGU6e1wicHNldWRvLWVsZW1lbnRcIjovOig/OmFmdGVyfGJlZm9yZXxmaXJzdC1sZXR0ZXJ8Zmlyc3QtbGluZXxzZWxlY3Rpb24pfDo6Wy1cXHddKy8sXCJwc2V1ZG8tY2xhc3NcIjovOlstXFx3XSsoPzpcXCguKlxcKSk/LyxcImNsYXNzXCI6L1xcLlstOlxcLlxcd10rLyxpZDovI1stOlxcLlxcd10rL319LFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJjc3NcIixcImZ1bmN0aW9uXCIse2hleGNvZGU6LyNbXFxkYS1mXXszLDZ9L2ksZW50aXR5Oi9cXFxcW1xcZGEtZl17MSw4fS9pLG51bWJlcjovW1xcZCVcXC5dKy99KTtcblByaXNtLmxhbmd1YWdlcy5naXQ9e2NvbW1lbnQ6L14jLiovbSxkZWxldGVkOi9eWy3igJNdLiovbSxpbnNlcnRlZDovXlxcKy4qL20sc3RyaW5nOi8oXCJ8JykoXFxcXD8uKSo/XFwxL20sY29tbWFuZDp7cGF0dGVybjovXi4qXFwkIGdpdCAuKiQvbSxpbnNpZGU6e3BhcmFtZXRlcjovXFxzKC0tfC0pXFx3Ky9tfX0sY29vcmQ6L15AQC4qQEAkL20sY29tbWl0X3NoYTE6L15jb21taXQgXFx3ezQwfSQvbX07XG5QcmlzbS5sYW5ndWFnZXMuZ289UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse2tleXdvcmQ6L1xcYihicmVha3xjYXNlfGNoYW58Y29uc3R8Y29udGludWV8ZGVmYXVsdHxkZWZlcnxlbHNlfGZhbGx0aHJvdWdofGZvcnxmdW5jfGdvKHRvKT98aWZ8aW1wb3J0fGludGVyZmFjZXxtYXB8cGFja2FnZXxyYW5nZXxyZXR1cm58c2VsZWN0fHN0cnVjdHxzd2l0Y2h8dHlwZXx2YXIpXFxiLyxidWlsdGluOi9cXGIoYm9vbHxieXRlfGNvbXBsZXgoNjR8MTI4KXxlcnJvcnxmbG9hdCgzMnw2NCl8cnVuZXxzdHJpbmd8dT9pbnQoOHwxNnwzMnw2NHwpfHVpbnRwdHJ8YXBwZW5kfGNhcHxjbG9zZXxjb21wbGV4fGNvcHl8ZGVsZXRlfGltYWd8bGVufG1ha2V8bmV3fHBhbmljfHByaW50KGxuKT98cmVhbHxyZWNvdmVyKVxcYi8sXCJib29sZWFuXCI6L1xcYihffGlvdGF8bmlsfHRydWV8ZmFsc2UpXFxiLyxvcGVyYXRvcjovWypcXC8lXiE9XT0/fFxcK1s9K10/fC1bPS1dP3xcXHxbPXxdP3wmKD86PXwmfFxcXj0/KT98Pig/Oj49P3w9KT98PCg/Ojw9P3w9fC0pP3w6PXxcXC5cXC5cXC4vLG51bWJlcjovXFxiKC0/KDB4W2EtZlxcZF0rfChcXGQrXFwuP1xcZCp8XFwuXFxkKykoZVstK10/XFxkKyk/KWk/KVxcYi9pLHN0cmluZzovKFwifCd8YCkoXFxcXD8ufFxccnxcXG4pKj9cXDEvfSksZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5nb1tcImNsYXNzLW5hbWVcIl07XG5QcmlzbS5sYW5ndWFnZXMuamF2YT1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY2xpa2VcIix7a2V5d29yZDovXFxiKGFic3RyYWN0fGNvbnRpbnVlfGZvcnxuZXd8c3dpdGNofGFzc2VydHxkZWZhdWx0fGdvdG98cGFja2FnZXxzeW5jaHJvbml6ZWR8Ym9vbGVhbnxkb3xpZnxwcml2YXRlfHRoaXN8YnJlYWt8ZG91YmxlfGltcGxlbWVudHN8cHJvdGVjdGVkfHRocm93fGJ5dGV8ZWxzZXxpbXBvcnR8cHVibGljfHRocm93c3xjYXNlfGVudW18aW5zdGFuY2VvZnxyZXR1cm58dHJhbnNpZW50fGNhdGNofGV4dGVuZHN8aW50fHNob3J0fHRyeXxjaGFyfGZpbmFsfGludGVyZmFjZXxzdGF0aWN8dm9pZHxjbGFzc3xmaW5hbGx5fGxvbmd8c3RyaWN0ZnB8dm9sYXRpbGV8Y29uc3R8ZmxvYXR8bmF0aXZlfHN1cGVyfHdoaWxlKVxcYi8sbnVtYmVyOi9cXGIwYlswMV0rXFxifFxcYjB4W1xcZGEtZl0qXFwuP1tcXGRhLWZwXFwtXStcXGJ8XFxiXFxkKlxcLj9cXGQrKD86ZVsrLV0/XFxkKyk/W2RmXT9cXGIvaSxvcGVyYXRvcjp7cGF0dGVybjovKF58W14uXSkoPzpcXCtbKz1dP3wtWy09XT98IT0/fDw8Pz0/fD4+Pz4/PT98PT0/fCZbJj1dP3xcXHxbfD1dP3xcXCo9P3xcXC89P3wlPT98XFxePT98Wz86fl0pL20sbG9va2JlaGluZDohMH19KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YVwiLFwiZnVuY3Rpb25cIix7YW5ub3RhdGlvbjp7YWxpYXM6XCJwdW5jdHVhdGlvblwiLHBhdHRlcm46LyhefFteLl0pQFxcdysvLGxvb2tiZWhpbmQ6ITB9fSk7XG5QcmlzbS5sYW5ndWFnZXMuanNvbj17cHJvcGVydHk6L1wiLio/XCIoPz1cXHMqOikvZ2ksc3RyaW5nOi9cIig/ITopKFxcXFw/W15cIl0pKj9cIig/ITopL2csbnVtYmVyOi9cXGItPygweFtcXGRBLUZhLWZdK3xcXGQqXFwuP1xcZCsoW0VlXS0/XFxkKyk/KVxcYi9nLHB1bmN0dWF0aW9uOi9be31bXFxdKTssXS9nLG9wZXJhdG9yOi86L2csXCJib29sZWFuXCI6L1xcYih0cnVlfGZhbHNlKVxcYi9naSxcIm51bGxcIjovXFxibnVsbFxcYi9naX0sUHJpc20ubGFuZ3VhZ2VzLmpzb25wPVByaXNtLmxhbmd1YWdlcy5qc29uO1xuUHJpc20ubGFuZ3VhZ2VzLmxlc3M9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNzc1wiLHtjb21tZW50OlsvXFwvXFwqW1xcd1xcV10qP1xcKlxcLy8se3BhdHRlcm46LyhefFteXFxcXF0pXFwvXFwvLiovLGxvb2tiZWhpbmQ6ITB9XSxhdHJ1bGU6e3BhdHRlcm46L0BbXFx3LV0rPyg/OlxcKFtee31dK1xcKXxbXigpe307XSkqPyg/PVxccypcXHspL2ksaW5zaWRlOntwdW5jdHVhdGlvbjovWzooKV0vfX0sc2VsZWN0b3I6e3BhdHRlcm46Lyg/OkBcXHtbXFx3LV0rXFx9fFtee307XFxzQF0pKD86QFxce1tcXHctXStcXH18XFwoW157fV0qXFwpfFtee307QF0pKj8oPz1cXHMqXFx7KS8saW5zaWRlOnt2YXJpYWJsZTovQCtbXFx3LV0rL319LHByb3BlcnR5Oi8oPzpAXFx7W1xcdy1dK1xcfXxbXFx3LV0pKyg/OlxcK18/KT8oPz1cXHMqOikvaSxwdW5jdHVhdGlvbjovW3t9KCk7OixdLyxvcGVyYXRvcjovWytcXC0qXFwvXS99KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwibGVzc1wiLFwicHVuY3R1YXRpb25cIix7XCJmdW5jdGlvblwiOlByaXNtLmxhbmd1YWdlcy5sZXNzLmZ1bmN0aW9ufSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImxlc3NcIixcInByb3BlcnR5XCIse3ZhcmlhYmxlOlt7cGF0dGVybjovQFtcXHctXStcXHMqOi8saW5zaWRlOntwdW5jdHVhdGlvbjovOi99fSwvQEA/W1xcdy1dKy9dLFwibWl4aW4tdXNhZ2VcIjp7cGF0dGVybjovKFt7O11cXHMqKVsuI10oPyFcXGQpW1xcdy1dKy4qPyg/PVsoO10pLyxsb29rYmVoaW5kOiEwLGFsaWFzOlwiZnVuY3Rpb25cIn19KTtcblByaXNtLmxhbmd1YWdlcy5tYXJrZG93bj1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwibWFya3VwXCIse30pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJtYXJrZG93blwiLFwicHJvbG9nXCIse2Jsb2NrcXVvdGU6e3BhdHRlcm46L14+KD86W1xcdCBdKj4pKi9tLGFsaWFzOlwicHVuY3R1YXRpb25cIn0sY29kZTpbe3BhdHRlcm46L14oPzogezR9fFxcdCkuKy9tLGFsaWFzOlwia2V5d29yZFwifSx7cGF0dGVybjovYGAuKz9gYHxgW15gXFxuXStgLyxhbGlhczpcImtleXdvcmRcIn1dLHRpdGxlOlt7cGF0dGVybjovXFx3Ky4qKD86XFxyP1xcbnxcXHIpKD86PT0rfC0tKykvLGFsaWFzOlwiaW1wb3J0YW50XCIsaW5zaWRlOntwdW5jdHVhdGlvbjovPT0rJHwtLSskL319LHtwYXR0ZXJuOi8oXlxccyopIysuKy9tLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJpbXBvcnRhbnRcIixpbnNpZGU6e3B1bmN0dWF0aW9uOi9eIyt8IyskL319XSxocjp7cGF0dGVybjovKF5cXHMqKShbKi1dKShbXFx0IF0qXFwyKXsyLH0oPz1cXHMqJCkvbSxsb29rYmVoaW5kOiEwLGFsaWFzOlwicHVuY3R1YXRpb25cIn0sbGlzdDp7cGF0dGVybjovKF5cXHMqKSg/OlsqKy1dfFxcZCtcXC4pKD89W1xcdCBdLikvbSxsb29rYmVoaW5kOiEwLGFsaWFzOlwicHVuY3R1YXRpb25cIn0sXCJ1cmwtcmVmZXJlbmNlXCI6e3BhdHRlcm46LyE/XFxbW15cXF1dK1xcXTpbXFx0IF0rKD86XFxTK3w8KD86XFxcXC58W14+XFxcXF0pKz4pKD86W1xcdCBdKyg/OlwiKD86XFxcXC58W15cIlxcXFxdKSpcInwnKD86XFxcXC58W14nXFxcXF0pKid8XFwoKD86XFxcXC58W14pXFxcXF0pKlxcKSkpPy8saW5zaWRlOnt2YXJpYWJsZTp7cGF0dGVybjovXighP1xcWylbXlxcXV0rLyxsb29rYmVoaW5kOiEwfSxzdHJpbmc6Lyg/OlwiKD86XFxcXC58W15cIlxcXFxdKSpcInwnKD86XFxcXC58W14nXFxcXF0pKid8XFwoKD86XFxcXC58W14pXFxcXF0pKlxcKSkkLyxwdW5jdHVhdGlvbjovXltcXFtcXF0hOl18Wzw+XS99LGFsaWFzOlwidXJsXCJ9LGJvbGQ6e3BhdHRlcm46LyhefFteXFxcXF0pKFxcKlxcKnxfXykoPzooPzpcXHI/XFxufFxccikoPyFcXHI/XFxufFxccil8LikrP1xcMi8sbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi9eXFwqXFwqfF5fX3xcXCpcXCokfF9fJC99fSxpdGFsaWM6e3BhdHRlcm46LyhefFteXFxcXF0pKFsqX10pKD86KD86XFxyP1xcbnxcXHIpKD8hXFxyP1xcbnxcXHIpfC4pKz9cXDIvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOntwdW5jdHVhdGlvbjovXlsqX118WypfXSQvfX0sdXJsOntwYXR0ZXJuOi8hP1xcW1teXFxdXStcXF0oPzpcXChbXlxccyldKyg/OltcXHQgXStcIig/OlxcXFwufFteXCJcXFxcXSkqXCIpP1xcKXwgP1xcW1teXFxdXFxuXSpcXF0pLyxpbnNpZGU6e3ZhcmlhYmxlOntwYXR0ZXJuOi8oIT9cXFspW15cXF1dKyg/PVxcXSQpLyxsb29rYmVoaW5kOiEwfSxzdHJpbmc6e3BhdHRlcm46L1wiKD86XFxcXC58W15cIlxcXFxdKSpcIig/PVxcKSQpL319fX0pLFByaXNtLmxhbmd1YWdlcy5tYXJrZG93bi5ib2xkLmluc2lkZS51cmw9UHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMubWFya2Rvd24udXJsKSxQcmlzbS5sYW5ndWFnZXMubWFya2Rvd24uaXRhbGljLmluc2lkZS51cmw9UHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMubWFya2Rvd24udXJsKSxQcmlzbS5sYW5ndWFnZXMubWFya2Rvd24uYm9sZC5pbnNpZGUuaXRhbGljPVByaXNtLnV0aWwuY2xvbmUoUHJpc20ubGFuZ3VhZ2VzLm1hcmtkb3duLml0YWxpYyksUHJpc20ubGFuZ3VhZ2VzLm1hcmtkb3duLml0YWxpYy5pbnNpZGUuYm9sZD1QcmlzbS51dGlsLmNsb25lKFByaXNtLmxhbmd1YWdlcy5tYXJrZG93bi5ib2xkKTtcblByaXNtLmxhbmd1YWdlcy5wZXJsPXtjb21tZW50Olt7cGF0dGVybjovKF5cXHMqKT1cXHcrW1xcc1xcU10qPz1jdXQuKi9tLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXlxcXFwkXSkjLiovLGxvb2tiZWhpbmQ6ITB9XSxzdHJpbmc6Wy9cXGIoPzpxfHFxfHF4fHF3KVxccyooW15hLXpBLVowLTlcXHNcXHtcXChcXFs8XSkoPzpbXlxcXFxdfFxcXFxbXFxzXFxTXSkqP1xcMS8sL1xcYig/OnF8cXF8cXh8cXcpXFxzKyhbYS16QS1aMC05XSkoPzpbXlxcXFxdfFxcXFxbXFxzXFxTXSkqP1xcMS8sL1xcYig/OnF8cXF8cXh8cXcpXFxzKlxcKCg/OlteKClcXFxcXXxcXFxcW1xcc1xcU10pKlxcKS8sL1xcYig/OnF8cXF8cXh8cXcpXFxzKlxceyg/Oltee31cXFxcXXxcXFxcW1xcc1xcU10pKlxcfS8sL1xcYig/OnF8cXF8cXh8cXcpXFxzKlxcWyg/OlteW1xcXVxcXFxdfFxcXFxbXFxzXFxTXSkqXFxdLywvXFxiKD86cXxxcXxxeHxxdylcXHMqPCg/OltePD5cXFxcXXxcXFxcW1xcc1xcU10pKj4vLC8oXCJ8YCkoPzpbXlxcXFxdfFxcXFxbXFxzXFxTXSkqP1xcMS8sLycoPzpbXidcXFxcXFxyXFxuXXxcXFxcLikqJy9dLHJlZ2V4OlsvXFxiKD86bXxxcilcXHMqKFteYS16QS1aMC05XFxzXFx7XFwoXFxbPF0pKD86W15cXFxcXXxcXFxcW1xcc1xcU10pKj9cXDFbbXNpeHBvZHVhbG5nY10qLywvXFxiKD86bXxxcilcXHMrKFthLXpBLVowLTldKSg/OlteXFxcXF18XFxcXC4pKj9cXDFbbXNpeHBvZHVhbG5nY10qLywvXFxiKD86bXxxcilcXHMqXFwoKD86W14oKVxcXFxdfFxcXFxbXFxzXFxTXSkqXFwpW21zaXhwb2R1YWxuZ2NdKi8sL1xcYig/Om18cXIpXFxzKlxceyg/Oltee31cXFxcXXxcXFxcW1xcc1xcU10pKlxcfVttc2l4cG9kdWFsbmdjXSovLC9cXGIoPzptfHFyKVxccypcXFsoPzpbXltcXF1cXFxcXXxcXFxcW1xcc1xcU10pKlxcXVttc2l4cG9kdWFsbmdjXSovLC9cXGIoPzptfHFyKVxccyo8KD86W148PlxcXFxdfFxcXFxbXFxzXFxTXSkqPlttc2l4cG9kdWFsbmdjXSovLHtwYXR0ZXJuOi8oXnxbXi1dXFxiKSg/OnN8dHJ8eSlcXHMqKFteYS16QS1aMC05XFxzXFx7XFwoXFxbPF0pKD86W15cXFxcXXxcXFxcW1xcc1xcU10pKj9cXDIoPzpbXlxcXFxdfFxcXFxbXFxzXFxTXSkqP1xcMlttc2l4cG9kdWFsbmdjZXJdKi8sbG9va2JlaGluZDohMH0se3BhdHRlcm46LyhefFteLV1cXGIpKD86c3x0cnx5KVxccysoW2EtekEtWjAtOV0pKD86W15cXFxcXXxcXFxcW1xcc1xcU10pKj9cXDIoPzpbXlxcXFxdfFxcXFxbXFxzXFxTXSkqP1xcMlttc2l4cG9kdWFsbmdjZXJdKi8sbG9va2JlaGluZDohMH0se3BhdHRlcm46LyhefFteLV1cXGIpKD86c3x0cnx5KVxccypcXCgoPzpbXigpXFxcXF18XFxcXFtcXHNcXFNdKSpcXClcXHMqXFwoKD86W14oKVxcXFxdfFxcXFxbXFxzXFxTXSkqXFwpW21zaXhwb2R1YWxuZ2Nlcl0qLyxsb29rYmVoaW5kOiEwfSx7cGF0dGVybjovKF58W14tXVxcYikoPzpzfHRyfHkpXFxzKlxceyg/Oltee31cXFxcXXxcXFxcW1xcc1xcU10pKlxcfVxccypcXHsoPzpbXnt9XFxcXF18XFxcXFtcXHNcXFNdKSpcXH1bbXNpeHBvZHVhbG5nY2VyXSovLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXi1dXFxiKSg/OnN8dHJ8eSlcXHMqXFxbKD86W15bXFxdXFxcXF18XFxcXFtcXHNcXFNdKSpcXF1cXHMqXFxbKD86W15bXFxdXFxcXF18XFxcXFtcXHNcXFNdKSpcXF1bbXNpeHBvZHVhbG5nY2VyXSovLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXi1dXFxiKSg/OnN8dHJ8eSlcXHMqPCg/OltePD5cXFxcXXxcXFxcW1xcc1xcU10pKj5cXHMqPCg/OltePD5cXFxcXXxcXFxcW1xcc1xcU10pKj5bbXNpeHBvZHVhbG5nY2VyXSovLGxvb2tiZWhpbmQ6ITB9LC9cXC8oPzpbXlxcL1xcXFxcXHJcXG5dfFxcXFwuKSpcXC9bbXNpeHBvZHVhbG5nY10qKD89XFxzKig/OiR8W1xcclxcbiwuO30pJnxcXC0rKn48PiE/Xl18KGx0fGd0fGxlfGdlfGVxfG5lfGNtcHxub3R8YW5kfG9yfHhvcnx4KVxcYikpL10sdmFyaWFibGU6Wy9bJiokQCVdXFx7XFxeW0EtWl0rXFx9LywvWyYqJEAlXVxcXltBLVpfXS8sL1smKiRAJV0jPyg/PVxceykvLC9bJiokQCVdIz8oKDo6KSonPyg/IVxcZClbXFx3JF0rKSsoOjopKi9pLC9bJiokQCVdXFxkKy8sLyg/ISU9KVskQCVdWyFcIiMkJSYnKCkqKyxcXC0uXFwvOjs8PT4/QFtcXFxcXFxdXl9ge3x9fl0vXSxmaWxlaGFuZGxlOntwYXR0ZXJuOi88KD8hWzw9XSlcXFMqPnxcXGJfXFxiLyxhbGlhczpcInN5bWJvbFwifSx2c3RyaW5nOntwYXR0ZXJuOi92XFxkKyhcXC5cXGQrKSp8XFxkKyhcXC5cXGQrKXsyLH0vLGFsaWFzOlwic3RyaW5nXCJ9LFwiZnVuY3Rpb25cIjp7cGF0dGVybjovc3ViIFthLXowLTlfXSsvaSxpbnNpZGU6e2tleXdvcmQ6L3N1Yi99fSxrZXl3b3JkOi9cXGIoYW55fGJyZWFrfGNvbnRpbnVlfGRlZmF1bHR8ZGVsZXRlfGRpZXxkb3xlbHNlfGVsc2lmfGV2YWx8Zm9yfGZvcmVhY2h8Z2l2ZW58Z290b3xpZnxsYXN0fGxvY2FsfG15fG5leHR8b3VyfHBhY2thZ2V8cHJpbnR8cmVkb3xyZXF1aXJlfHNheXxzdGF0ZXxzdWJ8c3dpdGNofHVuZGVmfHVubGVzc3x1bnRpbHx1c2V8d2hlbnx3aGlsZSlcXGIvLG51bWJlcjovXFxiLT8oMHhbXFxkQS1GYS1mXShfP1tcXGRBLUZhLWZdKSp8MGJbMDFdKF8/WzAxXSkqfChcXGQoXz9cXGQpKik/XFwuP1xcZChfP1xcZCkqKFtFZV1bKy1dP1xcZCspPylcXGIvLG9wZXJhdG9yOi8tW3J3eG9SV1hPZXpzZmRscFNiY3R1Z2tUQk1BQ11cXGJ8XFwrWys9XT98LVstPT5dP3xcXCpcXCo/PT98XFwvXFwvPz0/fD1bPX4+XT98flt+PV0/fFxcfFxcfD89P3wmJj89P3w8KD86PT4/fDw9Pyk/fD4+Pz0/fCFbfj1dP3xbJV5dPT98XFwuKD86PXxcXC5cXC4/KT98W1xcXFw/XXxcXGJ4KD86PXxcXGIpfFxcYihsdHxndHxsZXxnZXxlcXxuZXxjbXB8bm90fGFuZHxvcnx4b3IpXFxiLyxwdW5jdHVhdGlvbjovW3t9W1xcXTsoKSw6XS99O1xuUHJpc20ubGFuZ3VhZ2VzLnBocD1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY2xpa2VcIix7a2V5d29yZDovXFxiKGFuZHxvcnx4b3J8YXJyYXl8YXN8YnJlYWt8Y2FzZXxjZnVuY3Rpb258Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVjbGFyZXxkZWZhdWx0fGRpZXxkb3xlbHNlfGVsc2VpZnxlbmRkZWNsYXJlfGVuZGZvcnxlbmRmb3JlYWNofGVuZGlmfGVuZHN3aXRjaHxlbmR3aGlsZXxleHRlbmRzfGZvcnxmb3JlYWNofGZ1bmN0aW9ufGluY2x1ZGV8aW5jbHVkZV9vbmNlfGdsb2JhbHxpZnxuZXd8cmV0dXJufHN0YXRpY3xzd2l0Y2h8dXNlfHJlcXVpcmV8cmVxdWlyZV9vbmNlfHZhcnx3aGlsZXxhYnN0cmFjdHxpbnRlcmZhY2V8cHVibGljfGltcGxlbWVudHN8cHJpdmF0ZXxwcm90ZWN0ZWR8cGFyZW50fHRocm93fG51bGx8ZWNob3xwcmludHx0cmFpdHxuYW1lc3BhY2V8ZmluYWx8eWllbGR8Z290b3xpbnN0YW5jZW9mfGZpbmFsbHl8dHJ5fGNhdGNoKVxcYi9pLGNvbnN0YW50Oi9cXGJbQS1aMC05X117Mix9XFxiLyxjb21tZW50OntwYXR0ZXJuOi8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHdcXFddKj9cXCpcXC98XFwvXFwvLiopLyxsb29rYmVoaW5kOiEwfX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJwaHBcIixcImNsYXNzLW5hbWVcIix7XCJzaGVsbC1jb21tZW50XCI6e3BhdHRlcm46LyhefFteXFxcXF0pIy4qLyxsb29rYmVoaW5kOiEwLGFsaWFzOlwiY29tbWVudFwifX0pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJwaHBcIixcImtleXdvcmRcIix7ZGVsaW1pdGVyOi9cXD8+fDxcXD8oPzpwaHApPy9pLHZhcmlhYmxlOi9cXCRcXHcrXFxiL2ksXCJwYWNrYWdlXCI6e3BhdHRlcm46LyhcXFxcfG5hbWVzcGFjZVxccyt8dXNlXFxzKylbXFx3XFxcXF0rLyxsb29rYmVoaW5kOiEwLGluc2lkZTp7cHVuY3R1YXRpb246L1xcXFwvfX19KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwicGhwXCIsXCJvcGVyYXRvclwiLHtwcm9wZXJ0eTp7cGF0dGVybjovKC0+KVtcXHddKy8sbG9va2JlaGluZDohMH19KSxQcmlzbS5sYW5ndWFnZXMubWFya3VwJiYoUHJpc20uaG9va3MuYWRkKFwiYmVmb3JlLWhpZ2hsaWdodFwiLGZ1bmN0aW9uKGUpe1wicGhwXCI9PT1lLmxhbmd1YWdlJiYoZS50b2tlblN0YWNrPVtdLGUuYmFja3VwQ29kZT1lLmNvZGUsZS5jb2RlPWUuY29kZS5yZXBsYWNlKC8oPzo8XFw/cGhwfDxcXD8pW1xcd1xcV10qPyg/OlxcPz4pL2dpLGZ1bmN0aW9uKGEpe3JldHVybiBlLnRva2VuU3RhY2sucHVzaChhKSxcInt7e1BIUFwiK2UudG9rZW5TdGFjay5sZW5ndGgrXCJ9fX1cIn0pKX0pLFByaXNtLmhvb2tzLmFkZChcImJlZm9yZS1pbnNlcnRcIixmdW5jdGlvbihlKXtcInBocFwiPT09ZS5sYW5ndWFnZSYmKGUuY29kZT1lLmJhY2t1cENvZGUsZGVsZXRlIGUuYmFja3VwQ29kZSl9KSxQcmlzbS5ob29rcy5hZGQoXCJhZnRlci1oaWdobGlnaHRcIixmdW5jdGlvbihlKXtpZihcInBocFwiPT09ZS5sYW5ndWFnZSl7Zm9yKHZhciBhLG49MDthPWUudG9rZW5TdGFja1tuXTtuKyspZS5oaWdobGlnaHRlZENvZGU9ZS5oaWdobGlnaHRlZENvZGUucmVwbGFjZShcInt7e1BIUFwiKyhuKzEpK1wifX19XCIsUHJpc20uaGlnaGxpZ2h0KGEsZS5ncmFtbWFyLFwicGhwXCIpLnJlcGxhY2UoL1xcJC9nLFwiJCQkJFwiKSk7ZS5lbGVtZW50LmlubmVySFRNTD1lLmhpZ2hsaWdodGVkQ29kZX19KSxQcmlzbS5ob29rcy5hZGQoXCJ3cmFwXCIsZnVuY3Rpb24oZSl7XCJwaHBcIj09PWUubGFuZ3VhZ2UmJlwibWFya3VwXCI9PT1lLnR5cGUmJihlLmNvbnRlbnQ9ZS5jb250ZW50LnJlcGxhY2UoLyhcXHtcXHtcXHtQSFBbMC05XStcXH1cXH1cXH0pL2csJzxzcGFuIGNsYXNzPVwidG9rZW4gcGhwXCI+JDE8L3NwYW4+JykpfSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcInBocFwiLFwiY29tbWVudFwiLHttYXJrdXA6e3BhdHRlcm46LzxbXj9dXFwvPyguKj8pPi8saW5zaWRlOlByaXNtLmxhbmd1YWdlcy5tYXJrdXB9LHBocDovXFx7XFx7XFx7UEhQWzAtOV0rXFx9XFx9XFx9L30pKTtcblByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJwaHBcIixcInZhcmlhYmxlXCIse1widGhpc1wiOi9cXCR0aGlzXFxiLyxnbG9iYWw6L1xcJCg/Ol8oPzpTRVJWRVJ8R0VUfFBPU1R8RklMRVN8UkVRVUVTVHxTRVNTSU9OfEVOVnxDT09LSUUpfEdMT0JBTFN8SFRUUF9SQVdfUE9TVF9EQVRBfGFyZ2N8YXJndnxwaHBfZXJyb3Jtc2d8aHR0cF9yZXNwb25zZV9oZWFkZXIpLyxzY29wZTp7cGF0dGVybjovXFxiW1xcd1xcXFxdKzo6LyxpbnNpZGU6e2tleXdvcmQ6LyhzdGF0aWN8c2VsZnxwYXJlbnQpLyxwdW5jdHVhdGlvbjovKDo6fFxcXFwpL319fSk7XG5QcmlzbS5sYW5ndWFnZXMucHl0aG9uPXtcInRyaXBsZS1xdW90ZWQtc3RyaW5nXCI6e3BhdHRlcm46L1wiXCJcIltcXHNcXFNdKz9cIlwiXCJ8JycnW1xcc1xcU10rPycnJy8sYWxpYXM6XCJzdHJpbmdcIn0sY29tbWVudDp7cGF0dGVybjovKF58W15cXFxcXSkjLiovLGxvb2tiZWhpbmQ6ITB9LHN0cmluZzp7cGF0dGVybjovKFwifCcpKD86XFxcXFxcXFx8XFxcXD9bXlxcXFxcXHJcXG5dKSo/XFwxLyxncmVlZHk6ITB9LFwiZnVuY3Rpb25cIjp7cGF0dGVybjovKCg/Ol58XFxzKWRlZlsgXFx0XSspW2EtekEtWl9dW2EtekEtWjAtOV9dKig/PVxcKCkvZyxsb29rYmVoaW5kOiEwfSxcImNsYXNzLW5hbWVcIjp7cGF0dGVybjovKFxcYmNsYXNzXFxzKylbYS16MC05X10rL2ksbG9va2JlaGluZDohMH0sa2V5d29yZDovXFxiKD86YXN8YXNzZXJ0fGFzeW5jfGF3YWl0fGJyZWFrfGNsYXNzfGNvbnRpbnVlfGRlZnxkZWx8ZWxpZnxlbHNlfGV4Y2VwdHxleGVjfGZpbmFsbHl8Zm9yfGZyb218Z2xvYmFsfGlmfGltcG9ydHxpbnxpc3xsYW1iZGF8cGFzc3xwcmludHxyYWlzZXxyZXR1cm58dHJ5fHdoaWxlfHdpdGh8eWllbGQpXFxiLyxcImJvb2xlYW5cIjovXFxiKD86VHJ1ZXxGYWxzZSlcXGIvLG51bWJlcjovXFxiLT8oPzowW2JvXSk/KD86KD86XFxkfDB4W1xcZGEtZl0pW1xcZGEtZl0qXFwuP1xcZCp8XFwuXFxkKykoPzplWystXT9cXGQrKT9qP1xcYi9pLG9wZXJhdG9yOi9bLSslPV09P3whPXxcXCpcXCo/PT98XFwvXFwvPz0/fDxbPD0+XT98Pls9Pl0/fFsmfF5+XXxcXGIoPzpvcnxhbmR8bm90KVxcYi8scHVuY3R1YXRpb246L1t7fVtcXF07KCksLjpdL307XG4hZnVuY3Rpb24oYSl7dmFyIGU9YS51dGlsLmNsb25lKGEubGFuZ3VhZ2VzLmphdmFzY3JpcHQpO2EubGFuZ3VhZ2VzLmpzeD1hLmxhbmd1YWdlcy5leHRlbmQoXCJtYXJrdXBcIixlKSxhLmxhbmd1YWdlcy5qc3gudGFnLnBhdHRlcm49LzxcXC8/W1xcd1xcLjotXStcXHMqKD86XFxzK1tcXHdcXC46LV0rKD86PSg/OihcInwnKShcXFxcP1tcXHdcXFddKSo/XFwxfFteXFxzJ1wiPj1dK3woXFx7W1xcd1xcV10qP1xcfSkpKT9cXHMqKSpcXC8/Pi9pLGEubGFuZ3VhZ2VzLmpzeC50YWcuaW5zaWRlW1wiYXR0ci12YWx1ZVwiXS5wYXR0ZXJuPS89W15cXHtdKD86KCd8XCIpW1xcd1xcV10qPyhcXDEpfFteXFxzPl0rKS9pO3ZhciBzPWEudXRpbC5jbG9uZShhLmxhbmd1YWdlcy5qc3gpO2RlbGV0ZSBzLnB1bmN0dWF0aW9uLHM9YS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwianN4XCIsXCJvcGVyYXRvclwiLHtwdW5jdHVhdGlvbjovPSg/PXspfFt7fVtcXF07KCksLjpdL30se2pzeDpzfSksYS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiaW5zaWRlXCIsXCJhdHRyLXZhbHVlXCIse3NjcmlwdDp7cGF0dGVybjovPShcXHsoPzpcXHtbXn1dKlxcfXxbXn1dKStcXH0pL2ksaW5zaWRlOnMsYWxpYXM6XCJsYW5ndWFnZS1qYXZhc2NyaXB0XCJ9fSxhLmxhbmd1YWdlcy5qc3gudGFnKX0oUHJpc20pO1xuUHJpc20ubGFuZ3VhZ2VzLnNjc3M9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNzc1wiLHtjb21tZW50OntwYXR0ZXJuOi8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHdcXFddKj9cXCpcXC98XFwvXFwvLiopLyxsb29rYmVoaW5kOiEwfSxhdHJ1bGU6e3BhdHRlcm46L0BbXFx3LV0rKD86XFwoW14oKV0rXFwpfFteKF0pKj8oPz1cXHMrW3s7XSkvLGluc2lkZTp7cnVsZTovQFtcXHctXSsvfX0sdXJsOi8oPzpbLWEtel0rLSkqdXJsKD89XFwoKS9pLHNlbGVjdG9yOntwYXR0ZXJuOi8oPz1cXFMpW15AO1xce1xcfVxcKFxcKV0/KFteQDtcXHtcXH1cXChcXCldfCZ8I1xce1xcJFstX1xcd10rXFx9KSsoPz1cXHMqXFx7KFxcfXxcXHN8W15cXH1dKyg6fFxceylbXlxcfV0rKSkvbSxpbnNpZGU6e3BsYWNlaG9sZGVyOi8lWy1fXFx3XSsvfX19KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwic2Nzc1wiLFwiYXRydWxlXCIse2tleXdvcmQ6Wy9AKD86aWZ8ZWxzZSg/OiBpZik/fGZvcnxlYWNofHdoaWxlfGltcG9ydHxleHRlbmR8ZGVidWd8d2FybnxtaXhpbnxpbmNsdWRlfGZ1bmN0aW9ufHJldHVybnxjb250ZW50KS9pLHtwYXR0ZXJuOi8oICspKD86ZnJvbXx0aHJvdWdoKSg/PSApLyxsb29rYmVoaW5kOiEwfV19KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwic2Nzc1wiLFwicHJvcGVydHlcIix7dmFyaWFibGU6L1xcJFstX1xcd10rfCNcXHtcXCRbLV9cXHddK1xcfS99KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwic2Nzc1wiLFwiZnVuY3Rpb25cIix7cGxhY2Vob2xkZXI6e3BhdHRlcm46LyVbLV9cXHddKy8sYWxpYXM6XCJzZWxlY3RvclwifSxzdGF0ZW1lbnQ6L1xcQiEoPzpkZWZhdWx0fG9wdGlvbmFsKVxcYi9pLFwiYm9vbGVhblwiOi9cXGIoPzp0cnVlfGZhbHNlKVxcYi8sXCJudWxsXCI6L1xcYm51bGxcXGIvLG9wZXJhdG9yOntwYXR0ZXJuOi8oXFxzKSg/OlstKypcXC8lXXxbPSFdPXw8PT98Pj0/fGFuZHxvcnxub3QpKD89XFxzKS8sbG9va2JlaGluZDohMH19KSxQcmlzbS5sYW5ndWFnZXMuc2Nzcy5hdHJ1bGUuaW5zaWRlLnJlc3Q9UHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMuc2Nzcyk7XG5QcmlzbS5sYW5ndWFnZXMuc3FsPXtjb21tZW50OntwYXR0ZXJuOi8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHdcXFddKj9cXCpcXC98KD86LS18XFwvXFwvfCMpLiopLyxsb29rYmVoaW5kOiEwfSxzdHJpbmc6e3BhdHRlcm46LyhefFteQFxcXFxdKShcInwnKSg/OlxcXFw/W1xcc1xcU10pKj9cXDIvLGxvb2tiZWhpbmQ6ITB9LHZhcmlhYmxlOi9AW1xcdy4kXSt8QChcInwnfGApKD86XFxcXD9bXFxzXFxTXSkrP1xcMS8sXCJmdW5jdGlvblwiOi9cXGIoPzpDT1VOVHxTVU18QVZHfE1JTnxNQVh8RklSU1R8TEFTVHxVQ0FTRXxMQ0FTRXxNSUR8TEVOfFJPVU5EfE5PV3xGT1JNQVQpKD89XFxzKlxcKCkvaSxrZXl3b3JkOi9cXGIoPzpBQ1RJT058QUREfEFGVEVSfEFMR09SSVRITXxBTEx8QUxURVJ8QU5BTFlaRXxBTll8QVBQTFl8QVN8QVNDfEFVVEhPUklaQVRJT058QkFDS1VQfEJEQnxCRUdJTnxCRVJLRUxFWURCfEJJR0lOVHxCSU5BUll8QklUfEJMT0J8Qk9PTHxCT09MRUFOfEJSRUFLfEJST1dTRXxCVFJFRXxCVUxLfEJZfENBTEx8Q0FTQ0FERUQ/fENBU0V8Q0hBSU58Q0hBUiBWQVJZSU5HfENIQVJBQ1RFUiAoPzpTRVR8VkFSWUlORyl8Q0hBUlNFVHxDSEVDS3xDSEVDS1BPSU5UfENMT1NFfENMVVNURVJFRHxDT0FMRVNDRXxDT0xMQVRFfENPTFVNTnxDT0xVTU5TfENPTU1FTlR8Q09NTUlUfENPTU1JVFRFRHxDT01QVVRFfENPTk5FQ1R8Q09OU0lTVEVOVHxDT05TVFJBSU5UfENPTlRBSU5TfENPTlRBSU5TVEFCTEV8Q09OVElOVUV8Q09OVkVSVHxDUkVBVEV8Q1JPU1N8Q1VSUkVOVCg/Ol9EQVRFfF9USU1FfF9USU1FU1RBTVB8X1VTRVIpP3xDVVJTT1J8REFUQSg/OkJBU0VTPyk/fERBVEVUSU1FfERCQ0N8REVBTExPQ0FURXxERUN8REVDSU1BTHxERUNMQVJFfERFRkFVTFR8REVGSU5FUnxERUxBWUVEfERFTEVURXxERU5ZfERFU0N8REVTQ1JJQkV8REVURVJNSU5JU1RJQ3xESVNBQkxFfERJU0NBUkR8RElTS3xESVNUSU5DVHxESVNUSU5DVFJPV3xESVNUUklCVVRFRHxET3xET1VCTEUoPzogUFJFQ0lTSU9OKT98RFJPUHxEVU1NWXxEVU1QKD86RklMRSk/fERVUExJQ0FURSBLRVl8RUxTRXxFTkFCTEV8RU5DTE9TRUQgQll8RU5EfEVOR0lORXxFTlVNfEVSUkxWTHxFUlJPUlN8RVNDQVBFKD86RCBCWSk/fEVYQ0VQVHxFWEVDKD86VVRFKT98RVhJU1RTfEVYSVR8RVhQTEFJTnxFWFRFTkRFRHxGRVRDSHxGSUVMRFN8RklMRXxGSUxMRkFDVE9SfEZJUlNUfEZJWEVEfEZMT0FUfEZPTExPV0lOR3xGT1IoPzogRUFDSCBST1cpP3xGT1JDRXxGT1JFSUdOfEZSRUVURVhUKD86VEFCTEUpP3xGUk9NfEZVTEx8RlVOQ1RJT058R0VPTUVUUlkoPzpDT0xMRUNUSU9OKT98R0xPQkFMfEdPVE98R1JBTlR8R1JPVVB8SEFORExFUnxIQVNIfEhBVklOR3xIT0xETE9DS3xJREVOVElUWSg/Ol9JTlNFUlR8Q09MKT98SUZ8SUdOT1JFfElNUE9SVHxJTkRFWHxJTkZJTEV8SU5ORVJ8SU5OT0RCfElOT1VUfElOU0VSVHxJTlR8SU5URUdFUnxJTlRFUlNFQ1R8SU5UT3xJTlZPS0VSfElTT0xBVElPTiBMRVZFTHxKT0lOfEtFWVM/fEtJTEx8TEFOR1VBR0UgU1FMfExBU1R8TEVGVHxMSU1JVHxMSU5FTk98TElORVN8TElORVNUUklOR3xMT0FEfExPQ0FMfExPQ0t8TE9ORyg/OkJMT0J8VEVYVCl8TUFUQ0goPzpFRCk/fE1FRElVTSg/OkJMT0J8SU5UfFRFWFQpfE1FUkdFfE1JRERMRUlOVHxNT0RJRklFUyBTUUwgREFUQXxNT0RJRll8TVVMVEkoPzpMSU5FU1RSSU5HfFBPSU5UfFBPTFlHT04pfE5BVElPTkFMKD86IENIQVIgVkFSWUlOR3wgQ0hBUkFDVEVSKD86IFZBUllJTkcpP3wgVkFSQ0hBUik/fE5BVFVSQUx8TkNIQVIoPzogVkFSQ0hBUik/fE5FWFR8Tk8oPzogU1FMfENIRUNLfENZQ0xFKT98Tk9OQ0xVU1RFUkVEfE5VTExJRnxOVU1FUklDfE9GRj98T0ZGU0VUUz98T058T1BFTig/OkRBVEFTT1VSQ0V8UVVFUll8Uk9XU0VUKT98T1BUSU1JWkV8T1BUSU9OKD86QUxMWSk/fE9SREVSfE9VVCg/OkVSfEZJTEUpP3xPVkVSfFBBUlRJQUx8UEFSVElUSU9OfFBFUkNFTlR8UElWT1R8UExBTnxQT0lOVHxQT0xZR09OfFBSRUNFRElOR3xQUkVDSVNJT058UFJFVnxQUklNQVJZfFBSSU5UfFBSSVZJTEVHRVN8UFJPQyg/OkVEVVJFKT98UFVCTElDfFBVUkdFfFFVSUNLfFJBSVNFUlJPUnxSRUFEKD86UyBTUUwgREFUQXxURVhUKT98UkVBTHxSRUNPTkZJR1VSRXxSRUZFUkVOQ0VTfFJFTEVBU0V8UkVOQU1FfFJFUEVBVEFCTEV8UkVQTElDQVRJT058UkVRVUlSRXxSRVNUT1JFfFJFU1RSSUNUfFJFVFVSTlM/fFJFVk9LRXxSSUdIVHxST0xMQkFDS3xST1VUSU5FfFJPVyg/OkNPVU5UfEdVSURDT0x8Uyk/fFJUUkVFfFJVTEV8U0FWRSg/OlBPSU5UKT98U0NIRU1BfFNFTEVDVHxTRVJJQUwoPzpJWkFCTEUpP3xTRVNTSU9OKD86X1VTRVIpP3xTRVQoPzpVU0VSKT98U0hBUkUgTU9ERXxTSE9XfFNIVVRET1dOfFNJTVBMRXxTTUFMTElOVHxTTkFQU0hPVHxTT01FfFNPTkFNRXxTVEFSVCg/OklORyBCWSk/fFNUQVRJU1RJQ1N8U1RBVFVTfFNUUklQRUR8U1lTVEVNX1VTRVJ8VEFCTEVTP3xUQUJMRVNQQUNFfFRFTVAoPzpPUkFSWXxUQUJMRSk/fFRFUk1JTkFURUQgQll8VEVYVCg/OlNJWkUpP3xUSEVOfFRJTUVTVEFNUHxUSU5ZKD86QkxPQnxJTlR8VEVYVCl8VE9QP3xUUkFOKD86U0FDVElPTlM/KT98VFJJR0dFUnxUUlVOQ0FURXxUU0VRVUFMfFRZUEVTP3xVTkJPVU5ERUR8VU5DT01NSVRURUR8VU5ERUZJTkVEfFVOSU9OfFVOSVFVRXxVTlBJVk9UfFVQREFURSg/OlRFWFQpP3xVU0FHRXxVU0V8VVNFUnxVU0lOR3xWQUxVRVM/fFZBUig/OkJJTkFSWXxDSEFSfENIQVJBQ1RFUnxZSU5HKXxWSUVXfFdBSVRGT1J8V0FSTklOR1N8V0hFTnxXSEVSRXxXSElMRXxXSVRIKD86IFJPTExVUHxJTik/fFdPUkt8V1JJVEUoPzpURVhUKT8pXFxiL2ksXCJib29sZWFuXCI6L1xcYig/OlRSVUV8RkFMU0V8TlVMTClcXGIvaSxudW1iZXI6L1xcYi0/KD86MHgpP1xcZCpcXC4/W1xcZGEtZl0rXFxiLyxvcGVyYXRvcjovWy0rKlxcLz0lXn5dfCYmP3xcXHw/XFx8fCE9P3w8KD86PT4/fDx8Pik/fD5bPj1dP3xcXGIoPzpBTkR8QkVUV0VFTnxJTnxMSUtFfE5PVHxPUnxJU3xESVZ8UkVHRVhQfFJMSUtFfFNPVU5EUyBMSUtFfFhPUilcXGIvaSxwdW5jdHVhdGlvbjovWztbXFxdKClgLC5dL307XG5QcmlzbS5sYW5ndWFnZXMuc3dpZnQ9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse3N0cmluZzp7cGF0dGVybjovKFwifCcpKFxcXFwoPzpcXCgoPzpbXigpXXxcXChbXildK1xcKSkrXFwpfFxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sZ3JlZWR5OiEwLGluc2lkZTp7aW50ZXJwb2xhdGlvbjp7cGF0dGVybjovXFxcXFxcKCg/OlteKCldfFxcKFteKV0rXFwpKStcXCkvLGluc2lkZTp7ZGVsaW1pdGVyOntwYXR0ZXJuOi9eXFxcXFxcKHxcXCkkLyxhbGlhczpcInZhcmlhYmxlXCJ9fX19fSxrZXl3b3JkOi9cXGIoYXN8YXNzb2NpYXRpdml0eXxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnRpbnVlfGNvbnZlbmllbmNlfGRlZmF1bHR8ZGVmZXJ8ZGVpbml0fGRpZFNldHxkb3xkeW5hbWljKD86VHlwZSk/fGVsc2V8ZW51bXxleHRlbnNpb258ZmFsbHRocm91Z2h8ZmluYWx8Zm9yfGZ1bmN8Z2V0fGd1YXJkfGlmfGltcG9ydHxpbnxpbmZpeHxpbml0fGlub3V0fGludGVybmFsfGlzfGxhenl8bGVmdHxsZXR8bXV0YXRpbmd8bmV3fG5vbmV8bm9ubXV0YXRpbmd8b3BlcmF0b3J8b3B0aW9uYWx8b3ZlcnJpZGV8cG9zdGZpeHxwcmVjZWRlbmNlfHByZWZpeHxwcml2YXRlfFByb3RvY29sfHB1YmxpY3xyZXBlYXR8cmVxdWlyZWR8cmV0aHJvd3N8cmV0dXJufHJpZ2h0fHNhZmV8c2VsZnxTZWxmfHNldHxzdGF0aWN8c3RydWN0fHN1YnNjcmlwdHxzdXBlcnxzd2l0Y2h8dGhyb3dzP3x0cnl8VHlwZXx0eXBlYWxpYXN8dW5vd25lZHx1bnNhZmV8dmFyfHdlYWt8d2hlcmV8d2hpbGV8d2lsbFNldHxfXyg/OkNPTFVNTl9ffEZJTEVfX3xGVU5DVElPTl9ffExJTkVfXykpXFxiLyxudW1iZXI6L1xcYihbXFxkX10rKFxcLltcXGRlX10rKT98MHhbYS1mMC05X10rKFxcLlthLWYwLTlwX10rKT98MGJbMDFfXSt8MG9bMC03X10rKVxcYi9pLGNvbnN0YW50Oi9cXGIobmlsfFtBLVpfXXsyLH18a1tBLVpdW0EtWmEtel9dKylcXGIvLGF0cnVsZTovQFxcYihJQig/Ok91dGxldHxEZXNpZ25hYmxlfEFjdGlvbnxJbnNwZWN0YWJsZSl8Y2xhc3NfcHJvdG9jb2x8ZXhwb3J0ZWR8bm9yZXR1cm58TlMoPzpDb3B5aW5nfE1hbmFnZWQpfG9iamN8VUlBcHBsaWNhdGlvbk1haW58YXV0b19jbG9zdXJlKVxcYi8sYnVpbHRpbjovXFxiKFtBLVpdXFxTK3xhYnN8YWR2YW5jZXxhbGlnbm9mKD86VmFsdWUpP3xhc3NlcnR8Y29udGFpbnN8Y291bnQoPzpFbGVtZW50cyk/fGRlYnVnUHJpbnQoPzpsbik/fGRpc3RhbmNlfGRyb3AoPzpGaXJzdHxMYXN0KXxkdW1wfGVudW1lcmF0ZXxlcXVhbHxmaWx0ZXJ8ZmluZHxmaXJzdHxnZXRWYUxpc3R8aW5kaWNlc3xpc0VtcHR5fGpvaW58bGFzdHxsZXhpY29ncmFwaGljYWxDb21wYXJlfG1hcHxtYXgoPzpFbGVtZW50KT98bWluKD86RWxlbWVudCk/fG51bWVyaWNDYXN0fG92ZXJsYXBzfHBhcnRpdGlvbnxwcmludCg/OmxuKT98cmVkdWNlfHJlZmxlY3R8cmV2ZXJzZXxzaXplb2YoPzpWYWx1ZSk/fHNvcnQoPzplZCk/fHNwbGl0fHN0YXJ0c1dpdGh8c3RyaWRlKD86b2YoPzpWYWx1ZSk/KT98c3VmZml4fHN3YXB8dG9EZWJ1Z1N0cmluZ3x0b1N0cmluZ3x0cmFuc2NvZGV8dW5kZXJlc3RpbWF0ZUNvdW50fHVuc2FmZUJpdENhc3R8d2l0aCg/OkV4dGVuZGVkTGlmZXRpbWV8VW5zYWZlKD86TXV0YWJsZVBvaW50ZXJzP3xQb2ludGVycz8pfFZhTGlzdCkpXFxiL30pLFByaXNtLmxhbmd1YWdlcy5zd2lmdC5zdHJpbmcuaW5zaWRlLmludGVycG9sYXRpb24uaW5zaWRlLnJlc3Q9UHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMuc3dpZnQpO1xuIWZ1bmN0aW9uKCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYuUHJpc20mJnNlbGYuZG9jdW1lbnQmJlByaXNtLmhvb2tzLmFkZChcImNvbXBsZXRlXCIsZnVuY3Rpb24oZSl7aWYoZS5jb2RlKXt2YXIgdD1lLmVsZW1lbnQucGFyZW50Tm9kZSxzPS9cXHMqXFxibGluZS1udW1iZXJzXFxiXFxzKi87aWYodCYmL3ByZS9pLnRlc3QodC5ub2RlTmFtZSkmJihzLnRlc3QodC5jbGFzc05hbWUpfHxzLnRlc3QoZS5lbGVtZW50LmNsYXNzTmFtZSkpJiYhZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGluZS1udW1iZXJzLXJvd3NcIikpe3MudGVzdChlLmVsZW1lbnQuY2xhc3NOYW1lKSYmKGUuZWxlbWVudC5jbGFzc05hbWU9ZS5lbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKHMsXCJcIikpLHMudGVzdCh0LmNsYXNzTmFtZSl8fCh0LmNsYXNzTmFtZSs9XCIgbGluZS1udW1iZXJzXCIpO3ZhciBuLGE9ZS5jb2RlLm1hdGNoKC9cXG4oPyEkKS9nKSxsPWE/YS5sZW5ndGgrMToxLG09bmV3IEFycmF5KGwrMSk7bT1tLmpvaW4oXCI8c3Bhbj48L3NwYW4+XCIpLG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksbi5jbGFzc05hbWU9XCJsaW5lLW51bWJlcnMtcm93c1wiLG4uaW5uZXJIVE1MPW0sdC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXN0YXJ0XCIpJiYodC5zdHlsZS5jb3VudGVyUmVzZXQ9XCJsaW5lbnVtYmVyIFwiKyhwYXJzZUludCh0LmdldEF0dHJpYnV0ZShcImRhdGEtc3RhcnRcIiksMTApLTEpKSxlLmVsZW1lbnQuYXBwZW5kQ2hpbGQobil9fX0pfSgpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvanMvbGliL3ByaXNtLmpzXG4gKiovIiwiLyoqXG4gKiBnaG9zdEh1bnRlciAtIDAuMy4xXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTQgSmFtYWwgTmV1ZmVsZCAoamFtYWxAaTExdS5tZSlcbiAqIE1JVCBMaWNlbnNlZFxuICogQGxpY2Vuc2VcbiAqL1xuKGZ1bmN0aW9uKCAkICkge1xuXG5cdC8qIFRoZSBsdW5yIDAuNy4wIGxpYnJhcnkgaXMgaW5jbHVkZWQgaGVyZSB0byBwZXJmb3JtIHRoZSBmdWxsdGV4dCBzZWFyY2hpbmcuIGx1bnIgaXMgY29weXJpZ2h0IChDKSAyMDE2IE9saXZlciBOaWdodGluZ2FsZS4gTUlUIExpY2Vuc2VkICovXG5cdHZhciBsdW5yPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBsdW5yLkluZGV4O3JldHVybiBlLnBpcGVsaW5lLmFkZChsdW5yLnN0b3BXb3JkRmlsdGVyLGx1bnIuc3RlbW1lciksdCYmdC5jYWxsKGUsZSksZX07bHVuci52ZXJzaW9uPVwiMC40LjNcIixcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiYobW9kdWxlLmV4cG9ydHM9bHVuciksbHVuci51dGlscz17fSxsdW5yLnV0aWxzLndhcm49ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3QuY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oZSl9fSh0aGlzKSxsdW5yLnV0aWxzLnplcm9GaWxsQXJyYXk9ZnVuY3Rpb24oKXt2YXIgdD1bMF07cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcig7ZT50Lmxlbmd0aDspdD10LmNvbmNhdCh0KTtyZXR1cm4gdC5zbGljZSgwLGUpfX0oKSxsdW5yLkV2ZW50RW1pdHRlcj1mdW5jdGlvbigpe3RoaXMuZXZlbnRzPXt9fSxsdW5yLkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI9ZnVuY3Rpb24oKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLGU9dC5wb3AoKSxuPXQ7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwibGFzdCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb25cIik7bi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3RoaXMuaGFzSGFuZGxlcih0KXx8KHRoaXMuZXZlbnRzW3RdPVtdKSx0aGlzLmV2ZW50c1t0XS5wdXNoKGUpfSx0aGlzKX0sbHVuci5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5oYXNIYW5kbGVyKHQpKXt2YXIgbj10aGlzLmV2ZW50c1t0XS5pbmRleE9mKGUpO3RoaXMuZXZlbnRzW3RdLnNwbGljZShuLDEpLHRoaXMuZXZlbnRzW3RdLmxlbmd0aHx8ZGVsZXRlIHRoaXMuZXZlbnRzW3RdfX0sbHVuci5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24odCl7aWYodGhpcy5oYXNIYW5kbGVyKHQpKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7dGhpcy5ldmVudHNbdF0uZm9yRWFjaChmdW5jdGlvbih0KXt0LmFwcGx5KHZvaWQgMCxlKX0pfX0sbHVuci5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmhhc0hhbmRsZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW4gdGhpcy5ldmVudHN9LGx1bnIudG9rZW5pemVyPWZ1bmN0aW9uKHQpe2lmKCFhcmd1bWVudHMubGVuZ3RofHxudWxsPT10fHx2b2lkIDA9PXQpcmV0dXJuW107aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gdC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudG9Mb3dlckNhc2UoKX0pO2Zvcih2YXIgZT0oXCJcIit0KS5yZXBsYWNlKC9eXFxzKy8sXCJcIiksbj1lLmxlbmd0aC0xO24+PTA7bi0tKWlmKC9cXFMvLnRlc3QoZS5jaGFyQXQobikpKXtlPWUuc3Vic3RyaW5nKDAsbisxKTticmVha31yZXR1cm4gZS5zcGxpdCgvXFxzKy8pLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9eXFxXKy8sXCJcIikucmVwbGFjZSgvXFxXKyQvLFwiXCIpLnRvTG93ZXJDYXNlKCl9KX0sbHVuci5QaXBlbGluZT1mdW5jdGlvbigpe3RoaXMuX3N0YWNrPVtdfSxsdW5yLlBpcGVsaW5lLnJlZ2lzdGVyZWRGdW5jdGlvbnM9e30sbHVuci5QaXBlbGluZS5yZWdpc3RlckZ1bmN0aW9uPWZ1bmN0aW9uKHQsZSl7ZSBpbiB0aGlzLnJlZ2lzdGVyZWRGdW5jdGlvbnMmJmx1bnIudXRpbHMud2FybihcIk92ZXJ3cml0aW5nIGV4aXN0aW5nIHJlZ2lzdGVyZWQgZnVuY3Rpb246IFwiK2UpLHQubGFiZWw9ZSxsdW5yLlBpcGVsaW5lLnJlZ2lzdGVyZWRGdW5jdGlvbnNbdC5sYWJlbF09dH0sbHVuci5QaXBlbGluZS53YXJuSWZGdW5jdGlvbk5vdFJlZ2lzdGVyZWQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5sYWJlbCYmdC5sYWJlbCBpbiB0aGlzLnJlZ2lzdGVyZWRGdW5jdGlvbnM7ZXx8bHVuci51dGlscy53YXJuKFwiRnVuY3Rpb24gaXMgbm90IHJlZ2lzdGVyZWQgd2l0aCBwaXBlbGluZS4gVGhpcyBtYXkgY2F1c2UgcHJvYmxlbXMgd2hlbiBzZXJpYWxpc2luZyB0aGUgaW5kZXguXFxuXCIsdCl9LGx1bnIuUGlwZWxpbmUubG9hZD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgbHVuci5QaXBlbGluZTtyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBuPWx1bnIuUGlwZWxpbmUucmVnaXN0ZXJlZEZ1bmN0aW9uc1t0XTtpZighbil0aHJvdyBFcnJvcihcIkNhbm5vdCBsb2FkIHVuLXJlZ2lzdGVyZWQgZnVuY3Rpb246IFwiK3QpO2UuYWRkKG4pfSksZX0sbHVuci5QaXBlbGluZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKCl7dmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTt0LmZvckVhY2goZnVuY3Rpb24odCl7bHVuci5QaXBlbGluZS53YXJuSWZGdW5jdGlvbk5vdFJlZ2lzdGVyZWQodCksdGhpcy5fc3RhY2sucHVzaCh0KX0sdGhpcyl9LGx1bnIuUGlwZWxpbmUucHJvdG90eXBlLmFmdGVyPWZ1bmN0aW9uKHQsZSl7bHVuci5QaXBlbGluZS53YXJuSWZGdW5jdGlvbk5vdFJlZ2lzdGVyZWQoZSk7dmFyIG49dGhpcy5fc3RhY2suaW5kZXhPZih0KSsxO3RoaXMuX3N0YWNrLnNwbGljZShuLDAsZSl9LGx1bnIuUGlwZWxpbmUucHJvdG90eXBlLmJlZm9yZT1mdW5jdGlvbih0LGUpe2x1bnIuUGlwZWxpbmUud2FybklmRnVuY3Rpb25Ob3RSZWdpc3RlcmVkKGUpO3ZhciBuPXRoaXMuX3N0YWNrLmluZGV4T2YodCk7dGhpcy5fc3RhY2suc3BsaWNlKG4sMCxlKX0sbHVuci5QaXBlbGluZS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX3N0YWNrLmluZGV4T2YodCk7dGhpcy5fc3RhY2suc3BsaWNlKGUsMSl9LGx1bnIuUGlwZWxpbmUucHJvdG90eXBlLnJ1bj1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj10Lmxlbmd0aCxyPXRoaXMuX3N0YWNrLmxlbmd0aCxvPTA7bj5vO28rKyl7Zm9yKHZhciBpPXRbb10scz0wO3I+cyYmKGk9dGhpcy5fc3RhY2tbc10oaSxvLHQpLHZvaWQgMCE9PWkpO3MrKyk7dm9pZCAwIT09aSYmZS5wdXNoKGkpfXJldHVybiBlfSxsdW5yLlBpcGVsaW5lLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhY2subWFwKGZ1bmN0aW9uKHQpe3JldHVybiBsdW5yLlBpcGVsaW5lLndhcm5JZkZ1bmN0aW9uTm90UmVnaXN0ZXJlZCh0KSx0LmxhYmVsfSl9LGx1bnIuVmVjdG9yPWZ1bmN0aW9uKHQpe3RoaXMuZWxlbWVudHM9dH0sbHVuci5WZWN0b3IucHJvdG90eXBlLm1hZ25pdHVkZT1mdW5jdGlvbigpe2lmKHRoaXMuX21hZ25pdHVkZSlyZXR1cm4gdGhpcy5fbWFnbml0dWRlO2Zvcih2YXIgdCxlPTAsbj10aGlzLmVsZW1lbnRzLHI9bi5sZW5ndGgsbz0wO3I+bztvKyspdD1uW29dLGUrPXQqdDtyZXR1cm4gdGhpcy5fbWFnbml0dWRlPU1hdGguc3FydChlKX0sbHVuci5WZWN0b3IucHJvdG90eXBlLmRvdD1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5lbGVtZW50cyxuPXQuZWxlbWVudHMscj1lLmxlbmd0aCxvPTAsaT0wO3I+aTtpKyspbys9ZVtpXSpuW2ldO3JldHVybiBvfSxsdW5yLlZlY3Rvci5wcm90b3R5cGUuc2ltaWxhcml0eT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kb3QodCkvKHRoaXMubWFnbml0dWRlKCkqdC5tYWduaXR1ZGUoKSl9LGx1bnIuVmVjdG9yLnByb3RvdHlwZS50b0FycmF5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudHN9LGx1bnIuU29ydGVkU2V0PWZ1bmN0aW9uKCl7dGhpcy5sZW5ndGg9MCx0aGlzLmVsZW1lbnRzPVtdfSxsdW5yLlNvcnRlZFNldC5sb2FkPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyB0aGlzO3JldHVybiBlLmVsZW1lbnRzPXQsZS5sZW5ndGg9dC5sZW5ndGgsZX0sbHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLmFkZD1mdW5jdGlvbigpe0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuZm9yRWFjaChmdW5jdGlvbih0KXt+dGhpcy5pbmRleE9mKHQpfHx0aGlzLmVsZW1lbnRzLnNwbGljZSh0aGlzLmxvY2F0aW9uRm9yKHQpLDAsdCl9LHRoaXMpLHRoaXMubGVuZ3RoPXRoaXMuZWxlbWVudHMubGVuZ3RofSxsdW5yLlNvcnRlZFNldC5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnRzLnNsaWNlKCl9LGx1bnIuU29ydGVkU2V0LnByb3RvdHlwZS5tYXA9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5lbGVtZW50cy5tYXAodCxlKX0sbHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLmZvckVhY2g9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5lbGVtZW50cy5mb3JFYWNoKHQsZSl9LGx1bnIuU29ydGVkU2V0LnByb3RvdHlwZS5pbmRleE9mPWZ1bmN0aW9uKHQsZSxuKXt2YXIgZT1lfHwwLG49bnx8dGhpcy5lbGVtZW50cy5sZW5ndGgscj1uLWUsbz1lK01hdGguZmxvb3Ioci8yKSxpPXRoaXMuZWxlbWVudHNbb107cmV0dXJuIDE+PXI/aT09PXQ/bzotMTp0Pmk/dGhpcy5pbmRleE9mKHQsbyxuKTppPnQ/dGhpcy5pbmRleE9mKHQsZSxvKTppPT09dD9vOnZvaWQgMH0sbHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLmxvY2F0aW9uRm9yPWZ1bmN0aW9uKHQsZSxuKXt2YXIgZT1lfHwwLG49bnx8dGhpcy5lbGVtZW50cy5sZW5ndGgscj1uLWUsbz1lK01hdGguZmxvb3Ioci8yKSxpPXRoaXMuZWxlbWVudHNbb107aWYoMT49cil7aWYoaT50KXJldHVybiBvO2lmKHQ+aSlyZXR1cm4gbysxfXJldHVybiB0Pmk/dGhpcy5sb2NhdGlvbkZvcih0LG8sbik6aT50P3RoaXMubG9jYXRpb25Gb3IodCxlLG8pOnZvaWQgMH0sbHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLmludGVyc2VjdD1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IGx1bnIuU29ydGVkU2V0LG49MCxyPTAsbz10aGlzLmxlbmd0aCxpPXQubGVuZ3RoLHM9dGhpcy5lbGVtZW50cyxsPXQuZWxlbWVudHM7Oyl7aWYobj5vLTF8fHI+aS0xKWJyZWFrO3Nbbl0hPT1sW3JdP3Nbbl08bFtyXT9uKys6c1tuXT5sW3JdJiZyKys6KGUuYWRkKHNbbl0pLG4rKyxyKyspfXJldHVybiBlfSxsdW5yLlNvcnRlZFNldC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgdD1uZXcgbHVuci5Tb3J0ZWRTZXQ7cmV0dXJuIHQuZWxlbWVudHM9dGhpcy50b0FycmF5KCksdC5sZW5ndGg9dC5lbGVtZW50cy5sZW5ndGgsdH0sbHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLnVuaW9uPWZ1bmN0aW9uKHQpe3ZhciBlLG4scjtyZXR1cm4gdGhpcy5sZW5ndGg+PXQubGVuZ3RoPyhlPXRoaXMsbj10KTooZT10LG49dGhpcykscj1lLmNsb25lKCksci5hZGQuYXBwbHkocixuLnRvQXJyYXkoKSkscn0sbHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRvQXJyYXkoKX0sbHVuci5JbmRleD1mdW5jdGlvbigpe3RoaXMuX2ZpZWxkcz1bXSx0aGlzLl9yZWY9XCJpZFwiLHRoaXMucGlwZWxpbmU9bmV3IGx1bnIuUGlwZWxpbmUsdGhpcy5kb2N1bWVudFN0b3JlPW5ldyBsdW5yLlN0b3JlLHRoaXMudG9rZW5TdG9yZT1uZXcgbHVuci5Ub2tlblN0b3JlLHRoaXMuY29ycHVzVG9rZW5zPW5ldyBsdW5yLlNvcnRlZFNldCx0aGlzLmV2ZW50RW1pdHRlcj1uZXcgbHVuci5FdmVudEVtaXR0ZXIsdGhpcy5faWRmQ2FjaGU9e30sdGhpcy5vbihcImFkZFwiLFwicmVtb3ZlXCIsXCJ1cGRhdGVcIixmdW5jdGlvbigpe3RoaXMuX2lkZkNhY2hlPXt9fS5iaW5kKHRoaXMpKX0sbHVuci5JbmRleC5wcm90b3R5cGUub249ZnVuY3Rpb24oKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3JldHVybiB0aGlzLmV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lci5hcHBseSh0aGlzLmV2ZW50RW1pdHRlcix0KX0sbHVuci5JbmRleC5wcm90b3R5cGUub2ZmPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZXZlbnRFbWl0dGVyLnJlbW92ZUxpc3RlbmVyKHQsZSl9LGx1bnIuSW5kZXgubG9hZD1mdW5jdGlvbih0KXt0LnZlcnNpb24hPT1sdW5yLnZlcnNpb24mJmx1bnIudXRpbHMud2FybihcInZlcnNpb24gbWlzbWF0Y2g6IGN1cnJlbnQgXCIrbHVuci52ZXJzaW9uK1wiIGltcG9ydGluZyBcIit0LnZlcnNpb24pO3ZhciBlPW5ldyB0aGlzO3JldHVybiBlLl9maWVsZHM9dC5maWVsZHMsZS5fcmVmPXQucmVmLGUuZG9jdW1lbnRTdG9yZT1sdW5yLlN0b3JlLmxvYWQodC5kb2N1bWVudFN0b3JlKSxlLnRva2VuU3RvcmU9bHVuci5Ub2tlblN0b3JlLmxvYWQodC50b2tlblN0b3JlKSxlLmNvcnB1c1Rva2Vucz1sdW5yLlNvcnRlZFNldC5sb2FkKHQuY29ycHVzVG9rZW5zKSxlLnBpcGVsaW5lPWx1bnIuUGlwZWxpbmUubG9hZCh0LnBpcGVsaW5lKSxlfSxsdW5yLkluZGV4LnByb3RvdHlwZS5maWVsZD1mdW5jdGlvbih0LGUpe3ZhciBlPWV8fHt9LG49e25hbWU6dCxib29zdDplLmJvb3N0fHwxfTtyZXR1cm4gdGhpcy5fZmllbGRzLnB1c2gobiksdGhpc30sbHVuci5JbmRleC5wcm90b3R5cGUucmVmPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9yZWY9dCx0aGlzfSxsdW5yLkluZGV4LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCxlKXt2YXIgbj17fSxyPW5ldyBsdW5yLlNvcnRlZFNldCxvPXRbdGhpcy5fcmVmXSxlPXZvaWQgMD09PWU/ITA6ZTt0aGlzLl9maWVsZHMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbz10aGlzLnBpcGVsaW5lLnJ1bihsdW5yLnRva2VuaXplcih0W2UubmFtZV0pKTtuW2UubmFtZV09byxsdW5yLlNvcnRlZFNldC5wcm90b3R5cGUuYWRkLmFwcGx5KHIsbyl9LHRoaXMpLHRoaXMuZG9jdW1lbnRTdG9yZS5zZXQobyxyKSxsdW5yLlNvcnRlZFNldC5wcm90b3R5cGUuYWRkLmFwcGx5KHRoaXMuY29ycHVzVG9rZW5zLHIudG9BcnJheSgpKTtmb3IodmFyIGk9MDtyLmxlbmd0aD5pO2krKyl7dmFyIHM9ci5lbGVtZW50c1tpXSxsPXRoaXMuX2ZpZWxkcy5yZWR1Y2UoZnVuY3Rpb24odCxlKXt2YXIgcj1uW2UubmFtZV0ubGVuZ3RoO2lmKCFyKXJldHVybiB0O3ZhciBvPW5bZS5uYW1lXS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1zfSkubGVuZ3RoO3JldHVybiB0K28vciplLmJvb3N0fSwwKTt0aGlzLnRva2VuU3RvcmUuYWRkKHMse3JlZjpvLHRmOmx9KX1lJiZ0aGlzLmV2ZW50RW1pdHRlci5lbWl0KFwiYWRkXCIsdCx0aGlzKX0sbHVuci5JbmRleC5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dFt0aGlzLl9yZWZdLGU9dm9pZCAwPT09ZT8hMDplO2lmKHRoaXMuZG9jdW1lbnRTdG9yZS5oYXMobikpe3ZhciByPXRoaXMuZG9jdW1lbnRTdG9yZS5nZXQobik7dGhpcy5kb2N1bWVudFN0b3JlLnJlbW92ZShuKSxyLmZvckVhY2goZnVuY3Rpb24odCl7dGhpcy50b2tlblN0b3JlLnJlbW92ZSh0LG4pfSx0aGlzKSxlJiZ0aGlzLmV2ZW50RW1pdHRlci5lbWl0KFwicmVtb3ZlXCIsdCx0aGlzKX19LGx1bnIuSW5kZXgucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbih0LGUpe3ZhciBlPXZvaWQgMD09PWU/ITA6ZTt0aGlzLnJlbW92ZSh0LCExKSx0aGlzLmFkZCh0LCExKSxlJiZ0aGlzLmV2ZW50RW1pdHRlci5lbWl0KFwidXBkYXRlXCIsdCx0aGlzKX0sbHVuci5JbmRleC5wcm90b3R5cGUuaWRmPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2lkZkNhY2hlW3RdKXJldHVybiB0aGlzLl9pZGZDYWNoZVt0XTt2YXIgZT10aGlzLnRva2VuU3RvcmUuY291bnQodCksbj0xO3JldHVybiBlPjAmJihuPTErTWF0aC5sb2codGhpcy50b2tlblN0b3JlLmxlbmd0aC9lKSksdGhpcy5faWRmQ2FjaGVbdF09bn0sbHVuci5JbmRleC5wcm90b3R5cGUuc2VhcmNoPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucGlwZWxpbmUucnVuKGx1bnIudG9rZW5pemVyKHQpKSxuPWx1bnIudXRpbHMuemVyb0ZpbGxBcnJheSh0aGlzLmNvcnB1c1Rva2Vucy5sZW5ndGgpLHI9W10sbz10aGlzLl9maWVsZHMucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZS5ib29zdH0sMCksaT1lLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudG9rZW5TdG9yZS5oYXModCl9LHRoaXMpO2lmKCFpKXJldHVybltdO2UuZm9yRWFjaChmdW5jdGlvbih0LGUsaSl7dmFyIHM9MS9pLmxlbmd0aCp0aGlzLl9maWVsZHMubGVuZ3RoKm8sbD10aGlzLHU9dGhpcy50b2tlblN0b3JlLmV4cGFuZCh0KS5yZWR1Y2UoZnVuY3Rpb24oZSxyKXt2YXIgbz1sLmNvcnB1c1Rva2Vucy5pbmRleE9mKHIpLGk9bC5pZGYociksdT0xLGE9bmV3IGx1bnIuU29ydGVkU2V0O2lmKHIhPT10KXt2YXIgaD1NYXRoLm1heCgzLHIubGVuZ3RoLXQubGVuZ3RoKTt1PTEvTWF0aC5sb2coaCl9cmV0dXJuIG8+LTEmJihuW29dPXMqaSp1KSxPYmplY3Qua2V5cyhsLnRva2VuU3RvcmUuZ2V0KHIpKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2EuYWRkKHQpfSksZS51bmlvbihhKX0sbmV3IGx1bnIuU29ydGVkU2V0KTtyLnB1c2godSl9LHRoaXMpO3ZhciBzPXIucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuaW50ZXJzZWN0KGUpfSksbD1uZXcgbHVuci5WZWN0b3Iobik7cmV0dXJuIHMubWFwKGZ1bmN0aW9uKHQpe3JldHVybntyZWY6dCxzY29yZTpsLnNpbWlsYXJpdHkodGhpcy5kb2N1bWVudFZlY3Rvcih0KSl9fSx0aGlzKS5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuc2NvcmUtdC5zY29yZX0pfSxsdW5yLkluZGV4LnByb3RvdHlwZS5kb2N1bWVudFZlY3Rvcj1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5kb2N1bWVudFN0b3JlLmdldCh0KSxuPWUubGVuZ3RoLHI9bHVuci51dGlscy56ZXJvRmlsbEFycmF5KHRoaXMuY29ycHVzVG9rZW5zLmxlbmd0aCksbz0wO24+bztvKyspe3ZhciBpPWUuZWxlbWVudHNbb10scz10aGlzLnRva2VuU3RvcmUuZ2V0KGkpW3RdLnRmLGw9dGhpcy5pZGYoaSk7clt0aGlzLmNvcnB1c1Rva2Vucy5pbmRleE9mKGkpXT1zKmx9cmV0dXJuIG5ldyBsdW5yLlZlY3RvcihyKX0sbHVuci5JbmRleC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue3ZlcnNpb246bHVuci52ZXJzaW9uLGZpZWxkczp0aGlzLl9maWVsZHMscmVmOnRoaXMuX3JlZixkb2N1bWVudFN0b3JlOnRoaXMuZG9jdW1lbnRTdG9yZS50b0pTT04oKSx0b2tlblN0b3JlOnRoaXMudG9rZW5TdG9yZS50b0pTT04oKSxjb3JwdXNUb2tlbnM6dGhpcy5jb3JwdXNUb2tlbnMudG9KU09OKCkscGlwZWxpbmU6dGhpcy5waXBlbGluZS50b0pTT04oKX19LGx1bnIuU3RvcmU9ZnVuY3Rpb24oKXt0aGlzLnN0b3JlPXt9LHRoaXMubGVuZ3RoPTB9LGx1bnIuU3RvcmUubG9hZD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgdGhpcztyZXR1cm4gZS5sZW5ndGg9dC5sZW5ndGgsZS5zdG9yZT1PYmplY3Qua2V5cyh0LnN0b3JlKS5yZWR1Y2UoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVtuXT1sdW5yLlNvcnRlZFNldC5sb2FkKHQuc3RvcmVbbl0pLGV9LHt9KSxlfSxsdW5yLlN0b3JlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxlKXt0aGlzLnN0b3JlW3RdPWUsdGhpcy5sZW5ndGg9T2JqZWN0LmtleXModGhpcy5zdG9yZSkubGVuZ3RofSxsdW5yLlN0b3JlLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3RvcmVbdF19LGx1bnIuU3RvcmUucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gdCBpbiB0aGlzLnN0b3JlfSxsdW5yLlN0b3JlLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odCl7dGhpcy5oYXModCkmJihkZWxldGUgdGhpcy5zdG9yZVt0XSx0aGlzLmxlbmd0aC0tKX0sbHVuci5TdG9yZS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue3N0b3JlOnRoaXMuc3RvcmUsbGVuZ3RoOnRoaXMubGVuZ3RofX0sbHVuci5zdGVtbWVyPWZ1bmN0aW9uKCl7dmFyIHQ9e2F0aW9uYWw6XCJhdGVcIix0aW9uYWw6XCJ0aW9uXCIsZW5jaTpcImVuY2VcIixhbmNpOlwiYW5jZVwiLGl6ZXI6XCJpemVcIixibGk6XCJibGVcIixhbGxpOlwiYWxcIixlbnRsaTpcImVudFwiLGVsaTpcImVcIixvdXNsaTpcIm91c1wiLGl6YXRpb246XCJpemVcIixhdGlvbjpcImF0ZVwiLGF0b3I6XCJhdGVcIixhbGlzbTpcImFsXCIsaXZlbmVzczpcIml2ZVwiLGZ1bG5lc3M6XCJmdWxcIixvdXNuZXNzOlwib3VzXCIsYWxpdGk6XCJhbFwiLGl2aXRpOlwiaXZlXCIsYmlsaXRpOlwiYmxlXCIsbG9naTpcImxvZ1wifSxlPXtpY2F0ZTpcImljXCIsYXRpdmU6XCJcIixhbGl6ZTpcImFsXCIsaWNpdGk6XCJpY1wiLGljYWw6XCJpY1wiLGZ1bDpcIlwiLG5lc3M6XCJcIn0sbj1cIlteYWVpb3VdXCIscj1cIlthZWlvdXldXCIsbz1uK1wiW15hZWlvdXldKlwiLGk9citcIlthZWlvdV0qXCIscz1cIl4oXCIrbytcIik/XCIraStvLGw9XCJeKFwiK28rXCIpP1wiK2krbytcIihcIitpK1wiKT8kXCIsdT1cIl4oXCIrbytcIik/XCIraStvK2krbyxhPVwiXihcIitvK1wiKT9cIityO3JldHVybiBmdW5jdGlvbihuKXt2YXIgaSxoLGMscCxmLGQsdjtpZigzPm4ubGVuZ3RoKXJldHVybiBuO2lmKGM9bi5zdWJzdHIoMCwxKSxcInlcIj09YyYmKG49Yy50b1VwcGVyQ2FzZSgpK24uc3Vic3RyKDEpKSxwPS9eKC4rPykoc3N8aSllcyQvLGY9L14oLis/KShbXnNdKXMkLyxwLnRlc3Qobik/bj1uLnJlcGxhY2UocCxcIiQxJDJcIik6Zi50ZXN0KG4pJiYobj1uLnJlcGxhY2UoZixcIiQxJDJcIikpLHA9L14oLis/KWVlZCQvLGY9L14oLis/KShlZHxpbmcpJC8scC50ZXN0KG4pKXt2YXIgbT1wLmV4ZWMobik7cD1SZWdFeHAocykscC50ZXN0KG1bMV0pJiYocD0vLiQvLG49bi5yZXBsYWNlKHAsXCJcIikpfWVsc2UgaWYoZi50ZXN0KG4pKXt2YXIgbT1mLmV4ZWMobik7aT1tWzFdLGY9UmVnRXhwKGEpLGYudGVzdChpKSYmKG49aSxmPS8oYXR8Ymx8aXopJC8sZD1SZWdFeHAoXCIoW15hZWlvdXlsc3pdKVxcXFwxJFwiKSx2PVJlZ0V4cChcIl5cIitvK3IrXCJbXmFlaW91d3h5XSRcIiksZi50ZXN0KG4pP24rPVwiZVwiOmQudGVzdChuKT8ocD0vLiQvLG49bi5yZXBsYWNlKHAsXCJcIikpOnYudGVzdChuKSYmKG4rPVwiZVwiKSl9aWYocD0vXiguKz8peSQvLHAudGVzdChuKSl7dmFyIG09cC5leGVjKG4pO2k9bVsxXSxwPVJlZ0V4cChhKSxwLnRlc3QoaSkmJihuPWkrXCJpXCIpfWlmKHA9L14oLis/KShhdGlvbmFsfHRpb25hbHxlbmNpfGFuY2l8aXplcnxibGl8YWxsaXxlbnRsaXxlbGl8b3VzbGl8aXphdGlvbnxhdGlvbnxhdG9yfGFsaXNtfGl2ZW5lc3N8ZnVsbmVzc3xvdXNuZXNzfGFsaXRpfGl2aXRpfGJpbGl0aXxsb2dpKSQvLHAudGVzdChuKSl7dmFyIG09cC5leGVjKG4pO2k9bVsxXSxoPW1bMl0scD1SZWdFeHAocykscC50ZXN0KGkpJiYobj1pK3RbaF0pfWlmKHA9L14oLis/KShpY2F0ZXxhdGl2ZXxhbGl6ZXxpY2l0aXxpY2FsfGZ1bHxuZXNzKSQvLHAudGVzdChuKSl7dmFyIG09cC5leGVjKG4pO2k9bVsxXSxoPW1bMl0scD1SZWdFeHAocykscC50ZXN0KGkpJiYobj1pK2VbaF0pfWlmKHA9L14oLis/KShhbHxhbmNlfGVuY2V8ZXJ8aWN8YWJsZXxpYmxlfGFudHxlbWVudHxtZW50fGVudHxvdXxpc218YXRlfGl0aXxvdXN8aXZlfGl6ZSkkLyxmPS9eKC4rPykoc3x0KShpb24pJC8scC50ZXN0KG4pKXt2YXIgbT1wLmV4ZWMobik7aT1tWzFdLHA9UmVnRXhwKHUpLHAudGVzdChpKSYmKG49aSl9ZWxzZSBpZihmLnRlc3Qobikpe3ZhciBtPWYuZXhlYyhuKTtpPW1bMV0rbVsyXSxmPVJlZ0V4cCh1KSxmLnRlc3QoaSkmJihuPWkpfWlmKHA9L14oLis/KWUkLyxwLnRlc3Qobikpe3ZhciBtPXAuZXhlYyhuKTtpPW1bMV0scD1SZWdFeHAodSksZj1SZWdFeHAobCksZD1SZWdFeHAoXCJeXCIrbytyK1wiW15hZWlvdXd4eV0kXCIpLChwLnRlc3QoaSl8fGYudGVzdChpKSYmIWQudGVzdChpKSkmJihuPWkpfXJldHVybiBwPS9sbCQvLGY9UmVnRXhwKHUpLHAudGVzdChuKSYmZi50ZXN0KG4pJiYocD0vLiQvLG49bi5yZXBsYWNlKHAsXCJcIikpLFwieVwiPT1jJiYobj1jLnRvTG93ZXJDYXNlKCkrbi5zdWJzdHIoMSkpLG59fSgpLGx1bnIuUGlwZWxpbmUucmVnaXN0ZXJGdW5jdGlvbihsdW5yLnN0ZW1tZXIsXCJzdGVtbWVyXCIpLGx1bnIuc3RvcFdvcmRGaWx0ZXI9ZnVuY3Rpb24odCl7cmV0dXJuLTE9PT1sdW5yLnN0b3BXb3JkRmlsdGVyLnN0b3BXb3Jkcy5pbmRleE9mKHQpP3Q6dm9pZCAwfSxsdW5yLnN0b3BXb3JkRmlsdGVyLnN0b3BXb3Jkcz1uZXcgbHVuci5Tb3J0ZWRTZXQsbHVuci5zdG9wV29yZEZpbHRlci5zdG9wV29yZHMubGVuZ3RoPTExOSxsdW5yLnN0b3BXb3JkRmlsdGVyLnN0b3BXb3Jkcy5lbGVtZW50cz1bXCJcIixcImFcIixcImFibGVcIixcImFib3V0XCIsXCJhY3Jvc3NcIixcImFmdGVyXCIsXCJhbGxcIixcImFsbW9zdFwiLFwiYWxzb1wiLFwiYW1cIixcImFtb25nXCIsXCJhblwiLFwiYW5kXCIsXCJhbnlcIixcImFyZVwiLFwiYXNcIixcImF0XCIsXCJiZVwiLFwiYmVjYXVzZVwiLFwiYmVlblwiLFwiYnV0XCIsXCJieVwiLFwiY2FuXCIsXCJjYW5ub3RcIixcImNvdWxkXCIsXCJkZWFyXCIsXCJkaWRcIixcImRvXCIsXCJkb2VzXCIsXCJlaXRoZXJcIixcImVsc2VcIixcImV2ZXJcIixcImV2ZXJ5XCIsXCJmb3JcIixcImZyb21cIixcImdldFwiLFwiZ290XCIsXCJoYWRcIixcImhhc1wiLFwiaGF2ZVwiLFwiaGVcIixcImhlclwiLFwiaGVyc1wiLFwiaGltXCIsXCJoaXNcIixcImhvd1wiLFwiaG93ZXZlclwiLFwiaVwiLFwiaWZcIixcImluXCIsXCJpbnRvXCIsXCJpc1wiLFwiaXRcIixcIml0c1wiLFwianVzdFwiLFwibGVhc3RcIixcImxldFwiLFwibGlrZVwiLFwibGlrZWx5XCIsXCJtYXlcIixcIm1lXCIsXCJtaWdodFwiLFwibW9zdFwiLFwibXVzdFwiLFwibXlcIixcIm5laXRoZXJcIixcIm5vXCIsXCJub3JcIixcIm5vdFwiLFwib2ZcIixcIm9mZlwiLFwib2Z0ZW5cIixcIm9uXCIsXCJvbmx5XCIsXCJvclwiLFwib3RoZXJcIixcIm91clwiLFwib3duXCIsXCJyYXRoZXJcIixcInNhaWRcIixcInNheVwiLFwic2F5c1wiLFwic2hlXCIsXCJzaG91bGRcIixcInNpbmNlXCIsXCJzb1wiLFwic29tZVwiLFwidGhhblwiLFwidGhhdFwiLFwidGhlXCIsXCJ0aGVpclwiLFwidGhlbVwiLFwidGhlblwiLFwidGhlcmVcIixcInRoZXNlXCIsXCJ0aGV5XCIsXCJ0aGlzXCIsXCJ0aXNcIixcInRvXCIsXCJ0b29cIixcInR3YXNcIixcInVzXCIsXCJ3YW50c1wiLFwid2FzXCIsXCJ3ZVwiLFwid2VyZVwiLFwid2hhdFwiLFwid2hlblwiLFwid2hlcmVcIixcIndoaWNoXCIsXCJ3aGlsZVwiLFwid2hvXCIsXCJ3aG9tXCIsXCJ3aHlcIixcIndpbGxcIixcIndpdGhcIixcIndvdWxkXCIsXCJ5ZXRcIixcInlvdVwiLFwieW91clwiXSxsdW5yLlBpcGVsaW5lLnJlZ2lzdGVyRnVuY3Rpb24obHVuci5zdG9wV29yZEZpbHRlcixcInN0b3BXb3JkRmlsdGVyXCIpLGx1bnIuVG9rZW5TdG9yZT1mdW5jdGlvbigpe3RoaXMucm9vdD17ZG9jczp7fX0sdGhpcy5sZW5ndGg9MH0sbHVuci5Ub2tlblN0b3JlLmxvYWQ9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHRoaXM7cmV0dXJuIGUucm9vdD10LnJvb3QsZS5sZW5ndGg9dC5sZW5ndGgsZX0sbHVuci5Ub2tlblN0b3JlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCxlLG4pe3ZhciBuPW58fHRoaXMucm9vdCxyPXRbMF0sbz10LnNsaWNlKDEpO3JldHVybiByIGluIG58fChuW3JdPXtkb2NzOnt9fSksMD09PW8ubGVuZ3RoPyhuW3JdLmRvY3NbZS5yZWZdPWUsdGhpcy5sZW5ndGgrPTEsdm9pZCAwKTp0aGlzLmFkZChvLGUsbltyXSl9LGx1bnIuVG9rZW5TdG9yZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKHQpe2lmKCF0KXJldHVybiExO2Zvcih2YXIgZT10aGlzLnJvb3Qsbj0wO3QubGVuZ3RoPm47bisrKXtpZighZVt0W25dXSlyZXR1cm4hMTtlPWVbdFtuXV19cmV0dXJuITB9LGx1bnIuVG9rZW5TdG9yZS5wcm90b3R5cGUuZ2V0Tm9kZT1mdW5jdGlvbih0KXtpZighdClyZXR1cm57fTtmb3IodmFyIGU9dGhpcy5yb290LG49MDt0Lmxlbmd0aD5uO24rKyl7aWYoIWVbdFtuXV0pcmV0dXJue307ZT1lW3Rbbl1dfXJldHVybiBlfSxsdW5yLlRva2VuU3RvcmUucHJvdG90eXBlLmdldD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmdldE5vZGUodCxlKS5kb2NzfHx7fX0sbHVuci5Ub2tlblN0b3JlLnByb3RvdHlwZS5jb3VudD1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmdldCh0LGUpKS5sZW5ndGh9LGx1bnIuVG9rZW5TdG9yZS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKHQsZSl7aWYodCl7Zm9yKHZhciBuPXRoaXMucm9vdCxyPTA7dC5sZW5ndGg+cjtyKyspe2lmKCEodFtyXWluIG4pKXJldHVybjtuPW5bdFtyXV19ZGVsZXRlIG4uZG9jc1tlXX19LGx1bnIuVG9rZW5TdG9yZS5wcm90b3R5cGUuZXhwYW5kPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5nZXROb2RlKHQpLHI9bi5kb2NzfHx7fSxlPWV8fFtdO3JldHVybiBPYmplY3Qua2V5cyhyKS5sZW5ndGgmJmUucHVzaCh0KSxPYmplY3Qua2V5cyhuKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe1wiZG9jc1wiIT09biYmZS5jb25jYXQodGhpcy5leHBhbmQodCtuLGUpKX0sdGhpcyksZX0sbHVuci5Ub2tlblN0b3JlLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57cm9vdDp0aGlzLnJvb3QsbGVuZ3RoOnRoaXMubGVuZ3RofX07XG5cblxuICAgIC8vVGhpcyBpcyB0aGUgbWFpbiBwbHVnaW4gZGVmaW5pdGlvblxuXHQkLmZuLmdob3N0SHVudGVyIFx0PSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQgXHQvL0hlcmUgd2UgdXNlIGpRdWVyeSdzIGV4dGVuZCB0byBzZXQgZGVmYXVsdCB2YWx1ZXMgaWYgdGhleSB3ZXJlbid0IHNldCBieSB0aGUgdXNlclxuXHQgICAgdmFyIG9wdHMgXHRcdD0gJC5leHRlbmQoIHt9LCAkLmZuLmdob3N0SHVudGVyLmRlZmF1bHRzLCBvcHRpb25zICk7XG5cdCAgICBpZiggb3B0cy5yZXN1bHRzIClcbiAgICBcdHtcbiAgICBcdFx0cGx1Z2luTWV0aG9kcy5pbml0KCB0aGlzICwgb3B0cyApO1xuICAgIFx0XHRyZXR1cm4gcGx1Z2luTWV0aG9kcztcbiAgICBcdH1cblxuXHR9O1xuXG5cdCQuZm4uZ2hvc3RIdW50ZXIuZGVmYXVsdHMgPSB7XG5cdFx0cmVzdWx0cyBcdFx0XHQ6IGZhbHNlLFxuXHRcdG9uS2V5VXAgXHRcdFx0OiBmYWxzZSxcblx0XHRyZXN1bHRfdGVtcGxhdGUgXHQ6IFwiPGEgaHJlZj0ne3tsaW5rfX0nPjxwPjxoMj57e3RpdGxlfX08L2gyPjxoND57e3ByZXR0eVB1YkRhdGV9fTwvaDQ+PC9wPjwvYT5cIixcblx0XHRpbmZvX3RlbXBsYXRlXHRcdDogXCI8cD5OdW1iZXIgb2YgcG9zdHMgZm91bmQ6IHt7YW1vdW50fX08L3A+XCIsXG5cdFx0ZGlzcGxheVNlYXJjaEluZm8gXHQ6IHRydWUsXG5cdFx0emVyb1Jlc3VsdHNJbmZvXHRcdDogdHJ1ZSxcblx0XHRiZWZvcmUgXHRcdFx0XHQ6IGZhbHNlLFxuXHRcdG9uQ29tcGxldGUgXHRcdFx0OiBmYWxzZVxuXHR9O1xuXG5cdHZhciBwcmV0dHlEYXRlID0gZnVuY3Rpb24oZGF0ZSkge1xuXHRcdHZhciBkID0gbmV3IERhdGUoZGF0ZSk7XG5cdFx0dmFyIG1vbnRoTmFtZXMgPSBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXTtcblx0XHRcdHJldHVybiBkLmdldERhdGUoKSArICcgJyArIG1vbnRoTmFtZXNbZC5nZXRNb250aCgpXSArICcgJyArIGQuZ2V0RnVsbFllYXIoKTtcblx0fTtcblxuXHR2YXIgcGx1Z2luTWV0aG9kcyBcdD0ge1xuXG5cdFx0aXNJbml0IFx0XHRcdDogZmFsc2UsXG5cblx0XHRpbml0IFx0XHRcdDogZnVuY3Rpb24oIHRhcmdldCAsIG9wdHMgKXtcblxuXHRcdFx0dmFyIHRoYXQgXHRcdFx0XHQ9IHRoaXM7XG5cdFx0XHR0aGlzLnRhcmdldCBcdFx0XHQ9IHRhcmdldDtcblx0XHRcdHRoaXMucmVzdWx0cyBcdFx0XHQ9IG9wdHMucmVzdWx0cztcblx0XHRcdHRoaXMuYmxvZ0RhdGEgXHRcdFx0PSB7fTtcblx0XHRcdHRoaXMucmVzdWx0X3RlbXBsYXRlIFx0PSBvcHRzLnJlc3VsdF90ZW1wbGF0ZTtcblx0XHRcdHRoaXMuaW5mb190ZW1wbGF0ZSBcdFx0PSBvcHRzLmluZm9fdGVtcGxhdGU7XG5cdFx0XHR0aGlzLnplcm9SZXN1bHRzSW5mbyBcdD0gb3B0cy56ZXJvUmVzdWx0c0luZm87XG5cdFx0XHR0aGlzLmRpc3BsYXlTZWFyY2hJbmZvICA9IG9wdHMuZGlzcGxheVNlYXJjaEluZm87XG5cdFx0XHR0aGlzLmJlZm9yZSBcdFx0XHQ9IG9wdHMuYmVmb3JlO1xuXHRcdFx0dGhpcy5vbkNvbXBsZXRlIFx0XHQ9IG9wdHMub25Db21wbGV0ZTtcblxuXHRcdFx0Ly9UaGlzIGlzIHdoZXJlIHdlJ2xsIGJ1aWxkIHRoZSBpbmRleCBmb3IgbGF0ZXIgc2VhcmNoaW5nLiBJdCdzIG5vdCBhIGJpZyBkZWFsIHRvIGJ1aWxkIGl0IG9uIGV2ZXJ5IGxvYWQgYXMgaXQgdGFrZXMgYWxtb3N0IG5vIHNwYWNlIHdpdGhvdXQgZGF0YVxuXHRcdFx0dGhpcy5pbmRleCA9IGx1bnIoZnVuY3Rpb24gKCkge1xuXHRcdFx0ICAgIHRoaXMuZmllbGQoJ3RpdGxlJywge2Jvb3N0OiAxMH0pXG5cdFx0XHQgICAgdGhpcy5maWVsZCgnZGVzY3JpcHRpb24nKVxuXHRcdFx0ICAgIHRoaXMuZmllbGQoJ2xpbmsnKVxuXHRcdFx0ICAgIHRoaXMuZmllbGQoJ21hcmtkb3duJywge2Jvb3N0OiA1fSlcblx0XHRcdCAgICB0aGlzLmZpZWxkKCdwdWJEYXRlJylcblx0XHRcdCAgICB0aGlzLmZpZWxkKCd0YWcnKVxuXHRcdFx0ICAgIHRoaXMucmVmKCdpZCcpXG5cdFx0XHR9KTtcblxuXHRcdFx0dGFyZ2V0LmZvY3VzKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHRoYXQubG9hZEFQSSgpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRhcmdldC5jbG9zZXN0KFwiZm9ybVwiKS5zdWJtaXQoZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhhdC5maW5kKHRhcmdldC52YWwoKSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYoIG9wdHMub25LZXlVcCApIHtcblx0XHRcdFx0dGhhdC5sb2FkQVBJKCk7XG5cdFx0XHRcdHRhcmdldC5rZXl1cChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR0aGF0LmZpbmQodGFyZ2V0LnZhbCgpKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHRsb2FkQVBJXHRcdFx0OiBmdW5jdGlvbigpe1xuXG5cdFx0XHRpZih0aGlzLmlzSW5pdCkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0LypcdEhlcmUgd2UgbG9hZCBhbGwgb2YgdGhlIGJsb2cgcG9zdHMgdG8gdGhlIGluZGV4LlxuXHRcdFx0VGhpcyBmdW5jdGlvbiB3aWxsIG5vdCBjYWxsIG9uIGxvYWQgdG8gYXZvaWQgdW5uZWNlc3NhcnkgaGVhdnlcblx0XHRcdG9wZXJhdGlvbnMgb24gYSBwYWdlIGlmIGEgdmlzaXRvciBuZXZlciBlbmRzIHVwIHNlYXJjaGluZyBhbnl0aGluZy4gKi9cblxuXHRcdFx0dmFyIGluZGV4IFx0XHQ9IHRoaXMuaW5kZXgsXG5cdFx0XHRcdGJsb2dEYXRhIFx0PSB0aGlzLmJsb2dEYXRhO1xuXG5cdCAgICAgICAgJC5nZXQoZ2hvc3QudXJsLmFwaSgncG9zdHMnLCB7bGltaXQ6IFwiYWxsXCIsIGluY2x1ZGU6IFwidGFnc1wifSkpLmRvbmUoZnVuY3Rpb24oZGF0YSl7XG5cdCAgICAgICAgXHR2YXIgc2VhcmNoRGF0YSA9IGRhdGEucG9zdHM7XG4gICAgICAgICAgICBcdHNlYXJjaERhdGEuZm9yRWFjaChmdW5jdGlvbihhcnJheUl0ZW0pe1xuICAgICAgICAgICAgXHRcdHZhciB0YWdfYXJyID0gYXJyYXlJdGVtLnRhZ3MubWFwKGZ1bmN0aW9uKHYpIHtcblx0ICAgIFx0XHRcdHJldHVybiB2Lm5hbWU7IC8vIGB0YWdgIG9iamVjdCBoYXMgYW4gYG5hbWVgIHByb3BlcnR5IHdoaWNoIGlzIHRoZSB2YWx1ZSBvZiB0YWcuIElmIHlvdSBhbHNvIHdhbnQgb3RoZXIgaW5mbywgY2hlY2sgQVBJIGFuZCBnZXQgdGhhdCBwcm9wZXJ0eVxuXHQgICAgXHRcdFx0fSlcblx0ICAgIFx0XHRcdHZhciBjYXRlZ29yeSA9IHRhZ19hcnIuam9pbihcIiwgXCIpO1xuXHQgICAgXHRcdFx0aWYgKGNhdGVnb3J5Lmxlbmd0aCA8IDEpe1xuXHQgICAgXHRcdFx0Y2F0ZWdvcnkgPSBcInVuZGVmaW5lZFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdCAgICAgICAgdmFyIHBhcnNlZERhdGEgXHQ9IHtcblx0XHRcdFx0XHRcdGlkIFx0XHRcdDogU3RyaW5nKGFycmF5SXRlbS5pZCksXG5cdFx0XHRcdFx0XHR0aXRsZSBcdFx0OiBTdHJpbmcoYXJyYXlJdGVtLnRpdGxlKSxcblx0XHRcdFx0XHRcdGRlc2NyaXB0aW9uXHQ6IFN0cmluZyhhcnJheUl0ZW0ubWV0YV9kZXNjcmlwdGlvbiksXG5cdFx0XHRcdFx0XHRtYXJrZG93biBcdDogU3RyaW5nKGFycmF5SXRlbS5tYXJrZG93biksXG5cdFx0XHRcdFx0XHRwdWJEYXRlIFx0OiBTdHJpbmcoYXJyYXlJdGVtLmNyZWF0ZWRfYXQpLFxuXHRcdFx0XHRcdFx0dGFnIFx0XHQ6IGNhdGVnb3J5LFxuXHRcdFx0XHRcdFx0bGluayBcdFx0OiBTdHJpbmcoYXJyYXlJdGVtLnVybClcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRwYXJzZWREYXRhLnByZXR0eVB1YkRhdGUgPSBwcmV0dHlEYXRlKHBhcnNlZERhdGEucHViRGF0ZSk7XG5cdFx0XHRcdFx0dmFyIHRlbXBkYXRlID0gcHJldHR5RGF0ZShwYXJzZWREYXRhLnB1YkRhdGUpO1xuXG5cdFx0XHRcdCAgICBpbmRleC5hZGQocGFyc2VkRGF0YSlcblx0XHRcdFx0ICAgIGJsb2dEYXRhW2FycmF5SXRlbS5pZF0gPSB7dGl0bGU6IGFycmF5SXRlbS50aXRsZSwgZGVzY3JpcHRpb246IGFycmF5SXRlbS5tZXRhX2Rlc2NyaXB0aW9uLCBwdWJEYXRlOiB0ZW1wZGF0ZSwgbGluazogYXJyYXlJdGVtLnVybH07XG4gICAgICAgICAgICBcdFx0fSk7XG5cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmlzSW5pdCA9IHRydWU7XG5cblx0XHR9LFxuXG5cdFx0ZmluZCBcdFx0IFx0OiBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHR2YXIgc2VhcmNoUmVzdWx0IFx0PSB0aGlzLmluZGV4LnNlYXJjaCh2YWx1ZSk7XG5cdFx0XHR2YXIgcmVzdWx0cyBcdFx0PSAkKHRoaXMucmVzdWx0cyk7XG5cdFx0XHR2YXIgcmVzdWx0c0RhdGEgXHQ9IFtdO1xuXHRcdFx0cmVzdWx0cy5lbXB0eSgpO1xuXG5cdFx0XHRpZih0aGlzLmJlZm9yZSkge1xuXHRcdFx0XHR0aGlzLmJlZm9yZSgpO1xuXHRcdFx0fTtcblxuXHRcdFx0aWYodGhpcy56ZXJvUmVzdWx0c0luZm8gfHwgc2VhcmNoUmVzdWx0Lmxlbmd0aCA+IDApXG5cdFx0XHR7XG5cdFx0XHRcdGlmKHRoaXMuZGlzcGxheVNlYXJjaEluZm8pIHJlc3VsdHMuYXBwZW5kKHRoaXMuZm9ybWF0KHRoaXMuaW5mb190ZW1wbGF0ZSx7XCJhbW91bnRcIjpzZWFyY2hSZXN1bHQubGVuZ3RofSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHNlYXJjaFJlc3VsdC5sZW5ndGg7IGkrKylcblx0XHRcdHtcblx0XHRcdFx0dmFyIGx1bnJyZWZcdFx0PSBzZWFyY2hSZXN1bHRbaV0ucmVmO1xuXHRcdFx0XHR2YXIgcG9zdERhdGEgIFx0PSB0aGlzLmJsb2dEYXRhW2x1bnJyZWZdO1xuXHRcdFx0XHRyZXN1bHRzLmFwcGVuZCh0aGlzLmZvcm1hdCh0aGlzLnJlc3VsdF90ZW1wbGF0ZSxwb3N0RGF0YSkpO1xuXHRcdFx0XHRyZXN1bHRzRGF0YS5wdXNoKHBvc3REYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy5vbkNvbXBsZXRlKSB7XG5cdFx0XHRcdHRoaXMub25Db21wbGV0ZShyZXN1bHRzRGF0YSk7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRjbGVhciBcdFx0XHQ6IGZ1bmN0aW9uKCl7XG5cdFx0XHQkKHRoaXMucmVzdWx0cykuZW1wdHkoKTtcblx0XHRcdHRoaXMudGFyZ2V0LnZhbChcIlwiKTtcblx0XHR9LFxuXG5cdFx0Zm9ybWF0IFx0XHRcdDogZnVuY3Rpb24gKHQsIGQpIHtcblx0ICAgICAgICByZXR1cm4gdC5yZXBsYWNlKC97eyhbXnt9XSopfX0vZywgZnVuY3Rpb24gKGEsIGIpIHtcblx0ICAgICAgICAgICAgdmFyIHIgPSBkW2JdO1xuXHQgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHIgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiByID09PSAnbnVtYmVyJyA/IHIgOiBhO1xuXHQgICAgICAgIH0pO1xuXHRcdH1cblx0fVxuXG59KSggalF1ZXJ5ICk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qcy9saWIvanF1ZXJ5Lmdob3N0SHVudGVyLmpzXG4gKiovIiwiLypcclxuKiBAcGFja2FnZSBnb2RvZnJlZG9uaW5qYVxyXG4qIFNoYXJlIHNvY2lhbCBtZWRpYVxyXG4qL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuY2xhc3MgR29kb1NoYXJlIHtcclxuXHRjb25zdHJ1Y3RvcihlbGVtKSB7XHJcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xyXG5cdH1cclxuXHRcclxuXHQgLyoqXHJcbiAgICAgKiAgQGZ1bmN0aW9uIGdvZG9WYWx1ZVxyXG4gICAgICogIEBkZXNjcmlwdGlvbiBIZWxwZXIgdG8gZ2V0IHRoZSBhdHRyaWJ1dGUgb2YgYSBET00gZWxlbWVudFxyXG4gICAgICogIEBwYXJhbSB7U3RyaW5nfSBhdHRyIERPTSBlbGVtZW50IGF0dHJpYnV0ZVxyXG4gICAgICogIEByZXR1cm5zIHtTdHJpbmd8RW1wdHl9IHJldHVybnMgdGhlIGF0dHIgdmFsdWUgb3IgZW1wdHkgc3RyaW5nXHJcbiAgICAgKi9cclxuXHRnb2RvVmFsdWUoYSkge1xyXG4gICAgICAgIGxldCB2YWwgPSB0aGlzLmVsZW0uYXR0cignZ29kby0nICsgYSk7XHJcbiAgICAgICAgcmV0dXJuICh2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwgPT09IG51bGwpID8gZmFsc2UgOiB2YWw7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG4gICAgICogQGV2ZW50IGdvZG9TaGFyZVxyXG4gICAgICogQGRlc2NyaXB0aW9uIE1haW4gc2hhcmUgZXZlbnQuIFdpbGwgcG9wIGEgd2luZG93IG9yIHJlZGlyZWN0IHRvIGEgbGlua1xyXG4gICAgICovXHJcblx0Z29kb1NoYXJlKCl7XHJcblx0XHRsZXQgc2hhcmVfbmFtZSA9IHRoaXMuZ29kb1ZhbHVlKCdzaGFyZScpLnRvTG93ZXJDYXNlKCksXHJcblxyXG5cdFx0c2hhcmVfc29jaWFsID0ge1xyXG5cdFx0XHRmYWNlYm9vazoge1xyXG5cdFx0XHRcdHNoYXJlVXJsOiAnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwJyxcclxuXHRcdFx0XHRwYXJhbXM6IHt1OiB0aGlzLmdvZG9WYWx1ZSgndXJsJyl9XHJcblx0XHRcdH0sXHJcblx0XHRcdHR3aXR0ZXI6IHtcclxuICAgICAgICAgICAgICAgIHNoYXJlVXJsOiAnaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQvJyxcclxuICAgICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuZ29kb1ZhbHVlKCd0aXRsZScpLFxyXG4gICAgICAgICAgICAgICAgXHR1cmw6IHRoaXMuZ29kb1ZhbHVlKCd1cmwnKSxcclxuICAgICAgICAgICAgICAgIH1cclxuXHRcdFx0fSxcclxuXHRcdFx0cmVkZGl0OiB7XHJcblx0XHRcdFx0c2hhcmVVcmw6ICdodHRwczovL3d3dy5yZWRkaXQuY29tL3N1Ym1pdCcsXHJcblx0XHRcdFx0cGFyYW1zOiB7J3VybCc6IHRoaXMuZ29kb1ZhbHVlKCd1cmwnKX1cclxuXHRcdFx0fSxcclxuXHRcdFx0cGludGVyZXN0OiB7XHJcbiAgICAgICAgICAgIFx0c2hhcmVVcmw6ICdodHRwczovL3d3dy5waW50ZXJlc3QuY29tL3Bpbi9jcmVhdGUvYnV0dG9uLycsXHJcblx0XHRcdFx0cGFyYW1zOiB7XHJcblx0XHRcdFx0XHR1cmw6IHRoaXMuZ29kb1ZhbHVlKCd1cmwnKSxcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogdGhpcy5nb2RvVmFsdWUoJ3RpdGxlJylcclxuICAgICAgICAgICAgICAgIH1cclxuXHRcdFx0fSxcclxuXHRcdFx0cG9ja2V0OiB7XHJcblx0XHRcdFx0c2hhcmVVcmw6ICdodHRwczovL2dldHBvY2tldC5jb20vc2F2ZScsXHJcblx0XHRcdFx0cGFyYW1zOiB7XHJcblx0XHRcdFx0XHR1cmw6IHRoaXMuZ29kb1ZhbHVlKCd1cmwnKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzID0gc2hhcmVfc29jaWFsW3NoYXJlX25hbWVdO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gcyAhPT0gdW5kZWZpbmVkID8gdGhpcy5nb2RvUG9wdXAocykgOiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG4gICAgICogQGV2ZW50IGdvZG9Qb3B1cFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNoYXJlXHJcbiAgICAgKi9cclxuXHRnb2RvUG9wdXAoc2hhcmUpIHtcclxuXHRcdHZhciBwID0gc2hhcmUucGFyYW1zIHx8IHt9LFxyXG5cdFx0a2V5cyA9IE9iamVjdC5rZXlzKHApLFxyXG5cdFx0aSxcclxuXHRcdHN0ciA9IGtleXMubGVuZ3RoID4gMCA/ICc/JyA6ICcnO1xyXG5cdFx0XHJcblx0XHRmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAoc3RyICE9PSAnPycpIHtcclxuXHRcdFx0XHRzdHIgKz0gJyYnO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChwW2tleXNbaV1dKSB7XHJcblx0XHRcdFx0c3RyICs9IGtleXNbaV0gKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQocFtrZXlzW2ldXSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0c2hhcmUuc2hhcmVVcmwgKz0gc3RyO1xyXG5cclxuXHRcdGlmICghc2hhcmUuaXNMaW5rKSB7XHJcblx0XHRcdGxldCBwb3BXaWR0aCA9IHNoYXJlLndpZHRoIHx8IDYwMCxcclxuXHRcdFx0cG9wSGVpZ2h0ID0gc2hhcmUuaGVpZ2h0IHx8IDQ4MCxcclxuXHRcdFx0bGVmdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gMiAtIHBvcFdpZHRoIC8gMiArIHdpbmRvdy5zY3JlZW5YLFxyXG5cdFx0XHR0b3AgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyIC0gcG9wSGVpZ2h0IC8gMiArIHdpbmRvdy5zY3JlZW5ZLFxyXG5cdFx0XHRwb3BQYXJhbXMgPSAnc2Nyb2xsYmFycz1ubywgd2lkdGg9JyArIHBvcFdpZHRoICsgJywgaGVpZ2h0PScgKyBwb3BIZWlnaHQgKyAnLCB0b3A9JyArIHRvcCArICcsIGxlZnQ9JyArIGxlZnQsXHJcblx0XHRcdG5ld1dpbmRvdyA9IHdpbmRvdy5vcGVuKHNoYXJlLnNoYXJlVXJsLCAnJywgcG9wUGFyYW1zKTtcclxuXHJcblx0XHRcdGlmICh3aW5kb3cuZm9jdXMpIHtcclxuXHRcdFx0XHRuZXdXaW5kb3cuZm9jdXMoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSBzaGFyZS5zaGFyZVVybDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxufVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gR29kb1NoYXJlO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qcy9hcHAvYXBwLnNoYXJlLmpzXG4gKiovIiwiLypcclxuKiBAcGFja2FnZSBnb2RvZnJlZG9uaW5qYVxyXG4qICBTaGFyZSBjb3VudCBzb2NpYWwgbWVkaWFcclxuKi9cclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmNsYXNzIEdvZG9TaGFyZUNvdW50IHtcclxuXHRjb25zdHJ1Y3RvcihlbGVtKSB7XHJcblx0XHR0aGlzLmVsZW0gXHRcdD0gZWxlbTtcclxuXHRcdHRoaXMudXJsIFx0XHQ9IGVsZW0uYXR0cignZGF0YS11cmwnKTtcclxuXHRcdHRoaXMudG90YWwgXHRcdD0gMDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBmdW5jdGlvbiBjb252ZXJ0TnVtYmVyXHJcblx0ICogQGRlc2NyaXB0aW9uICBSZXR1cm4gcm91bmRlZCBhbmQgcHJldHR5IHZhbHVlIG9mIHNoYXJlIGNvdW50LlxyXG5cdCAqL1xyXG5cdGNvbnZlcnROdW1iZXIobil7XHJcblx0XHRpZihuPj0xMDAwMDAwMDAwKSByZXR1cm4gKG4vMTAwMDAwMDAwMCkudG9GaXhlZCgxKSsnRyc7XHJcblx0XHRpZihuPj0xMDAwMDAwKSByZXR1cm4gKG4vMTAwMDAwMCkudG9GaXhlZCgxKSsnTSc7XHJcblx0XHRpZihuPj0xMDAwKSByZXR1cm4gKG4vMTAwMCkudG9GaXhlZCgxKSsnSyc7XHJcblx0XHRyZXR1cm4gbjtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBmdW5jdGlvbiB1cGRhdGVDb3VudGVyXHJcblx0ICogQGRlc2NyaXB0aW9uICBhZGRzIGFsbCB0aGUgbnVtYmVyIG9mIHNoYXJlZCBwYWdlc1xyXG5cdCAqL1xyXG5cdGFkZENvdW50ZXIobil7XHJcblx0XHR0aGlzLnRvdGFsID0gdGhpcy50b3RhbCtuO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQGZ1bmN0aW9uIHVwZGF0ZUNvdW50ZXJcclxuXHQgKiBAZGVzY3JpcHRpb24gIHVwZGF0ZSB0aGUgbnVtYmVyIG9mIHNoYXJlcy5cclxuXHQgKi9cclxuXHR1cGRhdGVDb3VudGVyKCl7XHJcblx0XHR0aGlzLmVsZW0uaHRtbChgPHNwYW4gc3R5bGU9XCJtYXJnaW4tcmlnaHQ6NXB4XCI+PHN0cm9uZz4ke3RoaXMuY29udmVydE51bWJlcih0aGlzLnRvdGFsKX08L3N0cm9uZz48L3NwYW4+PHNwYW4+U2hhcmVzPC9zcGFuPmApO1xyXG5cdH1cclxuXHJcblx0Z29kb0NvdW50KCl7XHJcblxyXG5cdFx0JC5nZXRKU09OKCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8/aWQ9JyArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnVybCkgKyAnJmNhbGxiYWNrPT8nLCByZXNwb25zZSA9PiB7XHJcblx0XHRcdGlmIChyZXNwb25zZS5zaGFyZXMgPT09IHVuZGVmaW5lZCkgdGhpcy5hZGRDb3VudGVyKDApO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dGhpcy5hZGRDb3VudGVyKHJlc3BvbnNlLnNoYXJlcyk7XHJcblx0XHRcdFx0dGhpcy51cGRhdGVDb3VudGVyKCk7XHJcblx0XHR9KTtcclxuXHJcblx0fVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEdvZG9TaGFyZUNvdW50O1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qcy9hcHAvYXBwLnNoYXJlLWNvdW50LmpzXG4gKiovIiwiJChkb2N1bWVudCkub24oJ3JlYWR5JywgZnVuY3Rpb24oKSB7XHJcbiAgICBsZXQgcGFnZSA9IDI7XHJcblxyXG4gICAgY29uc3QgJHBhZ2luYXRpb24gICA9ICQoJyNwYWdpbmF0aW9uJyksXHJcbiAgICAgICAgcGFnZVRvdGFsICAgICAgID0gJHBhZ2luYXRpb24uYXR0cignbWFwYWNoZS1wYWdlJyksXHJcbiAgICAgICAgcGFnZUxpbWl0ICAgICAgID0gJHBhZ2luYXRpb24uYXR0cignbWFwYWNoZS1saW1pdCcpLFxyXG4gICAgICAgIHVybFBhZ2UgICAgICAgICA9ICQoJ2xpbmtbcmVsPWNhbm9uaWNhbF0nKS5hdHRyKCdocmVmJyksXHJcbiAgICAgICAgJHdpbiAgICAgICAgICAgID0gJCh3aW5kb3cpO1xyXG5cclxuICAgIGlmICggcGFnZVRvdGFsID49IHBhZ2UpIHtcclxuICAgICAgICAkKCcucGFnaW5hdGlvbicpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgICAgIGluZmluaXRlU2Nyb2xsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5maW5pdGVTY3JvbGwoKSB7XHJcbiAgICAgICAgJHdpbi5vbignc2Nyb2xsJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiggJHdpbi5zY3JvbGxUb3AoKSArICR3aW4uaGVpZ2h0KCkgPT0gJChkb2N1bWVudCkuaGVpZ2h0KCkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJHBhZ2luYXRpb24uYWRkQ2xhc3MoJ2xvYW5kaW5nJykuaHRtbCgnTG9hZGluZyBtb3JlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIHBhZ2UgPD0gcGFnZVRvdGFsICl7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0UG9zdCgpO1xyXG4gICAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5wYWdpbmF0aW9uJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFBvc3QoKSB7XHJcbiAgICAgICAgZmV0Y2godXJsUGFnZSsncGFnZS8nK3BhZ2UpXHJcbiAgICAgICAgLnRoZW4oIHJlcyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMudGV4dCgpXHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbiggYm9keSA9PiB7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZW50cmllcyA9ICQoJy5lbnRyeS1saXN0Jyxib2R5KTtcclxuICAgICAgICAgICAgICAgICQoJyNlbnRyeScpLmFwcGVuZChlbnRyaWVzKTtcclxuICAgICAgICAgICAgICAgICRwYWdpbmF0aW9uLnJlbW92ZUNsYXNzKCdsb2FuZGluZycpLmh0bWwoJ0xvYWQgbW9yZScpO1xyXG4gICAgICAgICAgICAgICAgcGFnZSsrO1xyXG4gICAgICAgICAgICB9LCAxMDAwKTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn0pO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9qcy9hcHAvYXBwLnBhZ2luYXRpb24uanNcbiAqKi8iLCJjbGFzcyBtYXBhY2hlUmVsYXRlZCB7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtICAgICAgID0gZWxlbTtcclxuICAgICAgICB0aGlzLnBvc3RJRCAgICAgPSBlbGVtLmF0dHIoJ21hcGFjaGUtcG9zdC1pZCcpO1xyXG4gICAgICAgIHRoaXMucG9zdFRvdGFsICA9IGVsZW0uYXR0cignbWFwYWNoZS1wb3N0LXRvdGFsJyk7XHJcbiAgICAgICAgdGhpcy5wb3N0VGFncyAgID0gZWxlbS5hdHRyKCdtYXBhY2hlLXRhZycpO1xyXG4gICAgICAgIHRoaXMudXJsQXBpICAgICA9IGdob3N0LnVybC5hcGkoJ3Bvc3RzJywge2luY2x1ZGU6ICd0YWdzJ30pO1xyXG4gICAgICAgIHRoaXMuY291bnQgICAgICA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNwbGF5IFBvc3RcclxuICAgICAqIEBtZXRob2QgbWFwYWNoZUNhbGxiYWNrXHJcbiAgICAgKiBAcGFyYW0gIHtyZXN9IEFsbCBwb3N0IEpzb25cclxuICAgICAqIEByZXR1cm4ge2h0bWx9IEFwcGVuZCBpbiAjcmVsYXRlZC13cmFwXHJcbiAgICAgKi9cclxuICAgIG1hcGFjaGVDYWxsYmFjayhyZXMpe1xyXG4gICAgICAgIGxldCBodG1sID0gJyc7XHJcbiAgICAgICAgcmVzLmZvckVhY2goIHBvc3QgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBwb3N0LnRhZ3MubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIHBvc3QudGFnc1tpXS5pZCA9PSB0aGlzLnBvc3RUYWdzICYmIHBvc3QuaWQgIT0gdGhpcy5wb3N0SUQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLmNvdW50IDwgdGhpcy5wb3N0VG90YWwgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5tYXBhY2hlVGVtcGxhdGUocG9zdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY291bnQgPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW0uY3NzKCdkaXNwbGF5Jywnbm9uZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCgnI3JlbGF0ZWQtd3JhcCcpLmh0bWwoaHRtbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZW1wbGF0ZSByZWxhdGVkIHBvc3RcclxuICAgICAqIEBtZXRob2QgbWFwYWNoZVRlbXBsYXRlXHJcbiAgICAgKiBAcGFyYW0gIHtwb3N0fSBDb250ZW50IEpzb24gcG9zdFxyXG4gICAgICogQHJldHVybiB7aHRtbH0gY29udGVudCByZWxhdGVkIHBvc3RcclxuICAgICAqL1xyXG4gICAgbWFwYWNoZVRlbXBsYXRlKHBvc3Qpe1xyXG4gICAgICAgIGxldCBodG1sICAgICAgICAgICAgPSAnJyxcclxuICAgICAgICAgICAgcG9zdF9pbWFnZSAgICAgID0gJycsXHJcbiAgICAgICAgICAgIHBvc3Rfbm9fY292ZXIgICA9ICduby1pbWFnZScsXHJcbiAgICAgICAgICAgIHBvc3RfdGl0bGUgICAgICA9IHBvc3QudGl0bGUsXHJcbiAgICAgICAgICAgIHBvc3RfdXJsICAgICAgICA9IHBvc3QudXJsO1xyXG5cclxuICAgICAgICBpZiAocG9zdC5pbWFnZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHBvc3RfaW1hZ2UgPSBgXHJcbiAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJpbWFnZVwiPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIiR7cG9zdF91cmx9XCIgY2xhc3M9XCJpbWFnZS1saW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlbnRyaWVzLWJnXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOnVybCgke3Bvc3QuaW1hZ2V9KVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgPC9maWd1cmU+YDtcclxuXHJcbiAgICAgICAgICAgIHBvc3Rfbm9fY292ZXIgPScnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaHRtbCA9IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sIG00ICR7cG9zdF9ub19jb3Zlcn1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlbGF0ZWQtcG9zdHMtbGlzdFwiPlxyXG4gICAgICAgICAgICAgICAgJHtwb3N0X2ltYWdlfVxyXG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwidGl0bGVcIj48YSBocmVmPVwiJHtwb3N0X3VybH1cIj4ke3Bvc3RfdGl0bGV9PC9hPjwvaDI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PmA7XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFwaSBnaG9zdFxyXG4gICAgICogQG1ldGhvZCBtYXBhY2hlR2V0XHJcbiAgICAgKiBAcmV0dXJuIHtyZXN9IEpzb24gYWxsIFBvc3RcclxuICAgICAqL1xyXG4gICAgbWFwYWNoZUdldCgpe1xyXG4gICAgICAgIGZldGNoKHRoaXMudXJsQXBpKVxyXG4gICAgICAgIC50aGVuKCByZXMgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKCBqc29uID0+IHtcclxuICAgICAgICAgICAgdGhpcy5tYXBhY2hlQ2FsbGJhY2soIGpzb24ucG9zdHMgKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbWFwYWNoZVJlbGF0ZWQ7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2pzL2FwcC9hcHAucmVsYXRlZC5wb3N0LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==