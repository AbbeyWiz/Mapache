/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _prism = __webpack_require__(1);
	
	var _prism2 = _interopRequireDefault(_prism);
	
	var _jqueryGhostHunter = __webpack_require__(2);
	
	var _jqueryGhostHunter2 = _interopRequireDefault(_jqueryGhostHunter);
	
	var _app = __webpack_require__(3);
	
	var _app2 = _interopRequireDefault(_app);
	
	var _app3 = __webpack_require__(4);
	
	var _app4 = _interopRequireDefault(_app3);
	
	var _app5 = __webpack_require__(5);
	
	var _app6 = _interopRequireDefault(_app5);
	
	var _appRelated = __webpack_require__(6);
	
	var _appRelated2 = _interopRequireDefault(_appRelated);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// import              '../sass/main.scss';
	
	
	/*
	@package godofredoninja
	
	========================================================================
	Mapache Javascript Functions
	========================================================================
	*/
	
	/**
	 * Imports and libraris and modules
	 */
	(function () {
	
		/* variables globals */
		var $gd_header = $('#header'),
		    $gd_menu = $('#menu-mobile'),
		    $gd_cover = $('#cover'),
		    $gd_search_btn = $('#search-btn'),
		    $gd_search = $('#header-search'),
		    $gd_search_input = $('.search-field'),
		    $gd_comments = $('#comments'),
		    $gd_related = $('#related'),
		    $gd_comment_count = $('.gd-comment_count'),
		    $gd_share_count = $('.share-count'),
		    $gd_video = $('#video-format'),
		    $gd_social_box = $('.social_box'),
		    $gd_footer_menu = $('#footer-menu'),
		    $gd_sidebar_fixed = $('#sidebar').find('.fixed'),
		    $gd_scroll_top = $('.scroll_top'),
		    url_regexp = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
	
		var $document = $(document),
		    $window = $(window);
	
		var overlay = {
			opacity: 1,
			visibility: 'visible'
		};
	
		/**
	  * Functions
	  */
		$('.share').bind('click', shareSocial);
		$document.on('mouseup', mouseUp);
	
		/* Menu open and close for mobile */
		$('#nav-mob-toggle').on('click', function (e) {
			e.preventDefault();
			$('body').toggleClass('is-showNavMob');
		});
	
		/* Seach open and close for Mobile */
		$('#search-mob-toggle').on('click', function (e) {
			e.preventDefault();
			$gd_header.toggleClass('is-showSearchMob');
			$gd_search_input.focus();
		});
	
		/**
	  *  Functions MouseUp
	  */
		function mouseUp(e) {
			if ($gd_menu.hasClass('open') && $gd_menu.has(e.target).length === 0) {
				menuClose(e);
			}
		}
	
		/**
	  * Change title home
	  */
		if (typeof title_home !== 'undefined') {
			$('#title-home').html(title_home);
		}
	
		/**
	  *  Search Open and close mobile
	  */
		// $gd_search_btn.on('click', function(e) {
		// 	e.preventDefault();
		// 	$(this).toggleClass('i-search');
		// 	$gd_header.toggleClass('responsive-search-open');
		// 	$gd_search_input.focus();
		// });
	
		/**
	  * Search open an close desktop.
	  * Api ghost for search
	  */
		$document.on('ready', function () {
	
			$gd_search_input.focus(function () {
				$gd_header.addClass('is-showSearch');
				$('.search-popout').removeClass('closed');
			});
	
			$gd_search_input.blur(function () {
				setTimeout(function () {
					$gd_header.removeClass('is-showSearch');
					$('.search-popout').addClass('closed');
				}, 200);
			});
	
			$gd_search_input.keyup(function () {
				$('.search-suggest-results').css('display', 'block');
			});
	
			$gd_search_input.ghostHunter({
				results: "#search-results",
				zeroResultsInfo: false,
				displaySearchInfo: false,
				result_template: '<a href="{{link}}">{{title}}</a>',
				onKeyUp: true
			});
		});
	
		/**
	  * Header box shadow and transparent
	  */
		$document.on('ready', function () {
	
			if ($gd_cover.length > 0) {
				$window.on('scroll', coverScroll);
			}
	
			function coverScroll() {
				var scrollTop = $window.scrollTop(),
				    gd_cover_height = $gd_cover.height() - $gd_header.height(),
				    gd_cover_wrap = (gd_cover_height - scrollTop) / gd_cover_height;
	
				if (scrollTop >= gd_cover_height) {
					$gd_header.addClass('toolbar-shadow').removeAttr('style');
				} else {
					$gd_header.removeClass('toolbar-shadow').css({ 'background': 'transparent' });
				}
	
				$('.cover-wrap').css('opacity', gd_cover_wrap);
			}
		});
	
		/**
	  * Video Full for post tag video
	  */
		function videoPost() {
			$('.post-image').css('display', 'none');
			var video = $('iframe[src*="youtube.com"]')[0];
			$gd_video.find('.video-featured').prepend(video);
	
			if (typeof youtube != 'undefined') {
				$gd_video.find('.video-content').removeAttr('style');
	
				$.each(youtube, function (channelName, channelId) {
					$gd_video.find('.channel-name').html('Subscribe to <strong>' + channelName + '</strong>');
					$('.g-ytsubscribe').attr('data-channelid', channelId);
				});
	
				var s = document.createElement("script");
				s.src = 'https://apis.google.com/js/platform.js';
				document.body.appendChild(s);
			}
		}
	
		/**
	 * Video Responsive Youtube
	 */
		function videoResponsive() {
			$('.post-content').each(function () {
				var selectors = ['iframe[src*="player.vimeo.com"]', 'iframe[src*="youtube.com"]', 'iframe[src*="youtube-nocookie.com"]', 'iframe[src*="kickstarter.com"][src*="video.html"]'];
	
				var $allVideos = $(this).find(selectors.join(','));
	
				$allVideos.each(function () {
					$(this).wrap('<aside class="video-responsive"></aside>');
				});
			});
		}
	
		/**
	  * Share Social
	  */
		function shareSocial(e) {
			e.preventDefault();
			var share = new _app2.default($(this));
			share.godoShare();
		}
	
		/**
	  * Share Social Count
	  */
		function shareConter() {
			if ($gd_share_count.length > 0) {
				var share_count = new _app4.default($gd_share_count);
				share_count.godoCount();
			}
		}
	
		/**
	  * social Box
	  */
		function socialBox(links) {
			$.each(links, function (type, url) {
				if (typeof url === 'string' && url_regexp.test(url)) {
					var template = '<a title="' + type + '" href="' + url + '" target="_blank" class="i-' + type + '"></a>';
					$gd_social_box.append(template);
				}
			});
		}
	
		/**
	  * Menu footer
	  */
		function footerMenu(links) {
			$.each(links, function (type, url) {
				if (typeof url === 'string' && url_regexp.test(url)) {
					var template = '<a title="' + type + '" href="' + url + '">' + type + '</a>';
					$gd_footer_menu.append(template).css('display', 'block');
				}
			});
		}
	
		/**
	  * Disqus Comment
	  */
		function disqusComments() {
			if (typeof disqus_shortname != 'undefined') {
				$gd_comments.removeAttr('style');
				var d = document,
				    s = d.createElement('script');
				s.src = '//' + disqus_shortname + '.disqus.com/embed.js';
				s.setAttribute('data-timestamp', +new Date());
				(d.head || d.body).appendChild(s);
			}
		}
	
		/**
	  * Comments Count Disqus
	  */
		function commentsCount() {
			$gd_comment_count.each(function () {
				var _this = this;
	
				var url = $(this).attr('godo-url');
				$.ajax({
					type: 'GET',
					url: 'https://disqus.com/api/3.0/threads/set.jsonp',
					data: { api_key: disqusPublicKey, forum: disqus_shortname, thread: 'link:' + url },
					cache: false,
					dataType: 'jsonp',
	
					success: function success(commet) {
						for (var i in commet.response) {
							var count = commet.response[i].posts;
							$(_this).prepend('' + count);
						}
					}
				});
			});
		}
	
		/**
	  * Scroll btn link
	  */
		$('.scrolltop').on('click', function (e) {
			e.preventDefault();
			$('html, body').animate({ scrollTop: $($(this).attr('href')).offset().top - 70 }, 500, 'linear');
		});
	
		/**
	  * scroll top
	  */
		$window.on('scroll', function () {
			if ($(this).scrollTop() > 100) {
				$gd_scroll_top.addClass('visible');
			} else {
				$gd_scroll_top.removeClass('visible');
			}
		});
	
		$gd_scroll_top.on('click', function (e) {
			e.preventDefault();
			$('html, body').animate({ scrollTop: 0 }, 500);
		});
	
		/**
	  * Move excerpt
	  */
		if ($('p.excerpt').length > 0) {
			$('p.excerpt').insertAfter($('h1.title'));
		}
	
		// sidebar hidden aside
		function sidebarFixed() {
			var mela = $gd_sidebar_fixed.offset().top;
			$window.on('scroll', function () {
				var scrollTop = $window.scrollTop();
				if (scrollTop > mela - 78) {
					$gd_sidebar_fixed.addClass('active');
				} else {
					$gd_sidebar_fixed.removeClass('active');
				}
			});
		}
	
		/**
	  * when the document starts
	  */
		$document.on('ready', function () {
			shareConter();
			if (typeof social_link != 'undefined') socialBox(social_link);
			if (typeof footer_menu != 'undefined') footerMenu(footer_menu);
			if ($gd_comments.length > 0) disqusComments();
			if (typeof disqus_shortname != 'undefined' && typeof disqusPublicKey != 'undefined') {
				commentsCount();
			}
			if ($gd_video.length > 0) videoPost();
			videoResponsive();
			if ($gd_sidebar_fixed.length > 0) sidebarFixed();
	
			/**
	   * Post related
	   */
			if ($gd_related.length > 0) {
				var related = new _appRelated2.default($gd_related);
				related.mapacheGet();
			}
		});
	
		// onlye for me
		// change disqus comments for facebook comments
		// change comment count for facebook
		// change url in search
		// change url in post related
	})();

/***/ },
/* 1 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+aspnet+bash+c+csharp+cpp+ruby+css-extras+git+go+java+json+less+markdown+perl+php+php-extras+python+jsx+scss+sql+swift&plugins=line-numbers */
	var _self = "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {},
	    Prism = function () {
	  var e = /\blang(?:uage)?-(\w+)\b/i,
	      t = 0,
	      n = _self.Prism = { util: { encode: function encode(e) {
	        return e instanceof a ? new a(e.type, n.util.encode(e.content), e.alias) : "Array" === n.util.type(e) ? e.map(n.util.encode) : e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
	      }, type: function type(e) {
	        return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1];
	      }, objId: function objId(e) {
	        return e.__id || Object.defineProperty(e, "__id", { value: ++t }), e.__id;
	      }, clone: function clone(e) {
	        var t = n.util.type(e);switch (t) {case "Object":
	            var a = {};for (var r in e) {
	              e.hasOwnProperty(r) && (a[r] = n.util.clone(e[r]));
	            }return a;case "Array":
	            return e.map && e.map(function (e) {
	              return n.util.clone(e);
	            });}return e;
	      } }, languages: { extend: function extend(e, t) {
	        var a = n.util.clone(n.languages[e]);for (var r in t) {
	          a[r] = t[r];
	        }return a;
	      }, insertBefore: function insertBefore(e, t, a, r) {
	        r = r || n.languages;var l = r[e];if (2 == arguments.length) {
	          a = arguments[1];for (var i in a) {
	            a.hasOwnProperty(i) && (l[i] = a[i]);
	          }return l;
	        }var o = {};for (var s in l) {
	          if (l.hasOwnProperty(s)) {
	            if (s == t) for (var i in a) {
	              a.hasOwnProperty(i) && (o[i] = a[i]);
	            }o[s] = l[s];
	          }
	        }return n.languages.DFS(n.languages, function (t, n) {
	          n === r[e] && t != e && (this[t] = o);
	        }), r[e] = o;
	      }, DFS: function DFS(e, t, a, r) {
	        r = r || {};for (var l in e) {
	          e.hasOwnProperty(l) && (t.call(e, l, e[l], a || l), "Object" !== n.util.type(e[l]) || r[n.util.objId(e[l])] ? "Array" !== n.util.type(e[l]) || r[n.util.objId(e[l])] || (r[n.util.objId(e[l])] = !0, n.languages.DFS(e[l], t, l, r)) : (r[n.util.objId(e[l])] = !0, n.languages.DFS(e[l], t, null, r)));
	        }
	      } }, plugins: {}, highlightAll: function highlightAll(e, t) {
	      var a = { callback: t, selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code' };n.hooks.run("before-highlightall", a);for (var r, l = a.elements || document.querySelectorAll(a.selector), i = 0; r = l[i++];) {
	        n.highlightElement(r, e === !0, a.callback);
	      }
	    }, highlightElement: function highlightElement(t, a, r) {
	      for (var l, i, o = t; o && !e.test(o.className);) {
	        o = o.parentNode;
	      }o && (l = (o.className.match(e) || [, ""])[1].toLowerCase(), i = n.languages[l]), t.className = t.className.replace(e, "").replace(/\s+/g, " ") + " language-" + l, o = t.parentNode, /pre/i.test(o.nodeName) && (o.className = o.className.replace(e, "").replace(/\s+/g, " ") + " language-" + l);var s = t.textContent,
	          u = { element: t, language: l, grammar: i, code: s };if (n.hooks.run("before-sanity-check", u), !u.code || !u.grammar) return n.hooks.run("complete", u), void 0;if (n.hooks.run("before-highlight", u), a && _self.Worker) {
	        var c = new Worker(n.filename);c.onmessage = function (e) {
	          u.highlightedCode = e.data, n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(u.element), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
	        }, c.postMessage(JSON.stringify({ language: u.language, code: u.code, immediateClose: !0 }));
	      } else u.highlightedCode = n.highlight(u.code, u.grammar, u.language), n.hooks.run("before-insert", u), u.element.innerHTML = u.highlightedCode, r && r.call(t), n.hooks.run("after-highlight", u), n.hooks.run("complete", u);
	    }, highlight: function highlight(e, t, r) {
	      var l = n.tokenize(e, t);return a.stringify(n.util.encode(l), r);
	    }, tokenize: function tokenize(e, t) {
	      var a = n.Token,
	          r = [e],
	          l = t.rest;if (l) {
	        for (var i in l) {
	          t[i] = l[i];
	        }delete t.rest;
	      }e: for (var i in t) {
	        if (t.hasOwnProperty(i) && t[i]) {
	          var o = t[i];o = "Array" === n.util.type(o) ? o : [o];for (var s = 0; s < o.length; ++s) {
	            var u = o[s],
	                c = u.inside,
	                g = !!u.lookbehind,
	                h = !!u.greedy,
	                f = 0,
	                d = u.alias;u = u.pattern || u;for (var p = 0; p < r.length; p++) {
	              var m = r[p];if (r.length > e.length) break e;if (!(m instanceof a)) {
	                u.lastIndex = 0;var y = u.exec(m),
	                    v = 1;if (!y && h && p != r.length - 1) {
	                  var b = r[p + 1].matchedStr || r[p + 1],
	                      k = m + b;if (p < r.length - 2 && (k += r[p + 2].matchedStr || r[p + 2]), u.lastIndex = 0, y = u.exec(k), !y) continue;var w = y.index + (g ? y[1].length : 0);if (w >= m.length) continue;var _ = y.index + y[0].length,
	                      P = m.length + b.length;if (v = 3, P >= _) {
	                    if (r[p + 1].greedy) continue;v = 2, k = k.slice(0, P);
	                  }m = k;
	                }if (y) {
	                  g && (f = y[1].length);var w = y.index + f,
	                      y = y[0].slice(f),
	                      _ = w + y.length,
	                      S = m.slice(0, w),
	                      O = m.slice(_),
	                      j = [p, v];S && j.push(S);var A = new a(i, c ? n.tokenize(y, c) : y, d, y, h);j.push(A), O && j.push(O), Array.prototype.splice.apply(r, j);
	                }
	              }
	            }
	          }
	        }
	      }return r;
	    }, hooks: { all: {}, add: function add(e, t) {
	        var a = n.hooks.all;a[e] = a[e] || [], a[e].push(t);
	      }, run: function run(e, t) {
	        var a = n.hooks.all[e];if (a && a.length) for (var r, l = 0; r = a[l++];) {
	          r(t);
	        }
	      } } },
	      a = n.Token = function (e, t, n, a, r) {
	    this.type = e, this.content = t, this.alias = n, this.matchedStr = a || null, this.greedy = !!r;
	  };if (a.stringify = function (e, t, r) {
	    if ("string" == typeof e) return e;if ("Array" === n.util.type(e)) return e.map(function (n) {
	      return a.stringify(n, t, e);
	    }).join("");var l = { type: e.type, content: a.stringify(e.content, t, r), tag: "span", classes: ["token", e.type], attributes: {}, language: t, parent: r };if ("comment" == l.type && (l.attributes.spellcheck = "true"), e.alias) {
	      var i = "Array" === n.util.type(e.alias) ? e.alias : [e.alias];Array.prototype.push.apply(l.classes, i);
	    }n.hooks.run("wrap", l);var o = "";for (var s in l.attributes) {
	      o += (o ? " " : "") + s + '="' + (l.attributes[s] || "") + '"';
	    }return "<" + l.tag + ' class="' + l.classes.join(" ") + '" ' + o + ">" + l.content + "</" + l.tag + ">";
	  }, !_self.document) return _self.addEventListener ? (_self.addEventListener("message", function (e) {
	    var t = JSON.parse(e.data),
	        a = t.language,
	        r = t.code,
	        l = t.immediateClose;_self.postMessage(n.highlight(r, n.languages[a], a)), l && _self.close();
	  }, !1), _self.Prism) : _self.Prism;var r = document.currentScript || [].slice.call(document.getElementsByTagName("script")).pop();return r && (n.filename = r.src, document.addEventListener && !r.hasAttribute("data-manual") && document.addEventListener("DOMContentLoaded", n.highlightAll)), _self.Prism;
	}();"undefined" != typeof module && module.exports && (module.exports = Prism), "undefined" != typeof global && (global.Prism = Prism);
	Prism.languages.markup = { comment: /<!--[\w\W]*?-->/, prolog: /<\?[\w\W]+?\?>/, doctype: /<!DOCTYPE[\w\W]+?>/, cdata: /<!\[CDATA\[[\w\W]*?]]>/i, tag: { pattern: /<\/?(?!\d)[^\s>\/=.$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, inside: { tag: { pattern: /^<\/?[^\s>\/]+/i, inside: { punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/ } }, "attr-value": { pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i, inside: { punctuation: /[=>"']/ } }, punctuation: /\/?>/, "attr-name": { pattern: /[^\s>\/]+/, inside: { namespace: /^[^\s>\/:]+:/ } } } }, entity: /&#?[\da-z]{1,8};/i }, Prism.hooks.add("wrap", function (a) {
	  "entity" === a.type && (a.attributes.title = a.content.replace(/&amp;/, "&"));
	}), Prism.languages.xml = Prism.languages.markup, Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup;
	Prism.languages.css = { comment: /\/\*[\w\W]*?\*\//, atrule: { pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i, inside: { rule: /@[\w-]+/ } }, url: /url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i, selector: /[^\{\}\s][^\{\};]*?(?=\s*\{)/, string: /("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/, property: /(\b|\B)[\w-]+(?=\s*:)/i, important: /\B!important\b/i, "function": /[-a-z0-9]+(?=\()/i, punctuation: /[(){};:]/ }, Prism.languages.css.atrule.inside.rest = Prism.util.clone(Prism.languages.css), Prism.languages.markup && (Prism.languages.insertBefore("markup", "tag", { style: { pattern: /(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i, lookbehind: !0, inside: Prism.languages.css, alias: "language-css" } }), Prism.languages.insertBefore("inside", "attr-value", { "style-attr": { pattern: /\s*style=("|').*?\1/i, inside: { "attr-name": { pattern: /^\s*style/i, inside: Prism.languages.markup.tag.inside }, punctuation: /^\s*=\s*['"]|['"]\s*$/, "attr-value": { pattern: /.+/i, inside: Prism.languages.css } }, alias: "language-css" } }, Prism.languages.markup.tag));
	Prism.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\w\W]*?\*\//, lookbehind: !0 }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: !0 }], string: { pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: !0 }, "class-name": { pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i, lookbehind: !0, inside: { punctuation: /(\.|\\)/ } }, keyword: /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, "boolean": /\b(true|false)\b/, "function": /[a-z0-9_]+(?=\()/i, number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation: /[{}[\];(),.:]/ };
	Prism.languages.javascript = Prism.languages.extend("clike", { keyword: /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/, number: /\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/, "function": /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i }), Prism.languages.insertBefore("javascript", "keyword", { regex: { pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/, lookbehind: !0, greedy: !0 } }), Prism.languages.insertBefore("javascript", "class-name", { "template-string": { pattern: /`(?:\\\\|\\?[^\\])*?`/, greedy: !0, inside: { interpolation: { pattern: /\$\{[^}]+\}/, inside: { "interpolation-punctuation": { pattern: /^\$\{|\}$/, alias: "punctuation" }, rest: Prism.languages.javascript } }, string: /[\s\S]+/ } } }), Prism.languages.markup && Prism.languages.insertBefore("markup", "tag", { script: { pattern: /(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind: !0, inside: Prism.languages.javascript, alias: "language-javascript" } }), Prism.languages.js = Prism.languages.javascript;
	Prism.languages.aspnet = Prism.languages.extend("markup", { "page-directive tag": { pattern: /<%\s*@.*%>/i, inside: { "page-directive tag": /<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i, rest: Prism.languages.markup.tag.inside } }, "directive tag": { pattern: /<%.*%>/i, inside: { "directive tag": /<%\s*?[$=%#:]{0,2}|%>/i, rest: Prism.languages.csharp } } }), Prism.languages.aspnet.tag.pattern = /<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i, Prism.languages.insertBefore("inside", "punctuation", { "directive tag": Prism.languages.aspnet["directive tag"] }, Prism.languages.aspnet.tag.inside["attr-value"]), Prism.languages.insertBefore("aspnet", "comment", { "asp comment": /<%--[\w\W]*?--%>/ }), Prism.languages.insertBefore("aspnet", Prism.languages.javascript ? "script" : "tag", { "asp script": { pattern: /(<script(?=.*runat=['"]?server['"]?)[\w\W]*?>)[\w\W]*?(?=<\/script>)/i, lookbehind: !0, inside: Prism.languages.csharp || {} } });
	!function (e) {
	  var t = { variable: [{ pattern: /\$?\(\([\w\W]+?\)\)/, inside: { variable: [{ pattern: /(^\$\(\([\w\W]+)\)\)/, lookbehind: !0 }, /^\$\(\(/], number: /\b-?(?:0x[\dA-Fa-f]+|\d*\.?\d+(?:[Ee]-?\d+)?)\b/, operator: /--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/, punctuation: /\(\(?|\)\)?|,|;/ } }, { pattern: /\$\([^)]+\)|`[^`]+`/, inside: { variable: /^\$\(|^`|\)$|`$/ } }, /\$(?:[a-z0-9_#\?\*!@]+|\{[^}]+\})/i] };e.languages.bash = { shebang: { pattern: /^#!\s*\/bin\/bash|^#!\s*\/bin\/sh/, alias: "important" }, comment: { pattern: /(^|[^"{\\])#.*/, lookbehind: !0 }, string: [{ pattern: /((?:^|[^<])<<\s*)(?:"|')?(\w+?)(?:"|')?\s*\r?\n(?:[\s\S])*?\r?\n\2/g, lookbehind: !0, greedy: !0, inside: t }, { pattern: /(["'])(?:\\\\|\\?[^\\])*?\1/g, greedy: !0, inside: t }], variable: t.variable, "function": { pattern: /(^|\s|;|\||&)(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|\s|;|\||&)/, lookbehind: !0 }, keyword: { pattern: /(^|\s|;|\||&)(?:let|:|\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|\s|;|\||&)/, lookbehind: !0 }, "boolean": { pattern: /(^|\s|;|\||&)(?:true|false)(?=$|\s|;|\||&)/, lookbehind: !0 }, operator: /&&?|\|\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/, punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];]/ };var a = t.variable[1].inside;a["function"] = e.languages.bash["function"], a.keyword = e.languages.bash.keyword, a.boolean = e.languages.bash.boolean, a.operator = e.languages.bash.operator, a.punctuation = e.languages.bash.punctuation;
	}(Prism);
	Prism.languages.c = Prism.languages.extend("clike", { keyword: /\b(asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/, operator: /\-[>-]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|?\||[~^%?*\/]/, number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)[ful]*\b/i }), Prism.languages.insertBefore("c", "string", { macro: { pattern: /(^\s*)#\s*[a-z]+([^\r\n\\]|\\.|\\(?:\r\n?|\n))*/im, lookbehind: !0, alias: "property", inside: { string: { pattern: /(#\s*include\s*)(<.+?>|("|')(\\?.)+?\3)/, lookbehind: !0 }, directive: { pattern: /(#\s*)\b(define|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\b/, lookbehind: !0, alias: "keyword" } } }, constant: /\b(__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|stdin|stdout|stderr)\b/ }), delete Prism.languages.c["class-name"], delete Prism.languages.c["boolean"];
	Prism.languages.csharp = Prism.languages.extend("clike", { keyword: /\b(abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while|add|alias|ascending|async|await|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|where|yield)\b/, string: [/@("|')(\1\1|\\\1|\\?(?!\1)[\s\S])*\1/, /("|')(\\?.)*?\1/], number: /\b-?(0x[\da-f]+|\d*\.?\d+f?)\b/i }), Prism.languages.insertBefore("csharp", "keyword", { "generic-method": { pattern: /[a-z0-9_]+\s*<[^>\r\n]+?>\s*(?=\()/i, alias: "function", inside: { keyword: Prism.languages.csharp.keyword, punctuation: /[<>(),.:]/ } }, preprocessor: { pattern: /(^\s*)#.*/m, lookbehind: !0, alias: "property", inside: { directive: { pattern: /(\s*#)\b(define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\b/, lookbehind: !0, alias: "keyword" } } } });
	Prism.languages.cpp = Prism.languages.extend("c", { keyword: /\b(alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/, "boolean": /\b(true|false)\b/, operator: /[-+]{1,2}|!=?|<{1,2}=?|>{1,2}=?|\->|:{1,2}|={1,2}|\^|~|%|&{1,2}|\|?\||\?|\*|\/|\b(and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/ }), Prism.languages.insertBefore("cpp", "keyword", { "class-name": { pattern: /(class\s+)[a-z0-9_]+/i, lookbehind: !0 } });
	!function (e) {
	  e.languages.ruby = e.languages.extend("clike", { comment: /#(?!\{[^\r\n]*?\}).*/, keyword: /\b(alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\b/ });var n = { pattern: /#\{[^}]+\}/, inside: { delimiter: { pattern: /^#\{|\}$/, alias: "tag" }, rest: e.util.clone(e.languages.ruby) } };e.languages.insertBefore("ruby", "keyword", { regex: [{ pattern: /%r([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\((?:[^()\\]|\\[\s\S])*\)[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r\[(?:[^\[\]\\]|\\[\s\S])*\][gim]{0,3}/, inside: { interpolation: n } }, { pattern: /%r<(?:[^<>\\]|\\[\s\S])*>[gim]{0,3}/, inside: { interpolation: n } }, { pattern: /(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\r\n])+\/[gim]{0,3}(?=\s*($|[\r\n,.;})]))/, lookbehind: !0 }], variable: /[@$]+[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\b)/, symbol: /:[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\b)/ }), e.languages.insertBefore("ruby", "number", { builtin: /\b(Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|File|Fixnum|Fload|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/, constant: /\b[A-Z][a-zA-Z_0-9]*(?:[?!]|\b)/ }), e.languages.ruby.string = [{ pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\((?:[^()\\]|\\[\s\S])*\)/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?\[(?:[^\[\]\\]|\\[\s\S])*\]/, inside: { interpolation: n } }, { pattern: /%[qQiIwWxs]?<(?:[^<>\\]|\\[\s\S])*>/, inside: { interpolation: n } }, { pattern: /("|')(#\{[^}]+\}|\\(?:\r?\n|\r)|\\?.)*?\1/, inside: { interpolation: n } }];
	}(Prism);
	Prism.languages.css.selector = { pattern: /[^\{\}\s][^\{\}]*(?=\s*\{)/, inside: { "pseudo-element": /:(?:after|before|first-letter|first-line|selection)|::[-\w]+/, "pseudo-class": /:[-\w]+(?:\(.*\))?/, "class": /\.[-:\.\w]+/, id: /#[-:\.\w]+/ } }, Prism.languages.insertBefore("css", "function", { hexcode: /#[\da-f]{3,6}/i, entity: /\\[\da-f]{1,8}/i, number: /[\d%\.]+/ });
	Prism.languages.git = { comment: /^#.*/m, deleted: /^[-–].*/m, inserted: /^\+.*/m, string: /("|')(\\?.)*?\1/m, command: { pattern: /^.*\$ git .*$/m, inside: { parameter: /\s(--|-)\w+/m } }, coord: /^@@.*@@$/m, commit_sha1: /^commit \w{40}$/m };
	Prism.languages.go = Prism.languages.extend("clike", { keyword: /\b(break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/, builtin: /\b(bool|byte|complex(64|128)|error|float(32|64)|rune|string|u?int(8|16|32|64|)|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(ln)?|real|recover)\b/, "boolean": /\b(_|iota|nil|true|false)\b/, operator: /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./, number: /\b(-?(0x[a-f\d]+|(\d+\.?\d*|\.\d+)(e[-+]?\d+)?)i?)\b/i, string: /("|'|`)(\\?.|\r|\n)*?\1/ }), delete Prism.languages.go["class-name"];
	Prism.languages.java = Prism.languages.extend("clike", { keyword: /\b(abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\b/, number: /\b0b[01]+\b|\b0x[\da-f]*\.?[\da-fp\-]+\b|\b\d*\.?\d+(?:e[+-]?\d+)?[df]?\b/i, operator: { pattern: /(^|[^.])(?:\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\|[|=]?|\*=?|\/=?|%=?|\^=?|[?:~])/m, lookbehind: !0 } }), Prism.languages.insertBefore("java", "function", { annotation: { alias: "punctuation", pattern: /(^|[^.])@\w+/, lookbehind: !0 } });
	Prism.languages.json = { property: /".*?"(?=\s*:)/gi, string: /"(?!:)(\\?[^"])*?"(?!:)/g, number: /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/g, punctuation: /[{}[\]);,]/g, operator: /:/g, "boolean": /\b(true|false)\b/gi, "null": /\bnull\b/gi }, Prism.languages.jsonp = Prism.languages.json;
	Prism.languages.less = Prism.languages.extend("css", { comment: [/\/\*[\w\W]*?\*\//, { pattern: /(^|[^\\])\/\/.*/, lookbehind: !0 }], atrule: { pattern: /@[\w-]+?(?:\([^{}]+\)|[^(){};])*?(?=\s*\{)/i, inside: { punctuation: /[:()]/ } }, selector: { pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\([^{}]*\)|[^{};@])*?(?=\s*\{)/, inside: { variable: /@+[\w-]+/ } }, property: /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/i, punctuation: /[{}();:,]/, operator: /[+\-*\/]/ }), Prism.languages.insertBefore("less", "punctuation", { "function": Prism.languages.less.function }), Prism.languages.insertBefore("less", "property", { variable: [{ pattern: /@[\w-]+\s*:/, inside: { punctuation: /:/ } }, /@@?[\w-]+/], "mixin-usage": { pattern: /([{;]\s*)[.#](?!\d)[\w-]+.*?(?=[(;])/, lookbehind: !0, alias: "function" } });
	Prism.languages.markdown = Prism.languages.extend("markup", {}), Prism.languages.insertBefore("markdown", "prolog", { blockquote: { pattern: /^>(?:[\t ]*>)*/m, alias: "punctuation" }, code: [{ pattern: /^(?: {4}|\t).+/m, alias: "keyword" }, { pattern: /``.+?``|`[^`\n]+`/, alias: "keyword" }], title: [{ pattern: /\w+.*(?:\r?\n|\r)(?:==+|--+)/, alias: "important", inside: { punctuation: /==+$|--+$/ } }, { pattern: /(^\s*)#+.+/m, lookbehind: !0, alias: "important", inside: { punctuation: /^#+|#+$/ } }], hr: { pattern: /(^\s*)([*-])([\t ]*\2){2,}(?=\s*$)/m, lookbehind: !0, alias: "punctuation" }, list: { pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m, lookbehind: !0, alias: "punctuation" }, "url-reference": { pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/, inside: { variable: { pattern: /^(!?\[)[^\]]+/, lookbehind: !0 }, string: /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/, punctuation: /^[\[\]!:]|[<>]/ }, alias: "url" }, bold: { pattern: /(^|[^\\])(\*\*|__)(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^\*\*|^__|\*\*$|__$/ } }, italic: { pattern: /(^|[^\\])([*_])(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^[*_]|[*_]$/ } }, url: { pattern: /!?\[[^\]]+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)| ?\[[^\]\n]*\])/, inside: { variable: { pattern: /(!?\[)[^\]]+(?=\]$)/, lookbehind: !0 }, string: { pattern: /"(?:\\.|[^"\\])*"(?=\)$)/ } } } }), Prism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic), Prism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold);
	Prism.languages.perl = { comment: [{ pattern: /(^\s*)=\w+[\s\S]*?=cut.*/m, lookbehind: !0 }, { pattern: /(^|[^\\$])#.*/, lookbehind: !0 }], string: [/\b(?:q|qq|qx|qw)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1/, /\b(?:q|qq|qx|qw)\s+([a-zA-Z0-9])(?:[^\\]|\\[\s\S])*?\1/, /\b(?:q|qq|qx|qw)\s*\((?:[^()\\]|\\[\s\S])*\)/, /\b(?:q|qq|qx|qw)\s*\{(?:[^{}\\]|\\[\s\S])*\}/, /\b(?:q|qq|qx|qw)\s*\[(?:[^[\]\\]|\\[\s\S])*\]/, /\b(?:q|qq|qx|qw)\s*<(?:[^<>\\]|\\[\s\S])*>/, /("|`)(?:[^\\]|\\[\s\S])*?\1/, /'(?:[^'\\\r\n]|\\.)*'/], regex: [/\b(?:m|qr)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\1[msixpodualngc]*/, /\b(?:m|qr)\s+([a-zA-Z0-9])(?:[^\\]|\\.)*?\1[msixpodualngc]*/, /\b(?:m|qr)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngc]*/, /\b(?:m|qr)\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngc]*/, /\b(?:m|qr)\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngc]*/, /\b(?:m|qr)\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngc]*/, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*([^a-zA-Z0-9\s\{\(\[<])(?:[^\\]|\\[\s\S])*?\2(?:[^\\]|\\[\s\S])*?\2[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s+([a-zA-Z0-9])(?:[^\\]|\\[\s\S])*?\2(?:[^\\]|\\[\s\S])*?\2[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\((?:[^()\\]|\\[\s\S])*\)\s*\((?:[^()\\]|\\[\s\S])*\)[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\{(?:[^{}\\]|\\[\s\S])*\}\s*\{(?:[^{}\\]|\\[\s\S])*\}[msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*\[(?:[^[\]\\]|\\[\s\S])*\]\s*\[(?:[^[\]\\]|\\[\s\S])*\][msixpodualngcer]*/, lookbehind: !0 }, { pattern: /(^|[^-]\b)(?:s|tr|y)\s*<(?:[^<>\\]|\\[\s\S])*>\s*<(?:[^<>\\]|\\[\s\S])*>[msixpodualngcer]*/, lookbehind: !0 }, /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor|x)\b))/], variable: [/[&*$@%]\{\^[A-Z]+\}/, /[&*$@%]\^[A-Z_]/, /[&*$@%]#?(?=\{)/, /[&*$@%]#?((::)*'?(?!\d)[\w$]+)+(::)*/i, /[&*$@%]\d+/, /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/], filehandle: { pattern: /<(?![<=])\S*>|\b_\b/, alias: "symbol" }, vstring: { pattern: /v\d+(\.\d+)*|\d+(\.\d+){2,}/, alias: "string" }, "function": { pattern: /sub [a-z0-9_]+/i, inside: { keyword: /sub/ } }, keyword: /\b(any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|say|state|sub|switch|undef|unless|until|use|when|while)\b/, number: /\b-?(0x[\dA-Fa-f](_?[\dA-Fa-f])*|0b[01](_?[01])*|(\d(_?\d)*)?\.?\d(_?\d)*([Ee][+-]?\d+)?)\b/, operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(lt|gt|le|ge|eq|ne|cmp|not|and|or|xor)\b/, punctuation: /[{}[\];(),:]/ };
	Prism.languages.php = Prism.languages.extend("clike", { keyword: /\b(and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\b/i, constant: /\b[A-Z0-9_]{2,}\b/, comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0 } }), Prism.languages.insertBefore("php", "class-name", { "shell-comment": { pattern: /(^|[^\\])#.*/, lookbehind: !0, alias: "comment" } }), Prism.languages.insertBefore("php", "keyword", { delimiter: /\?>|<\?(?:php)?/i, variable: /\$\w+\b/i, "package": { pattern: /(\\|namespace\s+|use\s+)[\w\\]+/, lookbehind: !0, inside: { punctuation: /\\/ } } }), Prism.languages.insertBefore("php", "operator", { property: { pattern: /(->)[\w]+/, lookbehind: !0 } }), Prism.languages.markup && (Prism.hooks.add("before-highlight", function (e) {
	  "php" === e.language && (e.tokenStack = [], e.backupCode = e.code, e.code = e.code.replace(/(?:<\?php|<\?)[\w\W]*?(?:\?>)/gi, function (a) {
	    return e.tokenStack.push(a), "{{{PHP" + e.tokenStack.length + "}}}";
	  }));
	}), Prism.hooks.add("before-insert", function (e) {
	  "php" === e.language && (e.code = e.backupCode, delete e.backupCode);
	}), Prism.hooks.add("after-highlight", function (e) {
	  if ("php" === e.language) {
	    for (var a, n = 0; a = e.tokenStack[n]; n++) {
	      e.highlightedCode = e.highlightedCode.replace("{{{PHP" + (n + 1) + "}}}", Prism.highlight(a, e.grammar, "php").replace(/\$/g, "$$$$"));
	    }e.element.innerHTML = e.highlightedCode;
	  }
	}), Prism.hooks.add("wrap", function (e) {
	  "php" === e.language && "markup" === e.type && (e.content = e.content.replace(/(\{\{\{PHP[0-9]+\}\}\})/g, '<span class="token php">$1</span>'));
	}), Prism.languages.insertBefore("php", "comment", { markup: { pattern: /<[^?]\/?(.*?)>/, inside: Prism.languages.markup }, php: /\{\{\{PHP[0-9]+\}\}\}/ }));
	Prism.languages.insertBefore("php", "variable", { "this": /\$this\b/, global: /\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)/, scope: { pattern: /\b[\w\\]+::/, inside: { keyword: /(static|self|parent)/, punctuation: /(::|\\)/ } } });
	Prism.languages.python = { "triple-quoted-string": { pattern: /"""[\s\S]+?"""|'''[\s\S]+?'''/, alias: "string" }, comment: { pattern: /(^|[^\\])#.*/, lookbehind: !0 }, string: { pattern: /("|')(?:\\\\|\\?[^\\\r\n])*?\1/, greedy: !0 }, "function": { pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_][a-zA-Z0-9_]*(?=\()/g, lookbehind: !0 }, "class-name": { pattern: /(\bclass\s+)[a-z0-9_]+/i, lookbehind: !0 }, keyword: /\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|pass|print|raise|return|try|while|with|yield)\b/, "boolean": /\b(?:True|False)\b/, number: /\b-?(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i, operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:or|and|not)\b/, punctuation: /[{}[\];(),.:]/ };
	!function (a) {
	  var e = a.util.clone(a.languages.javascript);a.languages.jsx = a.languages.extend("markup", e), a.languages.jsx.tag.pattern = /<\/?[\w\.:-]+\s*(?:\s+[\w\.:-]+(?:=(?:("|')(\\?[\w\W])*?\1|[^\s'">=]+|(\{[\w\W]*?\})))?\s*)*\/?>/i, a.languages.jsx.tag.inside["attr-value"].pattern = /=[^\{](?:('|")[\w\W]*?(\1)|[^\s>]+)/i;var s = a.util.clone(a.languages.jsx);delete s.punctuation, s = a.languages.insertBefore("jsx", "operator", { punctuation: /=(?={)|[{}[\];(),.:]/ }, { jsx: s }), a.languages.insertBefore("inside", "attr-value", { script: { pattern: /=(\{(?:\{[^}]*\}|[^}])+\})/i, inside: s, alias: "language-javascript" } }, a.languages.jsx.tag);
	}(Prism);
	Prism.languages.scss = Prism.languages.extend("css", { comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|\/\/.*)/, lookbehind: !0 }, atrule: { pattern: /@[\w-]+(?:\([^()]+\)|[^(])*?(?=\s+[{;])/, inside: { rule: /@[\w-]+/ } }, url: /(?:[-a-z]+-)*url(?=\()/i, selector: { pattern: /(?=\S)[^@;\{\}\(\)]?([^@;\{\}\(\)]|&|#\{\$[-_\w]+\})+(?=\s*\{(\}|\s|[^\}]+(:|\{)[^\}]+))/m, inside: { placeholder: /%[-_\w]+/ } } }), Prism.languages.insertBefore("scss", "atrule", { keyword: [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, { pattern: /( +)(?:from|through)(?= )/, lookbehind: !0 }] }), Prism.languages.insertBefore("scss", "property", { variable: /\$[-_\w]+|#\{\$[-_\w]+\}/ }), Prism.languages.insertBefore("scss", "function", { placeholder: { pattern: /%[-_\w]+/, alias: "selector" }, statement: /\B!(?:default|optional)\b/i, "boolean": /\b(?:true|false)\b/, "null": /\bnull\b/, operator: { pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|or|not)(?=\s)/, lookbehind: !0 } }), Prism.languages.scss.atrule.inside.rest = Prism.util.clone(Prism.languages.scss);
	Prism.languages.sql = { comment: { pattern: /(^|[^\\])(?:\/\*[\w\W]*?\*\/|(?:--|\/\/|#).*)/, lookbehind: !0 }, string: { pattern: /(^|[^@\\])("|')(?:\\?[\s\S])*?\2/, lookbehind: !0 }, variable: /@[\w.$]+|@("|'|`)(?:\\?[\s\S])+?\1/, "function": /\b(?:COUNT|SUM|AVG|MIN|MAX|FIRST|LAST|UCASE|LCASE|MID|LEN|ROUND|NOW|FORMAT)(?=\s*\()/i, keyword: /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR VARYING|CHARACTER (?:SET|VARYING)|CHARSET|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COLUMNS|COMMENT|COMMIT|COMMITTED|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|DATA(?:BASES?)?|DATETIME|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE(?: PRECISION)?|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE KEY|ELSE|ENABLE|ENCLOSED BY|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPE(?:D BY)?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTO|INVOKER|ISOLATION LEVEL|JOIN|KEYS?|KILL|LANGUAGE SQL|LAST|LEFT|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MODIFIES SQL DATA|MODIFY|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL(?: CHAR VARYING| CHARACTER(?: VARYING)?| VARCHAR)?|NATURAL|NCHAR(?: VARCHAR)?|NEXT|NO(?: SQL|CHECK|CYCLE)?|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READ(?:S SQL DATA|TEXT)?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEATABLE|REPLICATION|REQUIRE|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE MODE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|START(?:ING BY)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED BY|TEXT(?:SIZE)?|THEN|TIMESTAMP|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNPIVOT|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?)\b/i, "boolean": /\b(?:TRUE|FALSE|NULL)\b/i, number: /\b-?(?:0x)?\d*\.?[\da-f]+\b/, operator: /[-+*\/=%^~]|&&?|\|?\||!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i, punctuation: /[;[\]()`,.]/ };
	Prism.languages.swift = Prism.languages.extend("clike", { string: { pattern: /("|')(\\(?:\((?:[^()]|\([^)]+\))+\)|\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: !0, inside: { interpolation: { pattern: /\\\((?:[^()]|\([^)]+\))+\)/, inside: { delimiter: { pattern: /^\\\(|\)$/, alias: "variable" } } } } }, keyword: /\b(as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|Protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\b/, number: /\b([\d_]+(\.[\de_]+)?|0x[a-f0-9_]+(\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i, constant: /\b(nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/, atrule: /@\b(IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\b/, builtin: /\b([A-Z]\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\b/ }), Prism.languages.swift.string.inside.interpolation.inside.rest = Prism.util.clone(Prism.languages.swift);
	!function () {
	  "undefined" != typeof self && self.Prism && self.document && Prism.hooks.add("complete", function (e) {
	    if (e.code) {
	      var t = e.element.parentNode,
	          s = /\s*\bline-numbers\b\s*/;if (t && /pre/i.test(t.nodeName) && (s.test(t.className) || s.test(e.element.className)) && !e.element.querySelector(".line-numbers-rows")) {
	        s.test(e.element.className) && (e.element.className = e.element.className.replace(s, "")), s.test(t.className) || (t.className += " line-numbers");var n,
	            a = e.code.match(/\n(?!$)/g),
	            l = a ? a.length + 1 : 1,
	            m = new Array(l + 1);m = m.join("<span></span>"), n = document.createElement("span"), n.className = "line-numbers-rows", n.innerHTML = m, t.hasAttribute("data-start") && (t.style.counterReset = "linenumber " + (parseInt(t.getAttribute("data-start"), 10) - 1)), e.element.appendChild(n);
	      }
	    }
	  });
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * ghostHunter - 0.3.1
	 * Copyright (C) 2014 Jamal Neufeld (jamal@i11u.me)
	 * MIT Licensed
	 */
	(function ($) {
	
		/* The lunr 0.7.0 library is included here to perform the fulltext searching. lunr is copyright (C) 2016 Oliver Nightingale. MIT Licensed */
		var lunr = function lunr(t) {
			var e = new lunr.Index();return e.pipeline.add(lunr.stopWordFilter, lunr.stemmer), t && t.call(e, e), e;
		};lunr.version = "0.4.3", "undefined" != typeof module && (module.exports = lunr), lunr.utils = {}, lunr.utils.warn = function (t) {
			return function (e) {
				t.console && console.warn && console.warn(e);
			};
		}(this), lunr.utils.zeroFillArray = function () {
			var t = [0];return function (e) {
				for (; e > t.length;) {
					t = t.concat(t);
				}return t.slice(0, e);
			};
		}(), lunr.EventEmitter = function () {
			this.events = {};
		}, lunr.EventEmitter.prototype.addListener = function () {
			var t = Array.prototype.slice.call(arguments),
			    e = t.pop(),
			    n = t;if ("function" != typeof e) throw new TypeError("last argument must be a function");n.forEach(function (t) {
				this.hasHandler(t) || (this.events[t] = []), this.events[t].push(e);
			}, this);
		}, lunr.EventEmitter.prototype.removeListener = function (t, e) {
			if (this.hasHandler(t)) {
				var n = this.events[t].indexOf(e);this.events[t].splice(n, 1), this.events[t].length || delete this.events[t];
			}
		}, lunr.EventEmitter.prototype.emit = function (t) {
			if (this.hasHandler(t)) {
				var e = Array.prototype.slice.call(arguments, 1);this.events[t].forEach(function (t) {
					t.apply(void 0, e);
				});
			}
		}, lunr.EventEmitter.prototype.hasHandler = function (t) {
			return t in this.events;
		}, lunr.tokenizer = function (t) {
			if (!arguments.length || null == t || void 0 == t) return [];if (Array.isArray(t)) return t.map(function (t) {
				return t.toLowerCase();
			});for (var e = ("" + t).replace(/^\s+/, ""), n = e.length - 1; n >= 0; n--) {
				if (/\S/.test(e.charAt(n))) {
					e = e.substring(0, n + 1);break;
				}
			}return e.split(/\s+/).map(function (t) {
				return t.replace(/^\W+/, "").replace(/\W+$/, "").toLowerCase();
			});
		}, lunr.Pipeline = function () {
			this._stack = [];
		}, lunr.Pipeline.registeredFunctions = {}, lunr.Pipeline.registerFunction = function (t, e) {
			e in this.registeredFunctions && lunr.utils.warn("Overwriting existing registered function: " + e), t.label = e, lunr.Pipeline.registeredFunctions[t.label] = t;
		}, lunr.Pipeline.warnIfFunctionNotRegistered = function (t) {
			var e = t.label && t.label in this.registeredFunctions;e || lunr.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n", t);
		}, lunr.Pipeline.load = function (t) {
			var e = new lunr.Pipeline();return t.forEach(function (t) {
				var n = lunr.Pipeline.registeredFunctions[t];if (!n) throw Error("Cannot load un-registered function: " + t);e.add(n);
			}), e;
		}, lunr.Pipeline.prototype.add = function () {
			var t = Array.prototype.slice.call(arguments);t.forEach(function (t) {
				lunr.Pipeline.warnIfFunctionNotRegistered(t), this._stack.push(t);
			}, this);
		}, lunr.Pipeline.prototype.after = function (t, e) {
			lunr.Pipeline.warnIfFunctionNotRegistered(e);var n = this._stack.indexOf(t) + 1;this._stack.splice(n, 0, e);
		}, lunr.Pipeline.prototype.before = function (t, e) {
			lunr.Pipeline.warnIfFunctionNotRegistered(e);var n = this._stack.indexOf(t);this._stack.splice(n, 0, e);
		}, lunr.Pipeline.prototype.remove = function (t) {
			var e = this._stack.indexOf(t);this._stack.splice(e, 1);
		}, lunr.Pipeline.prototype.run = function (t) {
			for (var e = [], n = t.length, r = this._stack.length, o = 0; n > o; o++) {
				for (var i = t[o], s = 0; r > s && (i = this._stack[s](i, o, t), void 0 !== i); s++) {}void 0 !== i && e.push(i);
			}return e;
		}, lunr.Pipeline.prototype.toJSON = function () {
			return this._stack.map(function (t) {
				return lunr.Pipeline.warnIfFunctionNotRegistered(t), t.label;
			});
		}, lunr.Vector = function (t) {
			this.elements = t;
		}, lunr.Vector.prototype.magnitude = function () {
			if (this._magnitude) return this._magnitude;for (var t, e = 0, n = this.elements, r = n.length, o = 0; r > o; o++) {
				t = n[o], e += t * t;
			}return this._magnitude = Math.sqrt(e);
		}, lunr.Vector.prototype.dot = function (t) {
			for (var e = this.elements, n = t.elements, r = e.length, o = 0, i = 0; r > i; i++) {
				o += e[i] * n[i];
			}return o;
		}, lunr.Vector.prototype.similarity = function (t) {
			return this.dot(t) / (this.magnitude() * t.magnitude());
		}, lunr.Vector.prototype.toArray = function () {
			return this.elements;
		}, lunr.SortedSet = function () {
			this.length = 0, this.elements = [];
		}, lunr.SortedSet.load = function (t) {
			var e = new this();return e.elements = t, e.length = t.length, e;
		}, lunr.SortedSet.prototype.add = function () {
			Array.prototype.slice.call(arguments).forEach(function (t) {
				~this.indexOf(t) || this.elements.splice(this.locationFor(t), 0, t);
			}, this), this.length = this.elements.length;
		}, lunr.SortedSet.prototype.toArray = function () {
			return this.elements.slice();
		}, lunr.SortedSet.prototype.map = function (t, e) {
			return this.elements.map(t, e);
		}, lunr.SortedSet.prototype.forEach = function (t, e) {
			return this.elements.forEach(t, e);
		}, lunr.SortedSet.prototype.indexOf = function (t, e, n) {
			var e = e || 0,
			    n = n || this.elements.length,
			    r = n - e,
			    o = e + Math.floor(r / 2),
			    i = this.elements[o];return 1 >= r ? i === t ? o : -1 : t > i ? this.indexOf(t, o, n) : i > t ? this.indexOf(t, e, o) : i === t ? o : void 0;
		}, lunr.SortedSet.prototype.locationFor = function (t, e, n) {
			var e = e || 0,
			    n = n || this.elements.length,
			    r = n - e,
			    o = e + Math.floor(r / 2),
			    i = this.elements[o];if (1 >= r) {
				if (i > t) return o;if (t > i) return o + 1;
			}return t > i ? this.locationFor(t, o, n) : i > t ? this.locationFor(t, e, o) : void 0;
		}, lunr.SortedSet.prototype.intersect = function (t) {
			for (var e = new lunr.SortedSet(), n = 0, r = 0, o = this.length, i = t.length, s = this.elements, l = t.elements;;) {
				if (n > o - 1 || r > i - 1) break;s[n] !== l[r] ? s[n] < l[r] ? n++ : s[n] > l[r] && r++ : (e.add(s[n]), n++, r++);
			}return e;
		}, lunr.SortedSet.prototype.clone = function () {
			var t = new lunr.SortedSet();return t.elements = this.toArray(), t.length = t.elements.length, t;
		}, lunr.SortedSet.prototype.union = function (t) {
			var e, n, r;return this.length >= t.length ? (e = this, n = t) : (e = t, n = this), r = e.clone(), r.add.apply(r, n.toArray()), r;
		}, lunr.SortedSet.prototype.toJSON = function () {
			return this.toArray();
		}, lunr.Index = function () {
			this._fields = [], this._ref = "id", this.pipeline = new lunr.Pipeline(), this.documentStore = new lunr.Store(), this.tokenStore = new lunr.TokenStore(), this.corpusTokens = new lunr.SortedSet(), this.eventEmitter = new lunr.EventEmitter(), this._idfCache = {}, this.on("add", "remove", "update", function () {
				this._idfCache = {};
			}.bind(this));
		}, lunr.Index.prototype.on = function () {
			var t = Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter, t);
		}, lunr.Index.prototype.off = function (t, e) {
			return this.eventEmitter.removeListener(t, e);
		}, lunr.Index.load = function (t) {
			t.version !== lunr.version && lunr.utils.warn("version mismatch: current " + lunr.version + " importing " + t.version);var e = new this();return e._fields = t.fields, e._ref = t.ref, e.documentStore = lunr.Store.load(t.documentStore), e.tokenStore = lunr.TokenStore.load(t.tokenStore), e.corpusTokens = lunr.SortedSet.load(t.corpusTokens), e.pipeline = lunr.Pipeline.load(t.pipeline), e;
		}, lunr.Index.prototype.field = function (t, e) {
			var e = e || {},
			    n = { name: t, boost: e.boost || 1 };return this._fields.push(n), this;
		}, lunr.Index.prototype.ref = function (t) {
			return this._ref = t, this;
		}, lunr.Index.prototype.add = function (t, e) {
			var n = {},
			    r = new lunr.SortedSet(),
			    o = t[this._ref],
			    e = void 0 === e ? !0 : e;this._fields.forEach(function (e) {
				var o = this.pipeline.run(lunr.tokenizer(t[e.name]));n[e.name] = o, lunr.SortedSet.prototype.add.apply(r, o);
			}, this), this.documentStore.set(o, r), lunr.SortedSet.prototype.add.apply(this.corpusTokens, r.toArray());for (var i = 0; r.length > i; i++) {
				var s = r.elements[i],
				    l = this._fields.reduce(function (t, e) {
					var r = n[e.name].length;if (!r) return t;var o = n[e.name].filter(function (t) {
						return t === s;
					}).length;return t + o / r * e.boost;
				}, 0);this.tokenStore.add(s, { ref: o, tf: l });
			}e && this.eventEmitter.emit("add", t, this);
		}, lunr.Index.prototype.remove = function (t, e) {
			var n = t[this._ref],
			    e = void 0 === e ? !0 : e;if (this.documentStore.has(n)) {
				var r = this.documentStore.get(n);this.documentStore.remove(n), r.forEach(function (t) {
					this.tokenStore.remove(t, n);
				}, this), e && this.eventEmitter.emit("remove", t, this);
			}
		}, lunr.Index.prototype.update = function (t, e) {
			var e = void 0 === e ? !0 : e;this.remove(t, !1), this.add(t, !1), e && this.eventEmitter.emit("update", t, this);
		}, lunr.Index.prototype.idf = function (t) {
			if (this._idfCache[t]) return this._idfCache[t];var e = this.tokenStore.count(t),
			    n = 1;return e > 0 && (n = 1 + Math.log(this.tokenStore.length / e)), this._idfCache[t] = n;
		}, lunr.Index.prototype.search = function (t) {
			var e = this.pipeline.run(lunr.tokenizer(t)),
			    n = lunr.utils.zeroFillArray(this.corpusTokens.length),
			    r = [],
			    o = this._fields.reduce(function (t, e) {
				return t + e.boost;
			}, 0),
			    i = e.some(function (t) {
				return this.tokenStore.has(t);
			}, this);if (!i) return [];e.forEach(function (t, e, i) {
				var s = 1 / i.length * this._fields.length * o,
				    l = this,
				    u = this.tokenStore.expand(t).reduce(function (e, r) {
					var o = l.corpusTokens.indexOf(r),
					    i = l.idf(r),
					    u = 1,
					    a = new lunr.SortedSet();if (r !== t) {
						var h = Math.max(3, r.length - t.length);u = 1 / Math.log(h);
					}return o > -1 && (n[o] = s * i * u), Object.keys(l.tokenStore.get(r)).forEach(function (t) {
						a.add(t);
					}), e.union(a);
				}, new lunr.SortedSet());r.push(u);
			}, this);var s = r.reduce(function (t, e) {
				return t.intersect(e);
			}),
			    l = new lunr.Vector(n);return s.map(function (t) {
				return { ref: t, score: l.similarity(this.documentVector(t)) };
			}, this).sort(function (t, e) {
				return e.score - t.score;
			});
		}, lunr.Index.prototype.documentVector = function (t) {
			for (var e = this.documentStore.get(t), n = e.length, r = lunr.utils.zeroFillArray(this.corpusTokens.length), o = 0; n > o; o++) {
				var i = e.elements[o],
				    s = this.tokenStore.get(i)[t].tf,
				    l = this.idf(i);r[this.corpusTokens.indexOf(i)] = s * l;
			}return new lunr.Vector(r);
		}, lunr.Index.prototype.toJSON = function () {
			return { version: lunr.version, fields: this._fields, ref: this._ref, documentStore: this.documentStore.toJSON(), tokenStore: this.tokenStore.toJSON(), corpusTokens: this.corpusTokens.toJSON(), pipeline: this.pipeline.toJSON() };
		}, lunr.Store = function () {
			this.store = {}, this.length = 0;
		}, lunr.Store.load = function (t) {
			var e = new this();return e.length = t.length, e.store = Object.keys(t.store).reduce(function (e, n) {
				return e[n] = lunr.SortedSet.load(t.store[n]), e;
			}, {}), e;
		}, lunr.Store.prototype.set = function (t, e) {
			this.store[t] = e, this.length = Object.keys(this.store).length;
		}, lunr.Store.prototype.get = function (t) {
			return this.store[t];
		}, lunr.Store.prototype.has = function (t) {
			return t in this.store;
		}, lunr.Store.prototype.remove = function (t) {
			this.has(t) && (delete this.store[t], this.length--);
		}, lunr.Store.prototype.toJSON = function () {
			return { store: this.store, length: this.length };
		}, lunr.stemmer = function () {
			var t = { ational: "ate", tional: "tion", enci: "ence", anci: "ance", izer: "ize", bli: "ble", alli: "al", entli: "ent", eli: "e", ousli: "ous", ization: "ize", ation: "ate", ator: "ate", alism: "al", iveness: "ive", fulness: "ful", ousness: "ous", aliti: "al", iviti: "ive", biliti: "ble", logi: "log" },
			    e = { icate: "ic", ative: "", alize: "al", iciti: "ic", ical: "ic", ful: "", ness: "" },
			    n = "[^aeiou]",
			    r = "[aeiouy]",
			    o = n + "[^aeiouy]*",
			    i = r + "[aeiou]*",
			    s = "^(" + o + ")?" + i + o,
			    l = "^(" + o + ")?" + i + o + "(" + i + ")?$",
			    u = "^(" + o + ")?" + i + o + i + o,
			    a = "^(" + o + ")?" + r;return function (n) {
				var i, h, c, p, f, d, v;if (3 > n.length) return n;if (c = n.substr(0, 1), "y" == c && (n = c.toUpperCase() + n.substr(1)), p = /^(.+?)(ss|i)es$/, f = /^(.+?)([^s])s$/, p.test(n) ? n = n.replace(p, "$1$2") : f.test(n) && (n = n.replace(f, "$1$2")), p = /^(.+?)eed$/, f = /^(.+?)(ed|ing)$/, p.test(n)) {
					var m = p.exec(n);p = RegExp(s), p.test(m[1]) && (p = /.$/, n = n.replace(p, ""));
				} else if (f.test(n)) {
					var m = f.exec(n);i = m[1], f = RegExp(a), f.test(i) && (n = i, f = /(at|bl|iz)$/, d = RegExp("([^aeiouylsz])\\1$"), v = RegExp("^" + o + r + "[^aeiouwxy]$"), f.test(n) ? n += "e" : d.test(n) ? (p = /.$/, n = n.replace(p, "")) : v.test(n) && (n += "e"));
				}if (p = /^(.+?)y$/, p.test(n)) {
					var m = p.exec(n);i = m[1], p = RegExp(a), p.test(i) && (n = i + "i");
				}if (p = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/, p.test(n)) {
					var m = p.exec(n);i = m[1], h = m[2], p = RegExp(s), p.test(i) && (n = i + t[h]);
				}if (p = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/, p.test(n)) {
					var m = p.exec(n);i = m[1], h = m[2], p = RegExp(s), p.test(i) && (n = i + e[h]);
				}if (p = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/, f = /^(.+?)(s|t)(ion)$/, p.test(n)) {
					var m = p.exec(n);i = m[1], p = RegExp(u), p.test(i) && (n = i);
				} else if (f.test(n)) {
					var m = f.exec(n);i = m[1] + m[2], f = RegExp(u), f.test(i) && (n = i);
				}if (p = /^(.+?)e$/, p.test(n)) {
					var m = p.exec(n);i = m[1], p = RegExp(u), f = RegExp(l), d = RegExp("^" + o + r + "[^aeiouwxy]$"), (p.test(i) || f.test(i) && !d.test(i)) && (n = i);
				}return p = /ll$/, f = RegExp(u), p.test(n) && f.test(n) && (p = /.$/, n = n.replace(p, "")), "y" == c && (n = c.toLowerCase() + n.substr(1)), n;
			};
		}(), lunr.Pipeline.registerFunction(lunr.stemmer, "stemmer"), lunr.stopWordFilter = function (t) {
			return -1 === lunr.stopWordFilter.stopWords.indexOf(t) ? t : void 0;
		}, lunr.stopWordFilter.stopWords = new lunr.SortedSet(), lunr.stopWordFilter.stopWords.length = 119, lunr.stopWordFilter.stopWords.elements = ["", "a", "able", "about", "across", "after", "all", "almost", "also", "am", "among", "an", "and", "any", "are", "as", "at", "be", "because", "been", "but", "by", "can", "cannot", "could", "dear", "did", "do", "does", "either", "else", "ever", "every", "for", "from", "get", "got", "had", "has", "have", "he", "her", "hers", "him", "his", "how", "however", "i", "if", "in", "into", "is", "it", "its", "just", "least", "let", "like", "likely", "may", "me", "might", "most", "must", "my", "neither", "no", "nor", "not", "of", "off", "often", "on", "only", "or", "other", "our", "own", "rather", "said", "say", "says", "she", "should", "since", "so", "some", "than", "that", "the", "their", "them", "then", "there", "these", "they", "this", "tis", "to", "too", "twas", "us", "wants", "was", "we", "were", "what", "when", "where", "which", "while", "who", "whom", "why", "will", "with", "would", "yet", "you", "your"], lunr.Pipeline.registerFunction(lunr.stopWordFilter, "stopWordFilter"), lunr.TokenStore = function () {
			this.root = { docs: {} }, this.length = 0;
		}, lunr.TokenStore.load = function (t) {
			var e = new this();return e.root = t.root, e.length = t.length, e;
		}, lunr.TokenStore.prototype.add = function (t, e, n) {
			var n = n || this.root,
			    r = t[0],
			    o = t.slice(1);return r in n || (n[r] = { docs: {} }), 0 === o.length ? (n[r].docs[e.ref] = e, this.length += 1, void 0) : this.add(o, e, n[r]);
		}, lunr.TokenStore.prototype.has = function (t) {
			if (!t) return !1;for (var e = this.root, n = 0; t.length > n; n++) {
				if (!e[t[n]]) return !1;e = e[t[n]];
			}return !0;
		}, lunr.TokenStore.prototype.getNode = function (t) {
			if (!t) return {};for (var e = this.root, n = 0; t.length > n; n++) {
				if (!e[t[n]]) return {};e = e[t[n]];
			}return e;
		}, lunr.TokenStore.prototype.get = function (t, e) {
			return this.getNode(t, e).docs || {};
		}, lunr.TokenStore.prototype.count = function (t, e) {
			return Object.keys(this.get(t, e)).length;
		}, lunr.TokenStore.prototype.remove = function (t, e) {
			if (t) {
				for (var n = this.root, r = 0; t.length > r; r++) {
					if (!(t[r] in n)) return;n = n[t[r]];
				}delete n.docs[e];
			}
		}, lunr.TokenStore.prototype.expand = function (t, e) {
			var n = this.getNode(t),
			    r = n.docs || {},
			    e = e || [];return Object.keys(r).length && e.push(t), Object.keys(n).forEach(function (n) {
				"docs" !== n && e.concat(this.expand(t + n, e));
			}, this), e;
		}, lunr.TokenStore.prototype.toJSON = function () {
			return { root: this.root, length: this.length };
		};
	
		//This is the main plugin definition
		$.fn.ghostHunter = function (options) {
	
			//Here we use jQuery's extend to set default values if they weren't set by the user
			var opts = $.extend({}, $.fn.ghostHunter.defaults, options);
			if (opts.results) {
				pluginMethods.init(this, opts);
				return pluginMethods;
			}
		};
	
		$.fn.ghostHunter.defaults = {
			results: false,
			onKeyUp: false,
			result_template: "<a href='{{link}}'><p><h2>{{title}}</h2><h4>{{prettyPubDate}}</h4></p></a>",
			info_template: "<p>Number of posts found: {{amount}}</p>",
			displaySearchInfo: true,
			zeroResultsInfo: true,
			before: false,
			onComplete: false
		};
	
		var prettyDate = function prettyDate(date) {
			var d = new Date(date);
			var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
			return d.getDate() + ' ' + monthNames[d.getMonth()] + ' ' + d.getFullYear();
		};
	
		var pluginMethods = {
	
			isInit: false,
	
			init: function init(target, opts) {
	
				var that = this;
				this.target = target;
				this.results = opts.results;
				this.blogData = {};
				this.result_template = opts.result_template;
				this.info_template = opts.info_template;
				this.zeroResultsInfo = opts.zeroResultsInfo;
				this.displaySearchInfo = opts.displaySearchInfo;
				this.before = opts.before;
				this.onComplete = opts.onComplete;
	
				//This is where we'll build the index for later searching. It's not a big deal to build it on every load as it takes almost no space without data
				this.index = lunr(function () {
					this.field('title', { boost: 10 });
					this.field('description');
					this.field('link');
					this.field('markdown', { boost: 5 });
					this.field('pubDate');
					this.field('tag');
					this.ref('id');
				});
	
				target.focus(function () {
					that.loadAPI();
				});
	
				target.closest("form").submit(function (e) {
					e.preventDefault();
					that.find(target.val());
				});
	
				if (opts.onKeyUp) {
					that.loadAPI();
					target.keyup(function () {
						that.find(target.val());
					});
				}
			},
	
			loadAPI: function loadAPI() {
	
				if (this.isInit) return false;
	
				/*	Here we load all of the blog posts to the index.
	   	This function will not call on load to avoid unnecessary heavy
	   	operations on a page if a visitor never ends up searching anything. */
	
				var index = this.index,
				    blogData = this.blogData;
	
				$.get(ghost.url.api('posts', { limit: "all", include: "tags" })).done(function (data) {
					var searchData = data.posts;
					searchData.forEach(function (arrayItem) {
						var tag_arr = arrayItem.tags.map(function (v) {
							return v.name; // `tag` object has an `name` property which is the value of tag. If you also want other info, check API and get that property
						});
						var category = tag_arr.join(", ");
						if (category.length < 1) {
							category = "undefined";
						}
						var parsedData = {
							id: String(arrayItem.id),
							title: String(arrayItem.title),
							description: String(arrayItem.meta_description),
							markdown: String(arrayItem.markdown),
							pubDate: String(arrayItem.created_at),
							tag: category,
							link: String(arrayItem.url)
						};
	
						parsedData.prettyPubDate = prettyDate(parsedData.pubDate);
						var tempdate = prettyDate(parsedData.pubDate);
	
						index.add(parsedData);
						blogData[arrayItem.id] = { title: arrayItem.title, description: arrayItem.meta_description, pubDate: tempdate, link: arrayItem.url };
					});
				});
	
				this.isInit = true;
			},
	
			find: function find(value) {
				var searchResult = this.index.search(value);
				var results = $(this.results);
				var resultsData = [];
				results.empty();
	
				if (this.before) {
					this.before();
				};
	
				if (this.zeroResultsInfo || searchResult.length > 0) {
					if (this.displaySearchInfo) results.append(this.format(this.info_template, { "amount": searchResult.length }));
				}
	
				for (var i = 0; i < searchResult.length; i++) {
					var lunrref = searchResult[i].ref;
					var postData = this.blogData[lunrref];
					results.append(this.format(this.result_template, postData));
					resultsData.push(postData);
				}
	
				if (this.onComplete) {
					this.onComplete(resultsData);
				};
			},
	
			clear: function clear() {
				$(this.results).empty();
				this.target.val("");
			},
	
			format: function format(t, d) {
				return t.replace(/{{([^{}]*)}}/g, function (a, b) {
					var r = d[b];
					return typeof r === 'string' || typeof r === 'number' ? r : a;
				});
			}
		};
	})(jQuery);

/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
	* @package godofredoninja
	* Share social media
	*/
	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GodoShare = function () {
		function GodoShare(elem) {
			_classCallCheck(this, GodoShare);
	
			this.elem = elem;
		}
	
		/**
	    *  @function godoValue
	    *  @description Helper to get the attribute of a DOM element
	    *  @param {String} attr DOM element attribute
	    *  @returns {String|Empty} returns the attr value or empty string
	    */
	
	
		_createClass(GodoShare, [{
			key: 'godoValue',
			value: function godoValue(a) {
				var val = this.elem.attr('godo-' + a);
				return val === undefined || val === null ? false : val;
			}
	
			/**
	      * @event godoShare
	      * @description Main share event. Will pop a window or redirect to a link
	      */
	
		}, {
			key: 'godoShare',
			value: function godoShare() {
				var share_name = this.godoValue('share').toLowerCase(),
				    share_social = {
					facebook: {
						shareUrl: 'https://www.facebook.com/sharer/sharer.php',
						params: { u: this.godoValue('url') }
					},
					twitter: {
						shareUrl: 'https://twitter.com/intent/tweet/',
						params: {
							text: this.godoValue('title'),
							url: this.godoValue('url')
						}
					},
					reddit: {
						shareUrl: 'https://www.reddit.com/submit',
						params: { 'url': this.godoValue('url') }
					},
					pinterest: {
						shareUrl: 'https://www.pinterest.com/pin/create/button/',
						params: {
							url: this.godoValue('url'),
							description: this.godoValue('title')
						}
					},
					linkedin: {
						shareUrl: 'https://www.linkedin.com/shareArticle',
						params: {
							url: this.godoValue('url'),
							mini: true
						}
					},
					pocket: {
						shareUrl: 'https://getpocket.com/save',
						params: {
							url: this.godoValue('url')
						}
					}
				},
				    s = share_social[share_name];
	
				return s !== undefined ? this.godoPopup(s) : false;
			}
	
			/**
	      * @event godoPopup
	      * @param {Object} share
	      */
	
		}, {
			key: 'godoPopup',
			value: function godoPopup(share) {
				var p = share.params || {},
				    keys = Object.keys(p),
				    i,
				    str = keys.length > 0 ? '?' : '';
	
				for (i = 0; i < keys.length; i++) {
					if (str !== '?') {
						str += '&';
					}
					if (p[keys[i]]) {
						str += keys[i] + '=' + encodeURIComponent(p[keys[i]]);
					}
				}
	
				share.shareUrl += str;
	
				if (!share.isLink) {
					var popWidth = share.width || 600,
					    popHeight = share.height || 480,
					    left = window.innerWidth / 2 - popWidth / 2 + window.screenX,
					    top = window.innerHeight / 2 - popHeight / 2 + window.screenY,
					    popParams = 'scrollbars=no, width=' + popWidth + ', height=' + popHeight + ', top=' + top + ', left=' + left,
					    newWindow = window.open(share.shareUrl, '', popParams);
	
					if (window.focus) {
						newWindow.focus();
					}
				} else {
					window.location.href = share.shareUrl;
				}
			}
		}]);
	
		return GodoShare;
	}();
	
	module.exports = GodoShare;

/***/ },
/* 4 */
/***/ function(module, exports) {

	/*
	* @package godofredoninja
	*  Share count social media
	*/
	
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GodoShareCount = function () {
		function GodoShareCount(elem) {
			_classCallCheck(this, GodoShareCount);
	
			this.elem = elem;
			this.url = elem.attr('godo-url');
			this.total = 0;
		}
	
		/**
	  * @function convertNumber
	  * @description  Return rounded and pretty value of share count.
	  */
	
	
		_createClass(GodoShareCount, [{
			key: 'convertNumber',
			value: function convertNumber(n) {
				if (n >= 1000000000) return (n / 1000000000).toFixed(1) + 'G';
				if (n >= 1000000) return (n / 1000000).toFixed(1) + 'M';
				if (n >= 1000) return (n / 1000).toFixed(1) + 'K';
				return n;
			}
	
			/**
	   * @function updateCounter
	   * @description  adds all the number of shared pages
	   */
	
		}, {
			key: 'addCounter',
			value: function addCounter(n) {
				this.total = this.total + n;
			}
	
			/**
	   * @function updateCounter
	   * @description  update the number of shares.
	   */
	
		}, {
			key: 'updateCounter',
			value: function updateCounter() {
				this.elem.html('' + this.convertNumber(this.total));
			}
		}, {
			key: 'godoCount',
			value: function godoCount() {
				var _this = this;
	
				$.getJSON('https://graph.facebook.com/?id=' + encodeURIComponent(this.url) + '&callback=?', function (response) {
					if (response.shares === undefined) _this.addCounter(0);else _this.addCounter(response.shares);
					_this.updateCounter();
				});
			}
		}]);
	
		return GodoShareCount;
	}();
	
	module.exports = GodoShareCount;

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	/*
	* @package godofredoninja
	*  pagination
	*/
	
	$(document).on('ready', function () {
		var page = 2;
	
		var $pagination = $('#pagination'),
		    pageTotal = $pagination.attr('mapache-page'),
		    pageLimit = $pagination.attr('mapache-limit'),
		    urlPage = $('link[rel=canonical]').attr('href'),
		    $win = $(window);
	
		if (pageTotal >= page) {
			$('.pagination').css('display', 'block');
			// infiniteScroll();
		}
	
		/**
	  * @description call first getPost and add class for infinite-scroll
	  * @return {getPost} [returns the number of the page with articles]
	  */
		$pagination.on('click', function (e) {
			e.preventDefault();
			$pagination.addClass('infinite-scroll');
			getPost();
		});
	
		/**
	  * @description the second brings forward makes infinite scroll
	  * @return {getPost} [returns the number of the page with articles]
	  */
		$win.on('scroll', function () {
			if ($pagination.hasClass('infinite-scroll')) {
	
				if ($win.scrollTop() + $win.height() == $(document).height()) {
	
					if (page <= pageTotal) {
						getPost();
					} else {
						$('.pagination').remove();
					}
				}
			}
		});
	
		/**
	  * @description does the requested of items according to the page number sent
	  */
		function getPost() {
	
			$pagination.addClass('loanding').html('Loading more');
	
			fetch(urlPage + 'page/' + page).then(function (res) {
				return res.text();
			}).then(function (body) {
	
				setTimeout(function () {
					var entries = $('.entry-list', body);
					$('#entry').append(entries);
					$pagination.removeClass('loanding').html('Load more');
					page++;
				}, 1000);
			});
		}
	});

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/*
	* @package godofredoninja
	* Articles realred use first tag
	*/
	var mapacheRelated = function () {
		function mapacheRelated(elem) {
			_classCallCheck(this, mapacheRelated);
	
			this.elem = elem;
			this.postID = elem.attr('mapache-post-id');
			this.postTotal = elem.attr('mapache-post-total');
			this.postTags = elem.attr('mapache-tag');
			this.urlApi = ghost.url.api('posts', { include: 'tags' });
			this.count = 0;
		}
	
		/**
	  * Display Post
	  * @method mapacheCallback
	  * @param  {res} All post Json
	  * @return {html} Append in #related-wrap
	  */
	
	
		_createClass(mapacheRelated, [{
			key: 'mapacheCallback',
			value: function mapacheCallback(res) {
				var _this = this;
	
				var html = '';
				res.forEach(function (post) {
					for (var i = 0; i < post.tags.length; i++) {
						if (post.tags[i].id == _this.postTags && post.id != _this.postID) {
							if (_this.count < _this.postTotal) {
								html += _this.mapacheTemplate(post);
								_this.count++;
							}
						}
					}
				});
	
				if (this.count == 0) {
					this.elem.css('display', 'none');
				}
	
				$('#related-wrap').html(html);
			}
	
			/**
	   * Template related post
	   * @method mapacheTemplate
	   * @param  {post} Content Json post
	   * @return {html} content related post
	   */
	
		}, {
			key: 'mapacheTemplate',
			value: function mapacheTemplate(post) {
				var html = '',
				    post_image = '',
				    post_no_cover = 'no-image',
				    post_title = post.title,
				    post_url = post.url;
	
				if (post.image != null) {
					post_image = '\n\t\t\t<figure class="image">\n\t\t\t\t<a href="' + post_url + '" class="image-link">\n\t\t\t\t\t<span class="entries-bg" style="background-image:url(' + post.image + ')"></span>\n\t\t\t\t</a>\n\t\t\t</figure>';
	
					post_no_cover = '';
				}
	
				html = '\n\t\t<div class="col m4 ' + post_no_cover + '">\n\t\t\t<div class="related-posts-list">\n\t\t\t\t' + post_image + '\n\t\t\t\t<h2 class="title"><a href="' + post_url + '">' + post_title + '</a></h2>\n\t\t\t</div>\n\t\t</div>';
	
				return html;
			}
	
			/**
	   * Get api ghost
	   * @method mapacheGet
	   * @return {res} Json all Post
	   */
	
		}, {
			key: 'mapacheGet',
			value: function mapacheGet() {
				var _this2 = this;
	
				fetch(this.urlApi).then(function (res) {
					return res.json();
				}).then(function (json) {
					_this2.mapacheCallback(json.posts);
				});
			}
		}]);
	
		return mapacheRelated;
	}();
	
	module.exports = mapacheRelated;

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,