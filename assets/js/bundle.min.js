/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _app = __webpack_require__(1);
	
	var _app2 = _interopRequireDefault(_app);
	
	var _app3 = __webpack_require__(2);
	
	var _app4 = _interopRequireDefault(_app3);
	
	var _app5 = __webpack_require__(3);
	
	var _app6 = _interopRequireDefault(_app5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// eslint-disable-line
	
	/* variables globals */
	var $doc = $(document); /*
	                        @package godofredoninja
	                        
	                        ========================================================================
	                        Mapache Javascript Functions
	                        ========================================================================
	                        */
	
	// import external dependencies
	// import ghostHunter from './lib/jquery.ghostHunter'; // eslint-disable-line
	
	// import local dependencies
	
	var $win = $(window);
	
	var $cover = $('#cover');
	var $comments = $('.post-comments');
	var $followBox = $('.social_box');
	var $header = $('#header');
	var $postBody = $('.post-body');
	var $scrollTop = $('.scroll_top');
	var $searchInput = $('.search-field');
	var $share = $('.share');
	var $shareCount = $('.share-count');
	var $videoFormatBox = $('#video-format');
	
	var $pageUrl = $('body').attr('mapache-page-url');
	
	var urlRegexp = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \+\.-]*)*\/?$/; // eslint-disable-line
	
	/* Menu open and close for mobile */
	$('#nav-mob-toggle').on('click', function (e) {
	  e.preventDefault();
	  $('body').toggleClass('is-showNavMob');
	});
	
	/* Seach open and close for Mobile */
	$('#search-mob-toggle').on('click', function (e) {
	  e.preventDefault();
	  $header.toggleClass('is-showSearchMob');
	  $searchInput.focus();
	});
	
	/**
	 * Search open an close desktop.
	 * Api ghost for search
	 */
	$doc.on('ready', function () {
	  $searchInput.focus(function () {
	    $header.addClass('is-showSearch');
	    $('.search-popout').removeClass('closed');
	  }).blur(function () {
	    setTimeout(function () {
	      $header.removeClass('is-showSearch');
	      $('.search-popout').addClass('closed');
	    }, 200);
	  }).keyup(function () {
	    $('.search-suggest-results').css('display', 'block');
	  });
	
	  // $searchInput.ghostHunter({
	  //   results: '#search-results',
	  //   zeroResultsInfo: false,
	  //   displaySearchInfo: false,
	  //   result_template: `<a href="${$pageUrl}{{link}}">{{title}}</a>`,
	  //   onKeyUp: true,
	  // });
	});
	
	/* Header box shadow and transparent */
	function headerBackground() {
	  var scrollTop = $win.scrollTop();
	  var coverHeight = $cover.height() - $header.height();
	  var coverWrap = (coverHeight - scrollTop) / coverHeight;
	  if (scrollTop >= coverHeight) {
	    $header.addClass('toolbar-shadow').removeAttr('style');
	  } else {
	    $header.removeClass('toolbar-shadow').css({ background: 'transparent' });
	  }
	  $('.cover-wrap').css('opacity', coverWrap);
	}
	
	/* scroll link width click (ID)*/
	$('.scrolltop').on('click', function (e) {
	  e.preventDefault();
	  $('html, body').animate({ scrollTop: $($(this).attr('href')).offset().top - 50 }, 500, 'linear');
	});
	
	/* Scroll  */
	$scrollTop.on('click', function (e) {
	  e.preventDefault();
	  $('html, body').animate({ scrollTop: 0 }, 500);
	});
	
	/* Disqus Comment */
	function disqusComments(shortname) {
	  var dsq = document.createElement('script');
	  dsq.type = 'text/javascript';
	  dsq.async = true;
	  dsq.src = '//' + shortname + '.disqus.com/embed.js';
	  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	}
	
	/* Video Post Format */
	function videoPostFormat() {
	  $('.post-image').css('display', 'none');
	  var video = $('iframe[src*="youtube.com"]')[0];
	  $videoFormatBox.find('.video-featured').prepend(video);
	
	  if (typeof youtubeChannel !== 'undefined') {
	    $videoFormatBox.find('.video-content').removeAttr('style');
	
	    $.each(youtubeChannel, function (channelName, channelId) {
	      // eslint-disable-line
	      $videoFormatBox.find('.channel-name').html('Subscribe to <strong>' + channelName + '</strong>');
	      $('.g-ytsubscribe').attr('data-channelid', channelId);
	    });
	
	    var go = document.createElement('script');
	    go.type = 'text/javascript';
	    go.async = true;
	    go.src = 'https://apis.google.com/js/platform.js';
	    // document.body.appendChild(go);
	    var s = document.getElementsByTagName('script')[0];
	    s.parentNode.insertBefore(go, s);
	  }
	}
	
	$win.on('scroll', function () {
	  /* Add background Header */
	  if ($cover.length > 0) headerBackground();
	
	  /* show btn SctrollTop */
	  if ($(this).scrollTop() > 100) {
	    $scrollTop.addClass('visible');
	  } else {
	    $scrollTop.removeClass('visible');
	  }
	});
	
	$doc.on('ready', function () {
	  /* Change title home */
	  if (typeof titleHome !== 'undefined') $('#title-home').html(titleHome); // eslint-disable-line
	
	  /* FollowMe */
	  if (typeof followSocialMedia !== 'undefined') _app2.default.follow(followSocialMedia, $followBox, urlRegexp); // eslint-disable-line
	
	  /* Facebook Share Count */
	  _app2.default.facebookShare($shareCount);
	
	  /* Video Post Format*/
	  videoPostFormat();
	
	  /* Video Responsive*/
	  _app2.default.videoResponsive($postBody);
	
	  /* Share article in Social media */
	  $share.bind('click', function (e) {
	    e.preventDefault();
	    var share = new _app4.default($(this));
	    share.mapacheShare();
	  });
	
	  /* Disqys Comments */
	  if (typeof disqusShortname !== 'undefined' && $comments.length > 0) disqusComments(disqusShortname); // eslint-disable-line
	});

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	/* Return rounded and pretty value of share count. */
	var convertNumber = function convertNumber(n) {
	  if (n >= 1000000000) return (n / 1000000000).toFixed(1) + 'G';
	  if (n >= 1000000) return (n / 1000000).toFixed(1) + 'M';
	  if (n >= 1000) return (n / 1000).toFixed(1) + 'K';
	  return n;
	};
	
	/* add social follow  */
	function followMe(links, box, urlRegexp) {
	  return $.each(links, function (name, url) {
	    if (typeof url === 'string' && urlRegexp.test(url)) {
	      var template = '<a title="' + name + '" href="' + url + '" target="_blank" class="i-' + name + '"></a>';
	      box.append(template);
	    }
	  });
	}
	
	/* search all video in <post-body>  for Responsive*/
	function allVideoResponsive(elem) {
	  return elem.each(function () {
	    var selectors = ['iframe[src*="player.vimeo.com"]', 'iframe[src*="youtube.com"]', 'iframe[src*="youtube-nocookie.com"]', 'iframe[src*="kickstarter.com"][src*="video.html"]'];
	
	    var $allVideos = $(this).find(selectors.join(','));
	
	    $allVideos.each(function () {
	      $(this).wrap('<aside class="video-responsive"></aside>');
	    });
	  });
	}
	
	/* Facebook Comments Counts */
	function facebookShareCount(sharebox) {
	  sharebox.each(function () {
	    var url = sharebox.attr('godo-url');
	    var getURL = 'https://graph.facebook.com/?id=' + encodeURIComponent(url) + '&callback=?';
	
	    $.getJSON(getURL, function (res) {
	      if (res.share !== undefined) {
	        var n = res.share.share_count;
	        var count = convertNumber(n);
	        sharebox.html(count);
	      }
	    });
	  });
	}
	
	module.exports = {
	  follow: followMe,
	  videoResponsive: allVideoResponsive,
	  facebookShare: facebookShareCount
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/*
	* @package godofredoninja
	* Share social media
	*/
	
	var mapacheShare = function () {
	  function mapacheShare(elem) {
	    _classCallCheck(this, mapacheShare);
	
	    this.elem = elem;
	  }
	
	  /**
	   * @description Helper to get the attribute of a DOM element
	   * @param {String} attr DOM element attribute
	   * @returns {String|Empty} returns the attr value or empty string
	   */
	
	
	  _createClass(mapacheShare, [{
	    key: 'mapacheValue',
	    value: function mapacheValue(a) {
	      var val = this.elem.attr('mapache-' + a);
	      return val === undefined || val === null ? false : val;
	    }
	
	    /**
	     * @description Main share event. Will pop a window or redirect to a link
	     */
	
	  }, {
	    key: 'mapacheShare',
	    value: function mapacheShare() {
	      var socialMediaName = this.mapacheValue('share').toLowerCase();
	
	      var socialMedia = {
	        facebook: {
	          shareUrl: 'https://www.facebook.com/sharer/sharer.php',
	          params: {
	            url: this.mapacheValue('url')
	          }
	        },
	        twitter: {
	          shareUrl: 'https://twitter.com/intent/tweet/',
	          params: {
	            text: this.mapacheValue('title'),
	            url: this.mapacheValue('url')
	          }
	        },
	        reddit: {
	          shareUrl: 'https://www.reddit.com/submit',
	          params: {
	            url: this.mapacheValue('url')
	          }
	        },
	        pinterest: {
	          shareUrl: 'https://www.pinterest.com/pin/create/button/',
	          params: {
	            url: this.mapacheValue('url'),
	            description: this.mapacheValue('title')
	          }
	        },
	        linkedin: {
	          shareUrl: 'https://www.linkedin.com/shareArticle',
	          params: {
	            url: this.mapacheValue('url'),
	            mini: true
	          }
	        },
	        pocket: {
	          shareUrl: 'https://getpocket.com/save',
	          params: {
	            url: this.mapacheValue('url')
	          }
	        }
	      };
	
	      var social = socialMedia[socialMediaName];
	
	      return social !== undefined ? this.mapachePopup(social) : false;
	    }
	
	    /* windows Popup */
	
	  }, {
	    key: 'mapachePopup',
	    value: function mapachePopup(share) {
	      var p = share.params || {};
	      var keys = Object.keys(p);
	
	      var socialMediaUrl = share.shareUrl;
	      var str = keys.length > 0 ? '?' : '';
	
	      for (var i in keys) {
	        if (str !== '?') {
	          str += '&';
	        }
	        if (p[keys[i]]) {
	          str += keys[i] + '=' + encodeURIComponent(p[keys[i]]);
	        }
	      }
	
	      socialMediaUrl += str;
	
	      if (!share.isLink) {
	        var popWidth = 600;
	        var popHeight = 480;
	        var left = window.innerWidth / 2 - popWidth / 2 + window.screenX;
	        var top = window.innerHeight / 2 - popHeight / 2 + window.screenY;
	
	        var popParams = 'scrollbars=no, width=' + popWidth + ', height=' + popHeight + ', top=' + top + ', left=' + left;
	        var newWindow = window.open(socialMediaUrl, '', popParams);
	
	        if (window.focus) {
	          newWindow.focus();
	        }
	      } else {
	        window.location.href = socialMediaUrl;
	      }
	    }
	  }]);
	
	  return mapacheShare;
	}();
	
	/* Export Class */
	
	
	module.exports = mapacheShare;

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * @package godofredoninja
	 * pagination
	 */
	var $win = $(window);
	var paginationUrl = $('link[rel=canonical]').attr('href');
	var $btnLoadMore = $('.mapache-load-more');
	var $paginationTotal = $btnLoadMore.attr('mapache-page-total');
	
	var enableDisableScroll = false; // false => !1
	var pagingNumber = 2;
	
	/* Page end */
	function activeScroll() {
	  enableDisableScroll = true; // true => !0
	}
	
	//  window scroll
	$win.on('scroll', activeScroll);
	
	/* Scroll page END */
	function PageEnd() {
	  var scrollTopWindow = $win.scrollTop() + window.innerHeight;
	  var scrollTopBody = document.body.clientHeight - window.innerHeight * 2;
	
	  return enableDisableScroll === true && scrollTopWindow > scrollTopBody;
	}
	
	/* get urL */
	function getURL() {
	  $btnLoadMore.text('Loading...');
	
	  $.get(paginationUrl + 'page/' + pagingNumber, function (data) {
	    $win.off('scroll', activeScroll);
	
	    /* Add the following page after 2 seconds */
	    setTimeout(function () {
	      var entries = $('.feed-entry-wrapper', data);
	      $('.feed-entry-content').append(entries);
	
	      $btnLoadMore.html('Load more <i class="i-keyboard_arrow_down">');
	
	      $win.on('scroll', activeScroll);
	    }, 400);
	
	    pagingNumber += 1;
	
	    /* Scroll False*/
	    enableDisableScroll = false; // => !1;
	  });
	}
	
	$(document).on('ready', function () {
	  // set interbal
	  setInterval(function () {
	    if (PageEnd()) {
	      if (typeof $paginationTotal !== 'undefined' && !$btnLoadMore.hasClass('not-load-more')) {
	        /* Add class <.not-load-more> to <.mapache-load-more> */
	        if (pagingNumber === 3) $btnLoadMore.addClass('not-load-more');
	
	        if (pagingNumber <= $paginationTotal) {
	          getURL();
	        } else {
	          $btnLoadMore.remove();
	        }
	      }
	    }
	  }, 500);
	
	  /* Remove class <.not-load-more> to <.not-load-more> */
	  $('.content').on('click', '.mapache-load-more.not-load-more', function (e) {
	    e.preventDefault();
	    $(this).removeClass('not-load-more');
	  });
	});

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,